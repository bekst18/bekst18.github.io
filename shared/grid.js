import * as geo from "../shared/geo2d.js";
/**
 * a generic 2d array of data
 */
export class Grid {
    constructor(width = 0, height = 0, data, offset = 0, rowPitch = 0) {
        this.width = width;
        this.height = height;
        this.data = data;
        this.offset = offset;
        this.rowPitch = rowPitch;
        // check for errors
        if (this.rowPitch === 0) {
            this.rowPitch = this.width;
        }
        const maxOffset = this.offset + this.rowPitch * this.height;
        if (maxOffset > this.data.length) {
            throw new Error(`Max offset of ${maxOffset} is greater than length of data array - ${this.data.length}`);
        }
    }
    assertBounds(x, y) {
        if (x < 0 || x >= this.width) {
            throw new Error(`${x} x-coordinate is out of bounds, must be between 0 and ${this.width - 1}`);
        }
        if (y < 0 || y >= this.height) {
            throw new Error(`${y} y-coordinate is out of bounds, must be between 0 and ${this.height - 1}`);
        }
    }
    inBounds(x, y) {
        return x >= 0 && x < this.width && y >= 0 && y < this.height;
    }
    regionInBounds(x, y, width, height) {
        return this.inBounds(x, y) && this.inBounds(x + width - 1, y + height - 1);
    }
    aabbInBounds(aabb) {
        return this.regionInBounds(aabb.min.x, aabb.min.y, aabb.width, aabb.height);
    }
    /**
     * return flattened index for specified coordinates
     * @param x x coord
     * @param y y coord
     */
    flat(x, y) {
        this.assertBounds(x, y);
        const i = this.offset + y * this.rowPitch + x;
        return i;
    }
    /**
     * return flattened index for coordinates
     * @param xy coordinates to flatten
     */
    flatPoint(xy) {
        const { x, y } = xy;
        return this.flat(x, y);
    }
    /**
     * return item at specified "flat" index
     * @param i flat coordinate to access item at
     */
    atf(i) {
        const item = this.data[i];
        return item;
    }
    /**
     * access item at specified coordinates
     * @param x x coordinate
     * @param y y coordinate
     */
    at(x, y) {
        const i = this.flat(x, y);
        const item = this.atf(i);
        return item;
    }
    /**
     * access item at specified coordinates
     * @param xy coordinates to access
     */
    atPoint(xy) {
        const { x, y } = xy;
        return this.at(x, y);
    }
    /**
     * set item at specified flat index to specified value
     * @param i flat index of item
     * @param value value
     */
    setf(i, value) {
        this.data[i] = value;
    }
    /**
     * set item at specified coordinates to specified value
     * @param x x coordinate
     * @param y y coordinate
     * @param value value to set
     */
    set(x, y, value) {
        this.setf(this.flat(x, y), value);
    }
    /**
     * set item at specified coordinates to specified value
     * @param xy point
     * @param value value to set
     */
    setPoint(xy, value) {
        const { x, y } = xy;
        this.set(x, y, value);
    }
    /**
     * scan the specified region of the array
     * @param x0 x coord
     * @param y0 y coord
     * @param width width of scan region
     * @param height height of scan region
     * @param f function to call for each x/y coordinate
     */
    *scanRegion(x0, y0, width, height) {
        const r = x0 + width;
        const b = y0 + height;
        for (let y = y0; y < b; ++y) {
            for (let x = x0; x < r; ++x) {
                yield [this.at(x, y), x, y];
            }
        }
    }
    /**
     * scan the specified region of the array
     * @param aabb aabb containing area to scan
     * @param f function to call for each x/y coordinate
     */
    scanAABB(aabb) {
        return this.scanRegion(aabb.min.x, aabb.min.y, aabb.width, aabb.height);
    }
    /**
     * scan the entire grid
     * @param f function to call for each x/y coordinate
     */
    scan() {
        return this.scanRegion(0, 0, this.width, this.height);
    }
    /**
     * iterate over all data in grid
     */
    *[Symbol.iterator]() {
        for (const x of this.data) {
            yield x;
        }
    }
    /**
     * iterate over a specified region
     */
    *iterRegion(x0, y0, width, height) {
        const r = x0 + width;
        const b = y0 + height;
        for (let x = x0; x < r; ++x) {
            for (let y = y0; y < b; ++y) {
                yield this.at(x, y);
            }
        }
    }
    /**
    * iterate over a specified region
    */
    iterAABB(aabb) {
        return this.iterRegion(aabb.min.x, aabb.min.y, aabb.width, aabb.height);
    }
    /**
     * copy a portion of this grid into a new grid
     */
    view(x, y, width, height) {
        const offset = this.flat(x, y);
        const dst = new Grid(width, height, this.data, offset, this.rowPitch);
        return dst;
    }
    /**
    * copy a portion of this grid into a new grid
    */
    viewAABB(aabb) {
        const v = this.view(aabb.min.x, aabb.min.y, aabb.width, aabb.height);
        return v;
    }
    /**
     * construct an array by applying a function to every element in this grid
     * @param f mapping function
     */
    map(f) {
        const data = [];
        for (let y = 0; y < this.height; ++y) {
            for (let x = 0; x < this.width; ++x) {
                const v = this.at(x, y);
                data.push(f(v, x, y));
            }
        }
        return data;
    }
    /**
     * construct a grid by applying a function to every element in this grid
     * @param f mapping function
     */
    map2(f) {
        const data = this.map(f);
        return new Grid(this.width, this.height, data);
    }
    /**
     * find the coordinates of an element in the grid that meets the specified criteria
     * @param f predicate function
     */
    findPoint(f) {
        for (let y = 0; y < this.height; ++y) {
            for (let x = 0; x < this.width; ++x) {
                const v = this.at(x, y);
                if (f(v)) {
                    return new geo.Point(x, y);
                }
            }
        }
        return null;
    }
}
/**
 * copy source grid to destination grid
 * @param src source grid
 * @param dst destination grid
 * @param x destination x offset
 * @param y destination y offset
 */
export function copy(src, dst, dx, dy) {
    for (const [v, x, y] of src.scan()) {
        dst.set(x + dx, y + dy, v);
    }
}
/**
 * copy a region of grid to subgrid
 * @param src source grid
 * @param sx source x offset
 * @param sy source y offset
 * @param width width of region
 * @param height height of region
 * @param dst destination grid
 * @param dx destination x offset
 * @param dy destination y offset
 */
export function copyRegion(src, sx, sy, width, height, dst, dx, dy) {
    for (const [v, x, y] of src.scanRegion(sx, sy, width, height)) {
        dst.set(x + dx, y + dy, v);
    }
}
export function generate(width, height, f) {
    const data = [];
    for (let y = 0; y < height; ++y) {
        for (let x = 0; x < width; ++x) {
            data.push(f(x, y));
        }
    }
    const grd = new Grid(width, height, data);
    return grd;
}
//# sourceMappingURL=data:application/json;base64,