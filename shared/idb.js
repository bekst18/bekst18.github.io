export function waitRequest(req) {
    const prom = new Promise((resolve, reject) => {
        req.onsuccess = _ => resolve(req.result);
        req.onerror = _ => reject(req.error);
    });
    return prom;
}
/**
 * wait for idb transaction to complete or abort
 * complete / abort are both resolved
 * error is rejected
 * @param tx transaction
 */
export function waitTx(tx) {
    const prom = new Promise((resolve, reject) => {
        tx.oncomplete = _ => resolve();
        tx.onabort = _ => resolve();
        tx.onerror = _ => reject();
    });
    return prom;
}
/**
 * convert an array buffer to a blob
 * useful for Safari which can't directly store blobs in indexed db
 * use arrayBuffer2Blob to convert back to a blob later
 * @param blob blob
 */
export function blob2ArrayBuffer(blob) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.addEventListener("loadend", _ => resolve(reader.result));
        reader.addEventListener("error", x => reject(x));
        reader.readAsArrayBuffer(blob);
    });
}
/**
 * convert an array buffer to a blob
 * @param buffer array buffer
 * @param type mime type
 */
export function arrayBuffer2Blob(buffer, type) {
    return new Blob([buffer], { type: type });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRiLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaWRiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sVUFBVSxXQUFXLENBQUksR0FBa0I7SUFDN0MsTUFBTSxJQUFJLEdBQUcsSUFBSSxPQUFPLENBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDNUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDeEMsR0FBRyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDeEMsQ0FBQyxDQUFDLENBQUE7SUFFRixPQUFPLElBQUksQ0FBQTtBQUNmLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxNQUFNLENBQUMsRUFBa0I7SUFDckMsTUFBTSxJQUFJLEdBQUcsSUFBSSxPQUFPLENBQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDL0MsRUFBRSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQzlCLEVBQUUsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUMzQixFQUFFLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUE7SUFDOUIsQ0FBQyxDQUFDLENBQUE7SUFFRixPQUFPLElBQUksQ0FBQTtBQUNmLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxJQUFVO0lBQ3ZDLE9BQU8sSUFBSSxPQUFPLENBQWMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDaEQsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQTtRQUMvQixNQUFNLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFxQixDQUFDLENBQUMsQ0FBQTtRQUM5RSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDaEQsTUFBTSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ2xDLENBQUMsQ0FBQyxDQUFBO0FBQ04sQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsTUFBbUIsRUFBRSxJQUFZO0lBQzlELE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO0FBQzdDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gd2FpdFJlcXVlc3Q8VD4ocmVxOiBJREJSZXF1ZXN0PFQ+KTogUHJvbWlzZTxUPiB7XHJcbiAgICBjb25zdCBwcm9tID0gbmV3IFByb21pc2U8VD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIHJlcS5vbnN1Y2Nlc3MgPSBfID0+IHJlc29sdmUocmVxLnJlc3VsdClcclxuICAgICAgICByZXEub25lcnJvciA9IF8gPT4gcmVqZWN0KHJlcS5lcnJvcilcclxuICAgIH0pXHJcblxyXG4gICAgcmV0dXJuIHByb21cclxufVxyXG5cclxuLyoqXHJcbiAqIHdhaXQgZm9yIGlkYiB0cmFuc2FjdGlvbiB0byBjb21wbGV0ZSBvciBhYm9ydFxyXG4gKiBjb21wbGV0ZSAvIGFib3J0IGFyZSBib3RoIHJlc29sdmVkXHJcbiAqIGVycm9yIGlzIHJlamVjdGVkXHJcbiAqIEBwYXJhbSB0eCB0cmFuc2FjdGlvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHdhaXRUeCh0eDogSURCVHJhbnNhY3Rpb24pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGNvbnN0IHByb20gPSBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgdHgub25jb21wbGV0ZSA9IF8gPT4gcmVzb2x2ZSgpXHJcbiAgICAgICAgdHgub25hYm9ydCA9IF8gPT4gcmVzb2x2ZSgpXHJcbiAgICAgICAgdHgub25lcnJvciA9IF8gPT4gcmVqZWN0KClcclxuICAgIH0pXHJcblxyXG4gICAgcmV0dXJuIHByb21cclxufVxyXG5cclxuLyoqXHJcbiAqIGNvbnZlcnQgYW4gYXJyYXkgYnVmZmVyIHRvIGEgYmxvYlxyXG4gKiB1c2VmdWwgZm9yIFNhZmFyaSB3aGljaCBjYW4ndCBkaXJlY3RseSBzdG9yZSBibG9icyBpbiBpbmRleGVkIGRiXHJcbiAqIHVzZSBhcnJheUJ1ZmZlcjJCbG9iIHRvIGNvbnZlcnQgYmFjayB0byBhIGJsb2IgbGF0ZXJcclxuICogQHBhcmFtIGJsb2IgYmxvYlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGJsb2IyQXJyYXlCdWZmZXIoYmxvYjogQmxvYik6IFByb21pc2U8QXJyYXlCdWZmZXI+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxBcnJheUJ1ZmZlcj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcclxuICAgICAgICByZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRlbmRcIiwgXyA9PiByZXNvbHZlKHJlYWRlci5yZXN1bHQgYXMgQXJyYXlCdWZmZXIpKVxyXG4gICAgICAgIHJlYWRlci5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgeCA9PiByZWplY3QoeCkpXHJcbiAgICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpXHJcbiAgICB9KVxyXG59XHJcblxyXG4vKipcclxuICogY29udmVydCBhbiBhcnJheSBidWZmZXIgdG8gYSBibG9iXHJcbiAqIEBwYXJhbSBidWZmZXIgYXJyYXkgYnVmZmVyXHJcbiAqIEBwYXJhbSB0eXBlIG1pbWUgdHlwZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGFycmF5QnVmZmVyMkJsb2IoYnVmZmVyOiBBcnJheUJ1ZmZlciwgdHlwZTogc3RyaW5nKTogQmxvYiB7XHJcbiAgICByZXR1cm4gbmV3IEJsb2IoW2J1ZmZlcl0sIHsgdHlwZTogdHlwZSB9KVxyXG59Il19