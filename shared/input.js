/**
 * low-level input handling
 */
export var KeyState;
(function (KeyState) {
    KeyState[KeyState["Up"] = 0] = "Up";
    KeyState[KeyState["Down"] = 1] = "Down";
})(KeyState || (KeyState = {}));
export class Input {
    constructor(canvas) {
        this._mouseLeft = KeyState.Up;
        this._prevMouseLeft = KeyState.Up;
        this._mouseX = 0;
        this._mouseY = 0;
        this.prevKeys = new Map();
        this.keys = new Map();
        canvas.addEventListener("keydown", ev => this.handleKeyDown(ev));
        canvas.addEventListener("keyup", ev => this.handleKeyUp(ev));
        canvas.addEventListener("mousedown", ev => this.handleMouseDown(ev));
        canvas.addEventListener("mouseup", ev => this.handleMouseUp(ev));
        canvas.addEventListener("mousemove", ev => this.handleMouseMove(ev));
        canvas.addEventListener("touchstart", ev => this.handleTouchStart(ev));
        canvas.addEventListener("touchend", ev => this.handleTouchEnd(ev));
        canvas.addEventListener("touchmove", ev => this.handleTouchMove(ev));
    }
    get(key) {
        const kst = this.keys.get(key);
        if (!kst) {
            return KeyState.Up;
        }
        return kst;
    }
    getPrev(key) {
        const kst = this.prevKeys.get(key);
        if (!kst) {
            return KeyState.Up;
        }
        return kst;
    }
    up(key) {
        return this.get(key) === KeyState.Up;
    }
    down(key) {
        return this.get(key) == KeyState.Down;
    }
    pressed(key) {
        return this.getPrev(key) === KeyState.Up && this.get(key) === KeyState.Down;
    }
    held(key) {
        return this.getPrev(key) === KeyState.Down && this.get(key) === KeyState.Down;
    }
    released(key) {
        return this.getPrev(key) === KeyState.Down && this.get(key) === KeyState.Up;
    }
    // mouse
    get mouseX() {
        return this._mouseX;
    }
    get mouseY() {
        return this._mouseY;
    }
    get mouseLeftUp() {
        return this._mouseLeft === KeyState.Up;
    }
    get mouseLeftDown() {
        return this._mouseLeft == KeyState.Down;
    }
    get mouseLeftPressed() {
        return this._prevMouseLeft === KeyState.Up && this._mouseLeft === KeyState.Down;
    }
    get mouseLeftHeld() {
        return this._prevMouseLeft === KeyState.Down && this._mouseLeft === KeyState.Down;
    }
    get mouseLeftReleased() {
        return this._prevMouseLeft === KeyState.Down && this._mouseLeft === KeyState.Up;
    }
    /**
     * update key states, determining which are being held, released etc...
     * this should be done AFTER current input is checked
     */
    flush() {
        // process event list, updating key state
        this.prevKeys = new Map(this.keys);
        this._prevMouseLeft = this._mouseLeft;
    }
    handleKeyDown(ev) {
        this.keys.set(ev.key, KeyState.Down);
    }
    handleKeyUp(ev) {
        this.keys.set(ev.key, KeyState.Up);
    }
    handleMouseDown(ev) {
        switch (ev.button) {
            case 0:
                this._mouseLeft = KeyState.Down;
                break;
        }
    }
    handleMouseUp(ev) {
        switch (ev.button) {
            case 0:
                this._mouseLeft = KeyState.Up;
                break;
        }
    }
    handleMouseMove(ev) {
        this._mouseX = ev.clientX;
        this._mouseY = ev.clientY;
    }
    handleTouchStart(ev) {
        // prevent default here will stop sinulated mouse events
        ev.preventDefault();
        this._mouseLeft = KeyState.Down;
    }
    handleTouchEnd(ev) {
        // prevent default here will stop sinulated mouse events
        ev.preventDefault();
        this._mouseLeft = KeyState.Up;
    }
    handleTouchMove(ev) {
        // prevent default here will stop sinulated mouse events
        this._mouseX = ev.touches[0].clientX;
        this._mouseY = ev.touches[0].clientY;
    }
}
//# sourceMappingURL=data:application/json;base64,