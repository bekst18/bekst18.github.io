/**
 * low-level input handling
 */
export var KeyState;
(function (KeyState) {
    KeyState[KeyState["Up"] = 0] = "Up";
    KeyState[KeyState["Down"] = 1] = "Down";
})(KeyState || (KeyState = {}));
export class Keys {
    constructor() {
        this.prevKeys = new Map();
        this.keys = new Map();
        document.addEventListener("keydown", (ev) => this.handleKeyDown(ev));
        document.addEventListener("keyup", (ev) => this.handleKeyUp(ev));
    }
    get(key) {
        const kst = this.keys.get(key);
        if (!kst) {
            return KeyState.Up;
        }
        return kst;
    }
    getPrev(key) {
        const kst = this.prevKeys.get(key);
        if (!kst) {
            return KeyState.Up;
        }
        return kst;
    }
    up(key) {
        return this.get(key) === KeyState.Up;
    }
    down(key) {
        return this.get(key) == KeyState.Down;
    }
    pressed(key) {
        return this.getPrev(key) === KeyState.Up && this.get(key) === KeyState.Down;
    }
    held(key) {
        return this.getPrev(key) === KeyState.Down && this.get(key) === KeyState.Down;
    }
    released(key) {
        return this.getPrev(key) === KeyState.Down && this.get(key) === KeyState.Up;
    }
    /**
     * update key states, determining which are being held, released etc...
     * this should be done AFTER current input is checked
     */
    update() {
        // process event list, updating key state
        this.prevKeys = new Map(this.keys);
    }
    handleKeyDown(ev) {
        this.keys.set(ev.key, KeyState.Down);
    }
    handleKeyUp(ev) {
        this.keys.set(ev.key, KeyState.Up);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnB1dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUVILE1BQU0sQ0FBTixJQUFZLFFBR1g7QUFIRCxXQUFZLFFBQVE7SUFDaEIsbUNBQUUsQ0FBQTtJQUNGLHVDQUFJLENBQUE7QUFDUixDQUFDLEVBSFcsUUFBUSxLQUFSLFFBQVEsUUFHbkI7QUFFRCxNQUFNLE9BQU8sSUFBSTtJQUliO1FBSFEsYUFBUSxHQUEwQixJQUFJLEdBQUcsRUFBb0IsQ0FBQTtRQUM3RCxTQUFJLEdBQTBCLElBQUksR0FBRyxFQUFvQixDQUFBO1FBRzdELFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUNwRSxRQUFRLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDcEUsQ0FBQztJQUVELEdBQUcsQ0FBQyxHQUFXO1FBQ1gsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDOUIsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNOLE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQTtTQUNyQjtRQUVELE9BQU8sR0FBRyxDQUFBO0lBQ2QsQ0FBQztJQUVPLE9BQU8sQ0FBQyxHQUFXO1FBQ3ZCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2xDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDTixPQUFPLFFBQVEsQ0FBQyxFQUFFLENBQUE7U0FDckI7UUFFRCxPQUFPLEdBQUcsQ0FBQTtJQUNkLENBQUM7SUFFRCxFQUFFLENBQUMsR0FBVztRQUNWLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRLENBQUMsRUFBRSxDQUFBO0lBQ3hDLENBQUM7SUFFRCxJQUFJLENBQUMsR0FBVztRQUNaLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDO0lBQzFDLENBQUM7SUFFRCxPQUFPLENBQUMsR0FBVztRQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssUUFBUSxDQUFDLElBQUksQ0FBQTtJQUMvRSxDQUFDO0lBRUQsSUFBSSxDQUFDLEdBQVc7UUFDWixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssUUFBUSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxJQUFJLENBQUE7SUFDakYsQ0FBQztJQUVELFFBQVEsQ0FBQyxHQUFXO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssUUFBUSxDQUFDLEVBQUUsQ0FBQTtJQUMvRSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsTUFBTTtRQUNGLHlDQUF5QztRQUN6QyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksR0FBRyxDQUFtQixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDeEQsQ0FBQztJQUVPLGFBQWEsQ0FBQyxFQUFpQjtRQUNuQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUN4QyxDQUFDO0lBRU8sV0FBVyxDQUFDLEVBQWlCO1FBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ3RDLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBsb3ctbGV2ZWwgaW5wdXQgaGFuZGxpbmdcclxuICovXHJcblxyXG5leHBvcnQgZW51bSBLZXlTdGF0ZSB7XHJcbiAgICBVcCxcclxuICAgIERvd25cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEtleXMge1xyXG4gICAgcHJpdmF0ZSBwcmV2S2V5czogTWFwPHN0cmluZywgS2V5U3RhdGU+ID0gbmV3IE1hcDxzdHJpbmcsIEtleVN0YXRlPigpXHJcbiAgICBwcml2YXRlIGtleXM6IE1hcDxzdHJpbmcsIEtleVN0YXRlPiA9IG5ldyBNYXA8c3RyaW5nLCBLZXlTdGF0ZT4oKVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChldikgPT4gdGhpcy5oYW5kbGVLZXlEb3duKGV2KSlcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgKGV2KSA9PiB0aGlzLmhhbmRsZUtleVVwKGV2KSlcclxuICAgIH1cclxuXHJcbiAgICBnZXQoa2V5OiBzdHJpbmcpOiBLZXlTdGF0ZSB7XHJcbiAgICAgICAgY29uc3Qga3N0ID0gdGhpcy5rZXlzLmdldChrZXkpXHJcbiAgICAgICAgaWYgKCFrc3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtleVN0YXRlLlVwXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ga3N0XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRQcmV2KGtleTogc3RyaW5nKSA6IEtleVN0YXRlIHtcclxuICAgICAgICBjb25zdCBrc3QgPSB0aGlzLnByZXZLZXlzLmdldChrZXkpXHJcbiAgICAgICAgaWYgKCFrc3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtleVN0YXRlLlVwXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ga3N0XHJcbiAgICB9XHJcblxyXG4gICAgdXAoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXQoa2V5KSA9PT0gS2V5U3RhdGUuVXBcclxuICAgIH1cclxuXHJcbiAgICBkb3duKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGtleSkgPT0gS2V5U3RhdGUuRG93bjtcclxuICAgIH1cclxuXHJcbiAgICBwcmVzc2VkKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UHJldihrZXkpID09PSBLZXlTdGF0ZS5VcCAmJiB0aGlzLmdldChrZXkpID09PSBLZXlTdGF0ZS5Eb3duXHJcbiAgICB9XHJcblxyXG4gICAgaGVsZChrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFByZXYoa2V5KSA9PT0gS2V5U3RhdGUuRG93biAmJiB0aGlzLmdldChrZXkpID09PSBLZXlTdGF0ZS5Eb3duXHJcbiAgICB9XHJcblxyXG4gICAgcmVsZWFzZWQoa2V5OiBzdHJpbmcpIDogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UHJldihrZXkpID09PSBLZXlTdGF0ZS5Eb3duICYmIHRoaXMuZ2V0KGtleSkgPT09IEtleVN0YXRlLlVwXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiB1cGRhdGUga2V5IHN0YXRlcywgZGV0ZXJtaW5pbmcgd2hpY2ggYXJlIGJlaW5nIGhlbGQsIHJlbGVhc2VkIGV0Yy4uLlxyXG4gICAgICogdGhpcyBzaG91bGQgYmUgZG9uZSBBRlRFUiBjdXJyZW50IGlucHV0IGlzIGNoZWNrZWRcclxuICAgICAqL1xyXG4gICAgdXBkYXRlKCk6IHZvaWQge1xyXG4gICAgICAgIC8vIHByb2Nlc3MgZXZlbnQgbGlzdCwgdXBkYXRpbmcga2V5IHN0YXRlXHJcbiAgICAgICAgdGhpcy5wcmV2S2V5cyA9IG5ldyBNYXA8c3RyaW5nLCBLZXlTdGF0ZT4odGhpcy5rZXlzKVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaGFuZGxlS2V5RG93bihldjogS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgICAgIHRoaXMua2V5cy5zZXQoZXYua2V5LCBLZXlTdGF0ZS5Eb3duKVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaGFuZGxlS2V5VXAoZXY6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICB0aGlzLmtleXMuc2V0KGV2LmtleSwgS2V5U3RhdGUuVXApXHJcbiAgICB9XHJcbn0iXX0=