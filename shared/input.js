/**
 * low-level input handling
 */
export var KeyState;
(function (KeyState) {
    KeyState[KeyState["Up"] = 0] = "Up";
    KeyState[KeyState["Down"] = 1] = "Down";
})(KeyState || (KeyState = {}));
export class Input {
    constructor(canvas) {
        this._click = false;
        this._clickX = 0;
        this._clickY = 0;
        this.prevKeys = new Map();
        this.keys = new Map();
        canvas.addEventListener("keydown", (ev) => this.handleKeyDown(ev));
        canvas.addEventListener("keyup", (ev) => this.handleKeyUp(ev));
        canvas.addEventListener("click", (ev) => this.handleClick(ev));
    }
    get click() {
        return this._click;
    }
    get clickX() {
        return this._clickX;
    }
    get clickY() {
        return this._clickY;
    }
    get(key) {
        const kst = this.keys.get(key);
        if (!kst) {
            return KeyState.Up;
        }
        return kst;
    }
    getPrev(key) {
        const kst = this.prevKeys.get(key);
        if (!kst) {
            return KeyState.Up;
        }
        return kst;
    }
    up(key) {
        return this.get(key) === KeyState.Up;
    }
    down(key) {
        return this.get(key) == KeyState.Down;
    }
    pressed(key) {
        return this.getPrev(key) === KeyState.Up && this.get(key) === KeyState.Down;
    }
    held(key) {
        return this.getPrev(key) === KeyState.Down && this.get(key) === KeyState.Down;
    }
    released(key) {
        return this.getPrev(key) === KeyState.Down && this.get(key) === KeyState.Up;
    }
    /**
     * update key states, determining which are being held, released etc...
     * this should be done AFTER current input is checked
     */
    flush() {
        // process event list, updating key state
        this.prevKeys = new Map(this.keys);
        // reset click info
        this._click = false;
        this._clickX = 0;
        this._clickY = 0;
    }
    handleKeyDown(ev) {
        this.keys.set(ev.key, KeyState.Down);
    }
    handleKeyUp(ev) {
        this.keys.set(ev.key, KeyState.Up);
    }
    handleClick(ev) {
        this._click = true;
        this._clickX = ev.clientX;
        this._clickY = ev.clientY;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnB1dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUVILE1BQU0sQ0FBTixJQUFZLFFBR1g7QUFIRCxXQUFZLFFBQVE7SUFDaEIsbUNBQUUsQ0FBQTtJQUNGLHVDQUFJLENBQUE7QUFDUixDQUFDLEVBSFcsUUFBUSxLQUFSLFFBQVEsUUFHbkI7QUFFRCxNQUFNLE9BQU8sS0FBSztJQU9kLFlBQVksTUFBeUI7UUFON0IsV0FBTSxHQUFZLEtBQUssQ0FBQTtRQUN2QixZQUFPLEdBQVcsQ0FBQyxDQUFBO1FBQ25CLFlBQU8sR0FBVyxDQUFDLENBQUE7UUFDbkIsYUFBUSxHQUEwQixJQUFJLEdBQUcsRUFBb0IsQ0FBQTtRQUM3RCxTQUFJLEdBQTBCLElBQUksR0FBRyxFQUFvQixDQUFBO1FBRzdELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUNsRSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDOUQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ2xFLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDTCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUE7SUFDdEIsQ0FBQztJQUVELElBQUksTUFBTTtRQUNOLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQTtJQUN2QixDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ04sT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFBO0lBQ3ZCLENBQUM7SUFFRCxHQUFHLENBQUMsR0FBVztRQUNYLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQzlCLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDTixPQUFPLFFBQVEsQ0FBQyxFQUFFLENBQUE7U0FDckI7UUFFRCxPQUFPLEdBQUcsQ0FBQTtJQUNkLENBQUM7SUFFTyxPQUFPLENBQUMsR0FBVztRQUN2QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNsQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ04sT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFBO1NBQ3JCO1FBRUQsT0FBTyxHQUFHLENBQUE7SUFDZCxDQUFDO0lBRUQsRUFBRSxDQUFDLEdBQVc7UUFDVixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssUUFBUSxDQUFDLEVBQUUsQ0FBQTtJQUN4QyxDQUFDO0lBRUQsSUFBSSxDQUFDLEdBQVc7UUFDWixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQztJQUMxQyxDQUFDO0lBRUQsT0FBTyxDQUFDLEdBQVc7UUFDZixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssUUFBUSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxJQUFJLENBQUE7SUFDL0UsQ0FBQztJQUVELElBQUksQ0FBQyxHQUFXO1FBQ1osT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRLENBQUMsSUFBSSxDQUFBO0lBQ2pGLENBQUM7SUFFRCxRQUFRLENBQUMsR0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssUUFBUSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxFQUFFLENBQUE7SUFDL0UsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUs7UUFDRCx5Q0FBeUM7UUFDekMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLEdBQUcsQ0FBbUIsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRXBELG1CQUFtQjtRQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQTtRQUNuQixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQTtRQUNoQixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQTtJQUNwQixDQUFDO0lBRU8sYUFBYSxDQUFDLEVBQWlCO1FBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3hDLENBQUM7SUFFTyxXQUFXLENBQUMsRUFBaUI7UUFDakMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDdEMsQ0FBQztJQUVPLFdBQVcsQ0FBQyxFQUFjO1FBQzlCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQTtRQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUE7SUFDN0IsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIGxvdy1sZXZlbCBpbnB1dCBoYW5kbGluZ1xyXG4gKi9cclxuXHJcbmV4cG9ydCBlbnVtIEtleVN0YXRlIHtcclxuICAgIFVwLFxyXG4gICAgRG93blxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSW5wdXQge1xyXG4gICAgcHJpdmF0ZSBfY2xpY2s6IGJvb2xlYW4gPSBmYWxzZVxyXG4gICAgcHJpdmF0ZSBfY2xpY2tYOiBudW1iZXIgPSAwXHJcbiAgICBwcml2YXRlIF9jbGlja1k6IG51bWJlciA9IDBcclxuICAgIHByaXZhdGUgcHJldktleXM6IE1hcDxzdHJpbmcsIEtleVN0YXRlPiA9IG5ldyBNYXA8c3RyaW5nLCBLZXlTdGF0ZT4oKVxyXG4gICAgcHJpdmF0ZSBrZXlzOiBNYXA8c3RyaW5nLCBLZXlTdGF0ZT4gPSBuZXcgTWFwPHN0cmluZywgS2V5U3RhdGU+KClcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50KSB7XHJcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChldikgPT4gdGhpcy5oYW5kbGVLZXlEb3duKGV2KSlcclxuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIChldikgPT4gdGhpcy5oYW5kbGVLZXlVcChldikpXHJcbiAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXYpID0+IHRoaXMuaGFuZGxlQ2xpY2soZXYpKVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBjbGljaygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpY2tcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY2xpY2tYKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWNrWFxyXG4gICAgfVxyXG5cclxuICAgIGdldCBjbGlja1koKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpY2tZXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0KGtleTogc3RyaW5nKTogS2V5U3RhdGUge1xyXG4gICAgICAgIGNvbnN0IGtzdCA9IHRoaXMua2V5cy5nZXQoa2V5KVxyXG4gICAgICAgIGlmICgha3N0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBLZXlTdGF0ZS5VcFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGtzdFxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0UHJldihrZXk6IHN0cmluZyk6IEtleVN0YXRlIHtcclxuICAgICAgICBjb25zdCBrc3QgPSB0aGlzLnByZXZLZXlzLmdldChrZXkpXHJcbiAgICAgICAgaWYgKCFrc3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtleVN0YXRlLlVwXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ga3N0XHJcbiAgICB9XHJcblxyXG4gICAgdXAoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXQoa2V5KSA9PT0gS2V5U3RhdGUuVXBcclxuICAgIH1cclxuXHJcbiAgICBkb3duKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGtleSkgPT0gS2V5U3RhdGUuRG93bjtcclxuICAgIH1cclxuXHJcbiAgICBwcmVzc2VkKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UHJldihrZXkpID09PSBLZXlTdGF0ZS5VcCAmJiB0aGlzLmdldChrZXkpID09PSBLZXlTdGF0ZS5Eb3duXHJcbiAgICB9XHJcblxyXG4gICAgaGVsZChrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFByZXYoa2V5KSA9PT0gS2V5U3RhdGUuRG93biAmJiB0aGlzLmdldChrZXkpID09PSBLZXlTdGF0ZS5Eb3duXHJcbiAgICB9XHJcblxyXG4gICAgcmVsZWFzZWQoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRQcmV2KGtleSkgPT09IEtleVN0YXRlLkRvd24gJiYgdGhpcy5nZXQoa2V5KSA9PT0gS2V5U3RhdGUuVXBcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHVwZGF0ZSBrZXkgc3RhdGVzLCBkZXRlcm1pbmluZyB3aGljaCBhcmUgYmVpbmcgaGVsZCwgcmVsZWFzZWQgZXRjLi4uXHJcbiAgICAgKiB0aGlzIHNob3VsZCBiZSBkb25lIEFGVEVSIGN1cnJlbnQgaW5wdXQgaXMgY2hlY2tlZFxyXG4gICAgICovXHJcbiAgICBmbHVzaCgpOiB2b2lkIHtcclxuICAgICAgICAvLyBwcm9jZXNzIGV2ZW50IGxpc3QsIHVwZGF0aW5nIGtleSBzdGF0ZVxyXG4gICAgICAgIHRoaXMucHJldktleXMgPSBuZXcgTWFwPHN0cmluZywgS2V5U3RhdGU+KHRoaXMua2V5cylcclxuXHJcbiAgICAgICAgLy8gcmVzZXQgY2xpY2sgaW5mb1xyXG4gICAgICAgIHRoaXMuX2NsaWNrID0gZmFsc2VcclxuICAgICAgICB0aGlzLl9jbGlja1ggPSAwXHJcbiAgICAgICAgdGhpcy5fY2xpY2tZID0gMFxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaGFuZGxlS2V5RG93bihldjogS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgICAgIHRoaXMua2V5cy5zZXQoZXYua2V5LCBLZXlTdGF0ZS5Eb3duKVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaGFuZGxlS2V5VXAoZXY6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICB0aGlzLmtleXMuc2V0KGV2LmtleSwgS2V5U3RhdGUuVXApXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBoYW5kbGVDbGljayhldjogTW91c2VFdmVudCkge1xyXG4gICAgICAgIHRoaXMuX2NsaWNrID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9jbGlja1ggPSBldi5jbGllbnRYXHJcbiAgICAgICAgdGhpcy5fY2xpY2tZID0gZXYuY2xpZW50WVxyXG4gICAgfVxyXG59Il19