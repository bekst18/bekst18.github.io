/**
 * 1st attempt at a simple 2d geometry library
 */
import * as array from "../shared/array.js";
export class AABB {
    constructor(min, max) {
        this.min = min;
        this.max = max;
    }
    get width() {
        return this.max[0] - this.min[0];
    }
    get height() {
        return this.max[1] - this.min[1];
    }
    get area() {
        return this.width * this.height;
    }
    combine(aabb) {
        const min = [Math.min(this.min[0], aabb.min[0]), Math.min(this.min[1], aabb.min[1])];
        const max = [Math.max(this.max[0], aabb.max[0]), Math.max(this.max[1], aabb.max[1])];
        const r = new AABB(min, max);
        return r;
    }
    overlaps(aabb) {
        return (this.max[0] >= aabb.min[0] &&
            this.max[1] >= aabb.min[1] &&
            this.min[0] <= aabb.max[0] &&
            this.min[1] <= aabb.max[1]);
    }
    clone() {
        return new AABB(this.min, this.max);
    }
}
var NodeType;
(function (NodeType) {
    NodeType[NodeType["Internal"] = 0] = "Internal";
    NodeType[NodeType["Leaf"] = 1] = "Leaf";
})(NodeType || (NodeType = {}));
export class AABBTree {
    constructor() {
        this.root = null;
    }
    /**
     * insert a new node into the tree
     * returns a reference to the leaf node that can later be used for removal
     * @param aabb aabb of data
     * @param data data to insert
     */
    insert(aabb, data) {
        // create the leaf node that will be inserted
        const newLeaf = {
            type: NodeType.Leaf,
            aabb: aabb.clone(),
            parent: null,
            data
        };
        // no root, create a leaf
        if (!this.root) {
            this.root = newLeaf;
            return newLeaf;
        }
        // otherwise, choose a leaf to become the sibling of the new leaf
        const sibling = this.chooseSiblingLeaf(this.root, aabb);
        // create a new parent node
        const newParent = {
            type: NodeType.Internal,
            parent: sibling.parent,
            aabb: aabb.combine(sibling.aabb),
            children: [newLeaf, sibling]
        };
        sibling.parent = newParent;
        newLeaf.parent = newParent;
        // replace link in old parent with newly created parent
        // or if there was no parent, leaf was root, make new parent the new root
        let parent = newParent.parent;
        if (parent) {
            const idx = parent.children.indexOf(sibling);
            if (idx === -1) {
                throw new Error("Could not find link to chosen sibling");
            }
            parent.children[idx] = newParent;
        }
        else {
            this.root = newParent;
        }
        this.updateAABBs(parent);
        return newLeaf;
    }
    /**
     * removes specified leaf node and its data from the tree
     * @param leaf leaf
     */
    delete(leaf) {
        // special case - leaf is root
        if (this.root === leaf) {
            this.root = null;
            return;
        }
        const parent = leaf.parent;
        if (!parent) {
            throw new Error("Invalid tree, non-root leaf has no parent");
        }
        // otherwise,
        // replace leaf.parent with leaf's sibling
        // recalculate aabbs
        const sibling = parent.children.find(n => n !== leaf);
        if (!sibling) {
            throw new Error("Invalid tree, leaf node has no sibling");
        }
        const grandParent = parent.parent;
        // no grandparent - parent was root - make sibling the new root
        if (!grandParent) {
            this.root = sibling;
            sibling.parent = null;
            return;
        }
        const parentIdx = grandParent.children.indexOf(parent);
        if (parentIdx === -1) {
            throw new Error("Invalid tree, grandparent does not have link to parent");
        }
        grandParent.children[parentIdx] = sibling;
        sibling.parent = grandParent;
        this.updateAABBs(grandParent);
    }
    /**
     * Iterates over all data that overlaps the AABB
     * @param aabb aabb
     */
    *query(aabb) {
        const stack = [];
        if (this.root && this.root.aabb.overlaps(aabb)) {
            stack.push(this.root);
        }
        while (stack.length > 0) {
            const node = array.pop(stack);
            switch (node.type) {
                case NodeType.Internal:
                    for (const child of node.children) {
                        if (child.aabb.overlaps(aabb)) {
                            stack.push(child);
                        }
                    }
                    break;
                case NodeType.Leaf:
                    yield node.data;
                    break;
            }
        }
    }
    chooseSiblingLeaf(node, aabb) {
        // choose the leaf that would increase least in area by including this node
        switch (node.type) {
            case NodeType.Internal:
                const n = node.children.reduce((a, b) => {
                    // calculate surface area increase for node a
                    const da = a.aabb.area - a.aabb.combine(aabb).area;
                    const db = b.aabb.area - b.aabb.combine(aabb).area;
                    return da < db ? a : b;
                });
                return this.chooseSiblingLeaf(n, aabb);
                break;
            case NodeType.Leaf:
                // we've reached a leaf - return it
                return node;
        }
    }
    updateAABBs(node) {
        while (node != null) {
            node.aabb = node.children[0].aabb.combine(node.children[1].aabb);
            node = node.parent;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvMmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnZW8yZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUNILE9BQU8sS0FBSyxLQUFLLE1BQU0sb0JBQW9CLENBQUE7QUFJM0MsTUFBTSxPQUFPLElBQUk7SUFDYixZQUFxQixHQUFXLEVBQVcsR0FBVztRQUFqQyxRQUFHLEdBQUgsR0FBRyxDQUFRO1FBQVcsUUFBRyxHQUFILEdBQUcsQ0FBUTtJQUFJLENBQUM7SUFFM0QsSUFBSSxLQUFLO1FBQ0wsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDcEMsQ0FBQztJQUVELElBQUksTUFBTTtRQUNOLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3BDLENBQUM7SUFFRCxJQUFJLElBQUk7UUFDSixPQUFPLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQTtJQUNuQyxDQUFDO0lBRUQsT0FBTyxDQUFDLElBQVU7UUFDZCxNQUFNLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBVyxDQUFBO1FBQzlGLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJ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RUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQTtvQkFDbEQsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFBO29CQUNsRCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUMxQixDQUFDLENBQUMsQ0FBQTtnQkFFRixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7Z0JBQ3RDLE1BQU07WUFFVixLQUFLLFFBQVEsQ0FBQyxJQUFJO2dCQUNkLG1DQUFtQztnQkFDbkMsT0FBTyxJQUFJLENBQUE7U0FDbEI7SUFDTCxDQUFDO0lBRU8sV0FBVyxDQUFDLElBQTRCO1FBQzVDLE9BQU8sSUFBSSxJQUFJLElBQUksRUFBRTtZQUNqQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ2hFLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFBO1NBQ3JCO0lBQ0wsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIDFzdCBhdHRlbXB0IGF0IGEgc2ltcGxlIDJkIGdlb21ldHJ5IGxpYnJhcnlcclxuICovXHJcbmltcG9ydCAqIGFzIGFycmF5IGZyb20gXCIuLi9zaGFyZWQvYXJyYXkuanNcIlxyXG5cclxudHlwZSBDb29yZHMgPSBbbnVtYmVyLCBudW1iZXJdXHJcblxyXG5leHBvcnQgY2xhc3MgQUFCQiB7XHJcbiAgICBjb25zdHJ1Y3RvcihyZWFkb25seSBtaW46IENvb3JkcywgcmVhZG9ubHkgbWF4OiBDb29yZHMpIHsgfVxyXG5cclxuICAgIGdldCB3aWR0aCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYXhbMF0gLSB0aGlzLm1pblswXVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBoZWlnaHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWF4WzFdIC0gdGhpcy5taW5bMV1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgYXJlYSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53aWR0aCAqIHRoaXMuaGVpZ2h0XHJcbiAgICB9XHJcblxyXG4gICAgY29tYmluZShhYWJiOiBBQUJCKTogQUFCQiB7XHJcbiAgICAgICAgY29uc3QgbWluID0gW01hdGgubWluKHRoaXMubWluWzBdLCBhYWJiLm1pblswXSksIE1hdGgubWluKHRoaXMubWluWzFdLCBhYWJiLm1pblsxXSldIGFzIENvb3Jkc1xyXG4gICAgICAgIGNvbnN0IG1heCA9IFtNYXRoLm1heCh0aGlzLm1heFswXSwgYWFiYi5tYXhbMF0pLCBNYXRoLm1heCh0aGlzLm1heFsxXSwgYWFiYi5tYXhbMV0pXSBhcyBDb29yZHNcclxuICAgICAgICBjb25zdCByID0gbmV3IEFBQkIobWluLCBtYXgpXHJcbiAgICAgICAgcmV0dXJuIHJcclxuICAgIH1cclxuXHJcbiAgICBvdmVybGFwcyhhYWJiOiBBQUJCKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgdGhpcy5tYXhbMF0gPj0gYWFiYi5taW5bMF0gJiZcclxuICAgICAgICAgICAgdGhpcy5tYXhbMV0gPj0gYWFiYi5taW5bMV0gJiZcclxuICAgICAgICAgICAgdGhpcy5taW5bMF0gPD0gYWFiYi5tYXhbMF0gJiZcclxuICAgICAgICAgICAgdGhpcy5taW5bMV0gPD0gYWFiYi5tYXhbMV1cclxuICAgICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogQUFCQiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBBQUJCKHRoaXMubWluLCB0aGlzLm1heClcclxuICAgIH1cclxufVxyXG5cclxuZW51bSBOb2RlVHlwZSB7XHJcbiAgICBJbnRlcm5hbCxcclxuICAgIExlYWZcclxufVxyXG5cclxuaW50ZXJmYWNlIEludGVybmFsTm9kZTxUPiB7XHJcbiAgICB0eXBlOiBOb2RlVHlwZS5JbnRlcm5hbFxyXG4gICAgYWFiYjogQUFCQlxyXG4gICAgcGFyZW50OiBJbnRlcm5hbE5vZGU8VD4gfCBudWxsXHJcbiAgICBjaGlsZHJlbjogTm9kZTxUPltdXHJcbn1cclxuXHJcbmludGVyZmFjZSBMZWFmTm9kZTxUPiB7XHJcbiAgICB0eXBlOiBOb2RlVHlwZS5MZWFmXHJcbiAgICBhYWJiOiBBQUJCXHJcbiAgICBwYXJlbnQ6IEludGVybmFsTm9kZTxUPiB8IG51bGxcclxuICAgIGRhdGE6IFRcclxufVxyXG5cclxudHlwZSBOb2RlPFQ+ID0gSW50ZXJuYWxOb2RlPFQ+IHwgTGVhZk5vZGU8VD5cclxuXHJcbmV4cG9ydCBjbGFzcyBBQUJCVHJlZTxUPiB7XHJcbiAgICByb290OiBOb2RlPFQ+IHwgbnVsbCA9IG51bGxcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogaW5zZXJ0IGEgbmV3IG5vZGUgaW50byB0aGUgdHJlZVxyXG4gICAgICogcmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgbGVhZiBub2RlIHRoYXQgY2FuIGxhdGVyIGJlIHVzZWQgZm9yIHJlbW92YWxcclxuICAgICAqIEBwYXJhbSBhYWJiIGFhYmIgb2YgZGF0YVxyXG4gICAgICogQHBhcmFtIGRhdGEgZGF0YSB0byBpbnNlcnRcclxuICAgICAqL1xyXG4gICAgaW5zZXJ0KGFhYmI6IEFBQkIsIGRhdGE6IFQpOiBMZWFmTm9kZTxUPiB7XHJcbiAgICAgICAgLy8gY3JlYXRlIHRoZSBsZWFmIG5vZGUgdGhhdCB3aWxsIGJlIGluc2VydGVkXHJcbiAgICAgICAgY29uc3QgbmV3TGVhZjogTGVhZk5vZGU8VD4gPSB7XHJcbiAgICAgICAgICAgIHR5cGU6IE5vZGVUeXBlLkxlYWYsXHJcbiAgICAgICAgICAgIGFhYmI6IGFhYmIuY2xvbmUoKSxcclxuICAgICAgICAgICAgcGFyZW50OiBudWxsLFxyXG4gICAgICAgICAgICBkYXRhXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBubyByb290LCBjcmVhdGUgYSBsZWFmXHJcbiAgICAgICAgaWYgKCF0aGlzLnJvb3QpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290ID0gbmV3TGVhZlxyXG4gICAgICAgICAgICByZXR1cm4gbmV3TGVhZlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gb3RoZXJ3aXNlLCBjaG9vc2UgYSBsZWFmIHRvIGJlY29tZSB0aGUgc2libGluZyBvZiB0aGUgbmV3IGxlYWZcclxuICAgICAgICBjb25zdCBzaWJsaW5nID0gdGhpcy5jaG9vc2VTaWJsaW5nTGVhZih0aGlzLnJvb3QsIGFhYmIpXHJcblxyXG4gICAgICAgIC8vIGNyZWF0ZSBhIG5ldyBwYXJlbnQgbm9kZVxyXG4gICAgICAgIGNvbnN0IG5ld1BhcmVudDogSW50ZXJuYWxOb2RlPFQ+ID0ge1xyXG4gICAgICAgICAgICB0eXBlOiBOb2RlVHlwZS5JbnRlcm5hbCxcclxuICAgICAgICAgICAgcGFyZW50OiBzaWJsaW5nLnBhcmVudCxcclxuICAgICAgICAgICAgYWFiYjogYWFiYi5jb21iaW5lKHNpYmxpbmcuYWFiYiksXHJcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbbmV3TGVhZiwgc2libGluZ11cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNpYmxpbmcucGFyZW50ID0gbmV3UGFyZW50XHJcbiAgICAgICAgbmV3TGVhZi5wYXJlbnQgPSBuZXdQYXJlbnRcclxuXHJcbiAgICAgICAgLy8gcmVwbGFjZSBsaW5rIGluIG9sZCBwYXJlbnQgd2l0aCBuZXdseSBjcmVhdGVkIHBhcmVudFxyXG4gICAgICAgIC8vIG9yIGlmIHRoZXJlIHdhcyBubyBwYXJlbnQsIGxlYWYgd2FzIHJvb3QsIG1ha2UgbmV3IHBhcmVudCB0aGUgbmV3IHJvb3RcclxuICAgICAgICBsZXQgcGFyZW50ID0gbmV3UGFyZW50LnBhcmVudFxyXG4gICAgICAgIGlmIChwYXJlbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgaWR4ID0gcGFyZW50LmNoaWxkcmVuLmluZGV4T2Yoc2libGluZylcclxuICAgICAgICAgICAgaWYgKGlkeCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGxpbmsgdG8gY2hvc2VuIHNpYmxpbmdcIilcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcGFyZW50LmNoaWxkcmVuW2lkeF0gPSBuZXdQYXJlbnRcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QgPSBuZXdQYXJlbnRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudXBkYXRlQUFCQnMocGFyZW50KVxyXG4gICAgICAgIHJldHVybiBuZXdMZWFmXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZW1vdmVzIHNwZWNpZmllZCBsZWFmIG5vZGUgYW5kIGl0cyBkYXRhIGZyb20gdGhlIHRyZWVcclxuICAgICAqIEBwYXJhbSBsZWFmIGxlYWYgXHJcbiAgICAgKi9cclxuICAgIGRlbGV0ZShsZWFmOiBMZWFmTm9kZTxUPikge1xyXG4gICAgICAgIC8vIHNwZWNpYWwgY2FzZSAtIGxlYWYgaXMgcm9vdFxyXG4gICAgICAgIGlmICh0aGlzLnJvb3QgPT09IGxlYWYpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290ID0gbnVsbFxyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHBhcmVudCA9IGxlYWYucGFyZW50XHJcbiAgICAgICAgaWYgKCFwYXJlbnQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB0cmVlLCBub24tcm9vdCBsZWFmIGhhcyBubyBwYXJlbnRcIilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIG90aGVyd2lzZSxcclxuICAgICAgICAvLyByZXBsYWNlIGxlYWYucGFyZW50IHdpdGggbGVhZidzIHNpYmxpbmdcclxuICAgICAgICAvLyByZWNhbGN1bGF0ZSBhYWJic1xyXG4gICAgICAgIGNvbnN0IHNpYmxpbmcgPSBwYXJlbnQuY2hpbGRyZW4uZmluZChuID0+IG4gIT09IGxlYWYpXHJcbiAgICAgICAgaWYgKCFzaWJsaW5nKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdHJlZSwgbGVhZiBub2RlIGhhcyBubyBzaWJsaW5nXCIpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBncmFuZFBhcmVudCA9IHBhcmVudC5wYXJlbnRcclxuXHJcbiAgICAgICAgLy8gbm8gZ3JhbmRwYXJlbnQgLSBwYXJlbnQgd2FzIHJvb3QgLSBtYWtlIHNpYmxpbmcgdGhlIG5ldyByb290XHJcbiAgICAgICAgaWYgKCFncmFuZFBhcmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QgPSBzaWJsaW5nXHJcbiAgICAgICAgICAgIHNpYmxpbmcucGFyZW50ID0gbnVsbFxyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHBhcmVudElkeCA9IGdyYW5kUGFyZW50LmNoaWxkcmVuLmluZGV4T2YocGFyZW50KVxyXG4gICAgICAgIGlmIChwYXJlbnRJZHggPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdHJlZSwgZ3JhbmRwYXJlbnQgZG9lcyBub3QgaGF2ZSBsaW5rIHRvIHBhcmVudFwiKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ3JhbmRQYXJlbnQuY2hpbGRyZW5bcGFyZW50SWR4XSA9IHNpYmxpbmdcclxuICAgICAgICBzaWJsaW5nLnBhcmVudCA9IGdyYW5kUGFyZW50XHJcbiAgICAgICAgdGhpcy51cGRhdGVBQUJCcyhncmFuZFBhcmVudClcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEl0ZXJhdGVzIG92ZXIgYWxsIGRhdGEgdGhhdCBvdmVybGFwcyB0aGUgQUFCQlxyXG4gICAgICogQHBhcmFtIGFhYmIgYWFiYlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgKnF1ZXJ5KGFhYmI6IEFBQkIpOiBJdGVyYWJsZTxUPiB7XHJcbiAgICAgICAgY29uc3Qgc3RhY2s6IE5vZGU8VD5bXSA9IFtdXHJcbiAgICAgICAgaWYgKHRoaXMucm9vdCAmJiB0aGlzLnJvb3QuYWFiYi5vdmVybGFwcyhhYWJiKSkge1xyXG4gICAgICAgICAgICBzdGFjay5wdXNoKHRoaXMucm9vdClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBhcnJheS5wb3Aoc3RhY2spXHJcbiAgICAgICAgICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIE5vZGVUeXBlLkludGVybmFsOlxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2Ygbm9kZS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQuYWFiYi5vdmVybGFwcyhhYWJiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChjaGlsZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIE5vZGVUeXBlLkxlYWY6XHJcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgbm9kZS5kYXRhXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaG9vc2VTaWJsaW5nTGVhZihub2RlOiBOb2RlPFQ+LCBhYWJiOiBBQUJCKTogTm9kZTxUPiB7XHJcbiAgICAgICAgLy8gY2hvb3NlIHRoZSBsZWFmIHRoYXQgd291bGQgaW5jcmVhc2UgbGVhc3QgaW4gYXJlYSBieSBpbmNsdWRpbmcgdGhpcyBub2RlXHJcbiAgICAgICAgc3dpdGNoIChub2RlLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBOb2RlVHlwZS5JbnRlcm5hbDpcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBub2RlLmNoaWxkcmVuLnJlZHVjZSgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBzdXJmYWNlIGFyZWEgaW5jcmVhc2UgZm9yIG5vZGUgYVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhID0gYS5hYWJiLmFyZWEgLSBhLmFhYmIuY29tYmluZShhYWJiKS5hcmVhXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGIgPSBiLmFhYmIuYXJlYSAtIGIuYWFiYi5jb21iaW5lKGFhYmIpLmFyZWFcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGEgPCBkYiA/IGEgOiBiXHJcbiAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNob29zZVNpYmxpbmdMZWFmKG4sIGFhYmIpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgTm9kZVR5cGUuTGVhZjpcclxuICAgICAgICAgICAgICAgIC8vIHdlJ3ZlIHJlYWNoZWQgYSBsZWFmIC0gcmV0dXJuIGl0XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVwZGF0ZUFBQkJzKG5vZGU6IEludGVybmFsTm9kZTxUPiB8IG51bGwpIHtcclxuICAgICAgICB3aGlsZSAobm9kZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIG5vZGUuYWFiYiA9IG5vZGUuY2hpbGRyZW5bMF0uYWFiYi5jb21iaW5lKG5vZGUuY2hpbGRyZW5bMV0uYWFiYilcclxuICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19