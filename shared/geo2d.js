/**
 * 1st attempt at a simple 2d geometry library
 */
import * as array from "../shared/array.js";
export class Point {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
    equal(pt) {
        return this.x === pt.x && this.y === pt.y;
    }
    addScalar(x) {
        return new Point(this.x + x, this.y + x);
    }
    subScalar(x) {
        return new Point(this.x - x, this.y - x);
    }
    mulScalar(x) {
        return new Point(this.x * x, this.y * x);
    }
    divScalar(x) {
        return new Point(this.x / x, this.y / x);
    }
    addPoint(pt) {
        return new Point(this.x + pt.x, this.y + pt.y);
    }
    subPoint(pt) {
        return new Point(this.x - pt.x, this.y - pt.y);
    }
    mulPoint(pt) {
        return new Point(this.x * pt.x, this.y * pt.y);
    }
    divPoint(pt) {
        return new Point(this.x / pt.x, this.y / pt.y);
    }
    floor() {
        return new Point(Math.floor(this.x), Math.floor(this.y));
    }
    ciel() {
        return new Point(Math.ceil(this.x), Math.ceil(this.y));
    }
    round() {
        return new Point(Math.round(this.x), Math.round(this.y));
    }
    sign() {
        return new Point(Math.sign(this.x), Math.sign(this.y));
    }
    clone() {
        return new Point(this.x, this.y);
    }
}
export class AABB {
    constructor(min, max) {
        this.min = min;
        this.max = max;
    }
    get width() {
        return this.max.x - this.min.x;
    }
    get height() {
        return this.max.y - this.min.y;
    }
    get area() {
        return this.width * this.height;
    }
    get center() {
        return new Point(this.min.x + this.width / 2, this.min.y + this.height / 2);
    }
    combine(aabb) {
        const min = new Point(Math.min(this.min.x, aabb.min.x), Math.min(this.min.y, aabb.min.y));
        const max = new Point(Math.max(this.max.x, aabb.max.x), Math.max(this.max.y, aabb.max.y));
        const r = new AABB(min, max);
        return r;
    }
    overlaps(aabb) {
        return (this.max.x >= aabb.min.x &&
            this.max.y >= aabb.min.y &&
            this.min.x <= aabb.max.x &&
            this.min.y <= aabb.max.y);
    }
    translate(offset) {
        return new AABB(this.min.addPoint(offset), this.max.addPoint(offset));
    }
    scale(s) {
        return new AABB(this.min.mulScalar(s), this.max.mulScalar(s));
    }
    buffer(padding) {
        const min = new Point(this.min.x - padding, this.min.y - padding);
        const max = new Point(this.max.x + padding, this.max.y + padding);
        return new AABB(min, max);
    }
    shrink(amount) {
        return this.buffer(-amount);
    }
    clone() {
        return new AABB(this.min, this.max);
    }
}
var NodeType;
(function (NodeType) {
    NodeType[NodeType["Internal"] = 0] = "Internal";
    NodeType[NodeType["Leaf"] = 1] = "Leaf";
})(NodeType || (NodeType = {}));
export class AABBTree {
    constructor() {
        this.root = null;
    }
    /**
     * insert a new node into the tree
     * returns a reference to the leaf node that can later be used for removal
     * @param aabb aabb of data
     * @param data data to insert
     */
    insert(aabb, data) {
        // create the leaf node that will be inserted
        const newLeaf = {
            type: NodeType.Leaf,
            aabb: aabb.clone(),
            parent: null,
            data
        };
        // no root, create a leaf
        if (!this.root) {
            this.root = newLeaf;
            return newLeaf;
        }
        // otherwise, choose a leaf to become the sibling of the new leaf
        const sibling = this.chooseSiblingLeaf(this.root, aabb);
        // create a new parent node
        const newParent = {
            type: NodeType.Internal,
            parent: sibling.parent,
            aabb: aabb.combine(sibling.aabb),
            children: [newLeaf, sibling]
        };
        sibling.parent = newParent;
        newLeaf.parent = newParent;
        // replace link in old parent with newly created parent
        // or if there was no parent, leaf was root, make new parent the new root
        let parent = newParent.parent;
        if (parent) {
            const idx = parent.children.indexOf(sibling);
            if (idx === -1) {
                throw new Error("Could not find link to chosen sibling");
            }
            parent.children[idx] = newParent;
        }
        else {
            this.root = newParent;
        }
        this.updateAABBs(parent);
        return newLeaf;
    }
    /**
     * removes specified leaf node and its data from the tree
     * @param leaf leaf
     */
    delete(leaf) {
        // special case - leaf is root
        if (this.root === leaf) {
            this.root = null;
            return;
        }
        const parent = leaf.parent;
        if (!parent) {
            throw new Error("Invalid tree, non-root leaf has no parent");
        }
        // otherwise,
        // replace leaf.parent with leaf's sibling
        // recalculate aabbs
        const sibling = parent.children.find(n => n !== leaf);
        if (!sibling) {
            throw new Error("Invalid tree, leaf node has no sibling");
        }
        const grandParent = parent.parent;
        // no grandparent - parent was root - make sibling the new root
        if (!grandParent) {
            this.root = sibling;
            sibling.parent = null;
            return;
        }
        const parentIdx = grandParent.children.indexOf(parent);
        if (parentIdx === -1) {
            throw new Error("Invalid tree, grandparent does not have link to parent");
        }
        grandParent.children[parentIdx] = sibling;
        sibling.parent = grandParent;
        this.updateAABBs(grandParent);
    }
    /**
     * Iterates over all data that overlaps the AABB
     * @param aabb aabb
     */
    *query(aabb) {
        const stack = [];
        if (this.root && this.root.aabb.overlaps(aabb)) {
            stack.push(this.root);
        }
        while (stack.length > 0) {
            const node = array.pop(stack);
            switch (node.type) {
                case NodeType.Internal:
                    for (const child of node.children) {
                        if (child.aabb.overlaps(aabb)) {
                            stack.push(child);
                        }
                    }
                    break;
                case NodeType.Leaf:
                    yield node.data;
                    break;
            }
        }
    }
    chooseSiblingLeaf(node, aabb) {
        // choose the leaf that would increase least in area by including this node
        switch (node.type) {
            case NodeType.Internal:
                const n = node.children.reduce((a, b) => {
                    // calculate surface area increase for node a
                    const da = a.aabb.area - a.aabb.combine(aabb).area;
                    const db = b.aabb.area - b.aabb.combine(aabb).area;
                    return da < db ? a : b;
                });
                return this.chooseSiblingLeaf(n, aabb);
                break;
            case NodeType.Leaf:
                // we've reached a leaf - return it
                return node;
        }
    }
    updateAABBs(node) {
        while (node != null) {
            node.aabb = node.children[0].aabb.combine(node.children[1].aabb);
            node = node.parent;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,