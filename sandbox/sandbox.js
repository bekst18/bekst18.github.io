import * as util from "../shared/util.js";
const canvas = util.byId("canvas");
const ctx = canvas.getContext("2d");
if (!ctx) {
    throw new Error("Canvas element not supported");
}
init();
async function init() {
    const image = await util.loadImage("olts.jpg");
    canvas.width = image.width;
    canvas.height = image.height;
    ctx.drawImage(image, 0, 0);
    const originalImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
    {
        const imageData = copyImageData(originalImageData);
        util.bench(brightenImageData.name, () => brightenImageData(imageData));
    }
    {
        const imageData = copyImageData(originalImageData);
        util.bench(brightenLoop.name, () => brightenLoop(imageData));
    }
    {
        const imageData = copyImageData(originalImageData);
        util.bench(brightenScan.name, () => brightenScan(imageData));
    }
    {
        const imageData = copyImageData(originalImageData);
        const nested = nest(imageData);
        util.bench(brightenNested.name, () => brightenNested(nested));
        const newImageData = unnest(nested);
        ctx.putImageData(newImageData, 0, 0);
    }
    {
        const a = util.sequence(originalImageData.data.length / 4);
        util.bench("access array of numbers", () => {
            for (let i = 0; i < a.length; ++i) {
                a[1] += 9;
            }
        });
    }
}
function copyImageData(imageData) {
    return new ImageData(new Uint8ClampedArray(imageData.data), imageData.width, imageData.height);
}
function brightenImageData(imageData) {
    const data = imageData.data;
    for (let i = 0; i < data.length; i += 4) {
        data[i] += 64;
        data[i + 1] += 64;
        data[i + 2] += 64;
    }
}
function brightenLoop(imageData) {
    const { height, width, data } = imageData;
    const pixelPitch = 4;
    const rowPitch = width * pixelPitch;
    for (let y = 0; y < height; ++y) {
        const yOffset = y * rowPitch;
        for (let x = 0; x < width; ++x) {
            const xOffset = yOffset + x * pixelPitch;
            data[xOffset] += 64;
            data[xOffset + 1] += 64;
            data[xOffset + 2] += 64;
        }
    }
}
function brightenScan(imageData) {
    const data = imageData.data;
    scan(imageData, (_1, _2, offset) => {
        data[offset] += 64;
        data[offset + 1] += 64;
        data[offset + 2] += 64;
    });
}
function scan(imageData, f) {
    const { height, width } = imageData;
    const pixelPitch = 4;
    const rowPitch = width * pixelPitch;
    for (let y = 0; y < height; ++y) {
        const yOffset = y * rowPitch;
        for (let x = 0; x < width; ++x) {
            const xOffset = yOffset + x * pixelPitch;
            f(x, y, xOffset);
        }
    }
}
function nest(imageData) {
    const { height, width, data } = imageData;
    const pixelPitch = 4;
    const rowPitch = width * pixelPitch;
    const rows = [];
    for (let y = 0; y < height; ++y) {
        const yOffset = y * rowPitch;
        const row = [];
        for (let x = 0; x < width; ++x) {
            const xOffset = yOffset + x * pixelPitch;
            const color = [data[xOffset], data[xOffset + 1], data[xOffset + 2]];
            row.push(color);
        }
        rows.push(row);
    }
    return rows;
}
function unnest(data) {
    const flat = [];
    for (const row of data) {
        for (const color of row) {
            flat.push(color[0], color[1], color[2], 255);
        }
    }
    const height = data.length;
    const width = data[0].length;
    const imageData = new ImageData(new Uint8ClampedArray(flat), width, height);
    return imageData;
}
function brightenNested(data) {
    for (const row of data) {
        for (const color of row) {
            color[0] += 64;
            color[1] += 64;
            color[2] += 64;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,