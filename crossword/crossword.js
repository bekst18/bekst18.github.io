import * as dom from "../shared/dom.js";
import * as rand from "../shared/rand.js";
import * as geo from "../shared/geo2d.js";
const STORAGE_KEY = "crossword_storage";
var Direction;
(function (Direction) {
    Direction[Direction["Across"] = 0] = "Across";
    Direction[Direction["Down"] = 1] = "Down";
})(Direction || (Direction = {}));
function main() {
    let hintAnswers = new Array();
    const hintAnswerForm = dom.byId("hintAnswerForm");
    const hintInput = dom.byId("hint");
    const answerInput = dom.byId("answer");
    const hintAnswerTemplate = dom.byId("hintAnswerTemplate");
    const hintAnswerList = dom.byId("hintAnswers");
    const createButton = dom.byId("createButton");
    const clearButton = dom.byId("clearButton");
    const seed = rand.xmur3(new Date().toString());
    const rng = new rand.SFC32RNG(seed(), seed(), seed(), seed());
    const directions = [Direction.Across, Direction.Down];
    hintAnswerForm.addEventListener("submit", addHintAnswer);
    createButton.addEventListener("click", create);
    clearButton.addEventListener("click", clear);
    dom.delegate(hintAnswerList, "click", ".delete-button", deleteHintAnswer);
    load();
    function addHintAnswer(e) {
        e.preventDefault();
        const hint = hintInput.value;
        const answer = answerInput.value;
        if (!hint || !answer) {
            return;
        }
        hintAnswers.push({ hint, answer });
        save();
        updateHintAnswerList();
        hintInput.value = "";
        answerInput.value = "";
        hintInput.focus();
    }
    function updateHintAnswerList() {
        dom.removeAllChildren(hintAnswerList);
        for (const hintAnswer of hintAnswers) {
            const fragment = hintAnswerTemplate.content.cloneNode(true);
            const hintSpan = dom.bySelector(fragment, ".hint");
            const answerSpan = dom.bySelector(fragment, ".answer");
            hintSpan.textContent = hintAnswer.hint;
            answerSpan.textContent = hintAnswer.answer;
            hintAnswerList.appendChild(fragment);
        }
    }
    function rndDir() {
        return rand.choose(rng, directions);
    }
    function create() {
        // sort words from longest to shortest
        hintAnswers = hintAnswers.sort((a, b) => b.answer.length - a.answer.length);
        if (hintAnswers.length == 0) {
            alert("Please enter at least one hint and answer!");
            return;
        }
        // make all answers lowercase
        for (const ha of hintAnswers) {
            ha.answer = ha.answer.toLocaleLowerCase();
        }
        // place longest word at 0,0 randomly across/down
        const words = new Array();
        words.push(placeInitialWord(hintAnswers[0]));
        for (let i = 1; i < words.length; ++i) {
            let ha = hintAnswers[i];
            placeNextWord(words, ha);
        }
    }
    function placeInitialWord(hintAnswer) {
        const direction = rndDir();
        const position = new geo.Point(0, 0);
        let { hint, answer } = hintAnswer;
        return {
            hint,
            answer,
            position,
            direction
        };
    }
    function placeNextWord(words, hintAnswer) {
        // find next possible intersection with existing words
        const { hint, answer } = hintAnswer;
        for (const word of words) {
            // find next common letter
            const w = word.answer;
            for (let i = 0; i < w.length; ++i) {
                for (let j = 0; j < answer.length; ++i) {
                    if (w[i] === answer[j]) {
                        // try placing the word here
                    }
                }
            }
        }
    }
    function getDirectionVector(dir) {
        switch (dir) {
            case Direction.Across:
                return new geo.Point(1, 0);
                break;
            case Direction.Down:
                return new geo.Point(0, 1);
                break;
        }
        return new geo.Point(0, 0);
    }
    function getWordCharPosition(word, i) {
        const { position, direction } = word;
        const v = getDirectionVector(direction);
        return position.addPoint(v.mulScalar(i));
    }
    function tryPlaceWord(words, hint, answer) {
    }
    function clear() {
        hintAnswers = [];
        updateHintAnswerList();
        save();
    }
    function deleteHintAnswer(e) {
        const target = e.target;
        const li = target.closest(".hint-answer-li");
        const parent = li.parentElement;
        if (!parent) {
            return;
        }
        const index = Array.from(parent.children).indexOf(li);
        hintAnswers.splice(index, 1);
        save();
        updateHintAnswerList();
    }
    function load() {
        const jsonData = localStorage.getItem(STORAGE_KEY);
        if (!jsonData) {
            return;
        }
        hintAnswers = JSON.parse(jsonData);
        updateHintAnswerList();
    }
    function save() {
        const jsonData = JSON.stringify(hintAnswers);
        localStorage.setItem(STORAGE_KEY, jsonData);
    }
}
main();
//# sourceMappingURL=data:application/json;base64,