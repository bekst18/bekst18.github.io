import * as dom from "../shared/dom.js";
import * as util from "../shared/util.js";
init();
const state = {
    currentModule: null,
    currentPassage: null,
    currentChoice: null
};
function init() {
    initLoadUi();
    initPlayUi();
}
function initLoadUi() {
    const fileDropBox = dom.byId("fileDropBox");
    const fileInput = dom.byId("fileInput");
    const fileButton = dom.byId("fileButton");
    const urlInput = dom.byId("urlInput");
    const loadButton = dom.byId("urlButton");
    fileButton.addEventListener("click", () => {
        fileInput.click();
    });
    fileDropBox.addEventListener("dragenter", onDragEnterOver);
    fileDropBox.addEventListener("dragover", onDragEnterOver);
    fileDropBox.addEventListener("drop", onFileDrop);
    fileInput.addEventListener("change", () => {
        if (!fileInput.files) {
            return;
        }
        processFiles(fileInput.files);
    });
    loadButton.addEventListener("click", () => {
        clearErrorMessages();
        const url = urlInput.value;
        if (!url) {
            appendErrorMessage("A valid url is required");
            return;
        }
        loadFromUrl(url);
    });
    // for now - debug current game
    loadFromUrl("ana.cyoa.json");
}
function initPlayUi() {
    const choices = dom.byId("choices");
    const tryAgain = dom.byId("tryAgain");
    const nextPassage = dom.byId("nextPassage");
    dom.delegate(choices, "click", ".choice", (ev) => {
        if (!state.currentModule) {
            return;
        }
        if (!state.currentPassage) {
            return;
        }
        const choiceIdx = dom.getElementIndex(ev.target);
        const choice = state.currentPassage.choices[choiceIdx];
        handleChoice(state.currentModule, choice);
    });
    tryAgain.addEventListener("click", () => {
        if (!state.currentModule) {
            return;
        }
        loadModule(state.currentModule);
    });
    nextPassage.addEventListener("click", () => {
        var _a, _b;
        const passageId = (_a = state === null || state === void 0 ? void 0 : state.currentChoice) === null || _a === void 0 ? void 0 : _a.passageId;
        if (!passageId) {
            return;
        }
        const passage = (_b = state.currentModule) === null || _b === void 0 ? void 0 : _b.passages[passageId];
        if (!passage) {
            return;
        }
        loadPassage(passage);
    });
}
function loadFromString(json) {
    const module = util.tryf(() => (JSON.parse(json)));
    if (module instanceof Error) {
        appendErrorMessage(module.message);
        return;
    }
    if (!validateModule(module)) {
        return;
    }
    // module is valid - proceed
    loadModule(module);
}
function onDragEnterOver(ev) {
    ev.stopPropagation();
    ev.preventDefault();
}
function onFileDrop(ev) {
    ev.stopPropagation();
    ev.preventDefault();
    if (ev.dataTransfer == null) {
        return;
    }
    processFiles(ev.dataTransfer.files);
}
async function loadFromUrl(url) {
    const response = await util.tryf(() => fetch(url));
    if (response instanceof Error) {
        appendErrorMessage(response.message);
        return;
    }
    if (response.status != 200) {
        appendErrorMessage(`Could not load ${url}, unsuccessful response: ${response.status} - ${response.statusText}.`);
        return;
    }
    const json = await response.text();
    loadFromString(json);
}
async function processFiles(files) {
    if (files.length == 0) {
        return;
    }
    const file = files[0];
    const json = await file.text();
    loadFromString(json);
}
function loadModule(module) {
    state.currentModule = module;
    const loadUi = dom.byId("loadUi");
    const playUi = dom.byId("playUi");
    loadUi.hidden = true;
    playUi.hidden = false;
    // load module title
    const moduleTitle = dom.byId("moduleTitle");
    moduleTitle.textContent = module.title;
    // load initial passage
    const intro = module.passages["intro"];
    loadPassage(intro);
}
function loadPassage(passage) {
    const passageTitle = dom.byId("passageTitle");
    const passageBody = dom.byId("passageBody");
    const choicesDiv = dom.byId("choices");
    dom.removeAllChildren(choicesDiv);
    passageTitle.textContent = passage.title;
    passageBody.textContent = passage.body;
    const template = dom.byId("choiceTemplate");
    for (const choice of passage.choices) {
        const fragment = template.content.cloneNode(true);
        const choiceDiv = dom.bySelector(fragment, ".choice");
        choiceDiv.textContent = choice.body;
        choicesDiv.appendChild(fragment);
    }
    const tryAgain = dom.byId("tryAgain");
    const end = dom.byId("end");
    const nextPassage = dom.byId("nextPassage");
    nextPassage.hidden = true;
    if (passage.choices.length == 0) {
        end.hidden = false;
        tryAgain.hidden = false;
    }
    else {
        end.hidden = true;
        tryAgain.hidden = true;
    }
    state.currentPassage = passage;
}
function loadTransition(choice) {
    const passageTitle = dom.byId("passageTitle");
    const passageBody = dom.byId("passageBody");
    const choicesDiv = dom.byId("choices");
    dom.removeAllChildren(choicesDiv);
    passageTitle.textContent = "";
    passageBody.textContent = choice.transition;
    const tryAgain = dom.byId("tryAgain");
    const end = dom.byId("end");
    const nextPassage = dom.byId("nextPassage");
    if (choice.passageId) {
        nextPassage.hidden = false;
        end.hidden = true;
        tryAgain.hidden = true;
    }
    else {
        end.hidden = false;
        tryAgain.hidden = false;
        nextPassage.hidden = true;
    }
    state.currentChoice = choice;
}
function clearErrorMessages() {
    const errorsDiv = dom.byId("errors");
    dom.removeAllChildren(errorsDiv);
}
function validateModule(module) {
    clearErrorMessages();
    if (!module) {
        appendErrorMessage("No module was found - .json file should contain a top level module object.");
        return false;
    }
    if (!module.title) {
        appendErrorMessage("Module title is required.");
        return false;
    }
    if (!module.description) {
        appendErrorMessage("Module description is required.");
        return false;
    }
    if (!module.passages) {
        appendErrorMessage("Module must contain at least one passage.");
        return false;
    }
    const passages = Object.values(module.passages);
    let valid = true;
    for (const passage of passages) {
        const passageValid = validatePassage(module, passage);
        valid = valid && passageValid;
    }
    return valid;
}
function validatePassage(module, passage) {
    var _a;
    let valid = true;
    if (!passage.body) {
        appendErrorMessage("Each passage must have a body.");
        valid = false;
    }
    passage.choices = (_a = passage.choices) !== null && _a !== void 0 ? _a : [];
    for (const choice of passage.choices) {
        const choiceValid = validateChoice(module, choice);
        valid = valid && choiceValid;
    }
    return valid;
}
function validateChoice(module, choice) {
    let valid = true;
    if (!choice.body) {
        appendErrorMessage("Each choice must have a body.");
        valid = false;
    }
    if (!choice.passageId && !choice.transition) {
        appendErrorMessage("Each choice must have either a passageId or a transition.");
        valid = false;
    }
    if (choice.passageId && !(choice.passageId in module.passages)) {
        appendErrorMessage(`Could not find passage with id of ${choice.passageId}`);
        valid = false;
    }
    return valid;
}
function appendErrorMessage(error) {
    console.log(error);
    const errorsDiv = dom.byId("errors");
    const div = document.createElement("div");
    div.classList.add("error-message");
    div.textContent = error;
    errorsDiv.appendChild(div);
}
function handleChoice(module, choice) {
    if (choice.transition) {
        loadTransition(choice);
        return;
    }
    const passageId = choice.passageId;
    if (!passageId) {
        throw Error(`No transition or passageId for choice: ${choice.body}`);
    }
    const passage = module.passages[passageId];
    if (!passage) {
        throw Error(`Missing passage for choice: ${choice.body} with id ${passageId}`);
    }
    loadPassage(passage);
}
//# sourceMappingURL=data:application/json;base64,