import * as rand from "../shared/rand.js";
import * as array from "../shared/array.js";
main();
function main() {
    const input = array.uniform(0, 10);
    const output = array.uniform(0, 18);
    const w0 = array.generate(input.length * output.length, () => 1 - Math.random() * 2);
    tick(input, output, w0);
}
function tick(input, output, w0) {
    // reset input / output
    input.fill(0);
    output.fill(0);
    // generate an input
    const [x, y] = randInput(input);
    // step 1
    input[x] = 1;
    input[9] = 0;
    process(input, output, w0);
    // step 2
    input.fill(0);
    input[y] = 1;
    input[9] = 1;
    process(input, output, w0);
    // evaluate output
    // learn?
    // how to adjust weights to get closer to correct answer based on q?
}
function process(input, output, w) {
    for (let i = 0; i < output.length; ++i) {
        const iOffset = i * input.length;
        for (let j = 0; j < input.length; ++j) {
            const offset = iOffset + j;
            output[i] += input[j] * w[offset];
        }
    }
}
function randInput(input) {
    const x = rand.int(0, 10);
    const y = rand.int(0, 10);
    return [x, y];
}
function evalAdd(x, y, output) {
    console.log(output);
    // find output
    const o = output.indexOf(output.reduce((x, y) => x > y ? x : y));
    const r = Math.abs(o - (x + y));
    console.log(x, y, o, r);
    return r;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssSUFBSSxNQUFNLG1CQUFtQixDQUFBO0FBQ3pDLE9BQU8sS0FBSyxLQUFLLE1BQU0sb0JBQW9CLENBQUE7QUFFM0MsSUFBSSxFQUFFLENBQUE7QUFFTixTQUFTLElBQUk7SUFDVCxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUNsQyxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUNuQyxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQ3BGLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBQzNCLENBQUM7QUFFRCxTQUFTLElBQUksQ0FBQyxLQUFlLEVBQUUsTUFBZ0IsRUFBRSxFQUFZO0lBQ3pELHVCQUF1QjtJQUN2QixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ2IsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUVkLG9CQUFvQjtJQUNwQixNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUUvQixTQUFTO0lBQ1QsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNaLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDWixPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUUxQixTQUFTO0lBQ1QsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNiLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDWixLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ1osT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFFMUIsa0JBQWtCO0lBRWxCLFNBQVM7SUFDVCxvRUFBb0U7QUFFeEUsQ0FBQztBQUVELFNBQVMsT0FBTyxDQUFDLEtBQWUsRUFBRSxNQUFnQixFQUFFLENBQVc7SUFDM0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDcEMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUE7UUFDaEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDbkMsTUFBTSxNQUFNLEdBQUcsT0FBTyxHQUFHLENBQUMsQ0FBQTtZQUMxQixNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtTQUNwQztLQUNKO0FBQ0wsQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFDLEtBQWU7SUFDOUIsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDekIsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDekIsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUNqQixDQUFDO0FBRUQsU0FBUyxPQUFPLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxNQUFnQjtJQUNuRCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ25CLGNBQWM7SUFDZCxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDaEUsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUMvQixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ3ZCLE9BQU8sQ0FBQyxDQUFBO0FBQ1osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJhbmQgZnJvbSBcIi4uL3NoYXJlZC9yYW5kLmpzXCJcclxuaW1wb3J0ICogYXMgYXJyYXkgZnJvbSBcIi4uL3NoYXJlZC9hcnJheS5qc1wiXHJcblxyXG5tYWluKClcclxuXHJcbmZ1bmN0aW9uIG1haW4oKSB7XHJcbiAgICBjb25zdCBpbnB1dCA9IGFycmF5LnVuaWZvcm0oMCwgMTApXHJcbiAgICBjb25zdCBvdXRwdXQgPSBhcnJheS51bmlmb3JtKDAsIDE4KVxyXG4gICAgY29uc3QgdzAgPSBhcnJheS5nZW5lcmF0ZShpbnB1dC5sZW5ndGggKiBvdXRwdXQubGVuZ3RoLCAoKSA9PiAxIC0gTWF0aC5yYW5kb20oKSAqIDIpXHJcbiAgICB0aWNrKGlucHV0LCBvdXRwdXQsIHcwKVxyXG59XHJcblxyXG5mdW5jdGlvbiB0aWNrKGlucHV0OiBudW1iZXJbXSwgb3V0cHV0OiBudW1iZXJbXSwgdzA6IG51bWJlcltdKSB7XHJcbiAgICAvLyByZXNldCBpbnB1dCAvIG91dHB1dFxyXG4gICAgaW5wdXQuZmlsbCgwKVxyXG4gICAgb3V0cHV0LmZpbGwoMClcclxuXHJcbiAgICAvLyBnZW5lcmF0ZSBhbiBpbnB1dFxyXG4gICAgY29uc3QgW3gsIHldID0gcmFuZElucHV0KGlucHV0KVxyXG5cclxuICAgIC8vIHN0ZXAgMVxyXG4gICAgaW5wdXRbeF0gPSAxXHJcbiAgICBpbnB1dFs5XSA9IDBcclxuICAgIHByb2Nlc3MoaW5wdXQsIG91dHB1dCwgdzApXHJcblxyXG4gICAgLy8gc3RlcCAyXHJcbiAgICBpbnB1dC5maWxsKDApXHJcbiAgICBpbnB1dFt5XSA9IDFcclxuICAgIGlucHV0WzldID0gMVxyXG4gICAgcHJvY2VzcyhpbnB1dCwgb3V0cHV0LCB3MClcclxuXHJcbiAgICAvLyBldmFsdWF0ZSBvdXRwdXRcclxuXHJcbiAgICAvLyBsZWFybj9cclxuICAgIC8vIGhvdyB0byBhZGp1c3Qgd2VpZ2h0cyB0byBnZXQgY2xvc2VyIHRvIGNvcnJlY3QgYW5zd2VyIGJhc2VkIG9uIHE/XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9jZXNzKGlucHV0OiBudW1iZXJbXSwgb3V0cHV0OiBudW1iZXJbXSwgdzogbnVtYmVyW10pIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0cHV0Lmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgY29uc3QgaU9mZnNldCA9IGkgKiBpbnB1dC5sZW5ndGhcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGlucHV0Lmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IGlPZmZzZXQgKyBqXHJcbiAgICAgICAgICAgIG91dHB1dFtpXSArPSBpbnB1dFtqXSAqIHdbb2Zmc2V0XVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmFuZElucHV0KGlucHV0OiBudW1iZXJbXSk6IFtudW1iZXIsIG51bWJlcl0ge1xyXG4gICAgY29uc3QgeCA9IHJhbmQuaW50KDAsIDEwKVxyXG4gICAgY29uc3QgeSA9IHJhbmQuaW50KDAsIDEwKVxyXG4gICAgcmV0dXJuIFt4LCB5XVxyXG59XHJcblxyXG5mdW5jdGlvbiBldmFsQWRkKHg6IG51bWJlciwgeTogbnVtYmVyLCBvdXRwdXQ6IG51bWJlcltdKTogbnVtYmVyIHtcclxuICAgIGNvbnNvbGUubG9nKG91dHB1dClcclxuICAgIC8vIGZpbmQgb3V0cHV0XHJcbiAgICBjb25zdCBvID0gb3V0cHV0LmluZGV4T2Yob3V0cHV0LnJlZHVjZSgoeCwgeSkgPT4geCA+IHkgPyB4IDogeSkpXHJcbiAgICBjb25zdCByID0gTWF0aC5hYnMobyAtICh4ICsgeSkpXHJcbiAgICBjb25zb2xlLmxvZyh4LCB5LCBvLCByKVxyXG4gICAgcmV0dXJuIHJcclxufSJdfQ==