import * as dom from "../shared/dom.js";
import * as geo from "../shared/geo3d.js";
import * as gfx from "./gfx.js";
// step 1 - clear screen, init gl, etc...
// step 2 - draw a clip space triangle
// step 3 - draw a world space triangle
class App {
    constructor() {
        this.canvas = dom.byId("canvas");
        this.renderer = new gfx.Renderer(this.canvas);
        this.ticks = 0;
        this.batches = [];
    }
    exec() {
        requestAnimationFrame(() => this.tick());
        this.initScene();
    }
    initScene() {
        this.renderer.viewMatrix = geo.Mat4.lookAt(new geo.Vec3(0, 0, 4), new geo.Vec3(0, 0, -1), new geo.Vec3(0, 1, 0)).invert();
        const ixm = gfx.sphere(8, 8);
        const vao = this.renderer.createMesh(ixm);
        this.batches.push({
            vao: vao,
            worldMatrix: geo.Mat4.identity(),
            offset: 0,
            numIndices: ixm.indices.length
        });
    }
    tick() {
        this.drawScene();
        requestAnimationFrame(() => this.tick());
        ++this.ticks;
    }
    drawScene() {
        const rate = Math.PI / 60;
        //const worldMatrix = geo.Mat4.rotationY(this.ticks * rate)
        for (const batch of this.batches) {
            // batch.worldMatrix = worldMatrix
            this.renderer.drawBatch(batch);
        }
        this.renderer.present();
    }
}
const app = new App();
app.exec();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWtvdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJicmVha291dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssR0FBRyxNQUFNLGtCQUFrQixDQUFBO0FBQ3ZDLE9BQU8sS0FBSyxHQUFHLE1BQU0sb0JBQW9CLENBQUE7QUFDekMsT0FBTyxLQUFLLEdBQUcsTUFBTSxVQUFVLENBQUE7QUFFL0IseUNBQXlDO0FBQ3pDLHNDQUFzQztBQUN0Qyx1Q0FBdUM7QUFDdkMsTUFBTSxHQUFHO0lBQVQ7UUFDcUIsV0FBTSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFzQixDQUFBO1FBQ2hELGFBQVEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ2pELFVBQUssR0FBRyxDQUFDLENBQUE7UUFDVCxZQUFPLEdBQXFCLEVBQUUsQ0FBQTtJQXNDMUMsQ0FBQztJQXBDRyxJQUFJO1FBQ0EscUJBQXFCLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUE7UUFDeEMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFBO0lBQ3BCLENBQUM7SUFFTyxTQUFTO1FBQ2IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO1FBRXpILE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQzVCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBRXpDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1lBQ2QsR0FBRyxFQUFFLEdBQUc7WUFDUixXQUFXLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDaEMsTUFBTSxFQUFFLENBQUM7WUFDVCxVQUFVLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNO1NBQ2pDLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFFTyxJQUFJO1FBQ1IsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFBO1FBQ2hCLHFCQUFxQixDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO1FBQ3hDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQTtJQUNoQixDQUFDO0lBRU8sU0FBUztRQUNiLE1BQU0sSUFBSSxHQUFJLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFBO1FBQzFCLDJEQUEyRDtRQUUzRCxLQUFLLE1BQU0sS0FBSyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDOUIsa0NBQWtDO1lBQ2xDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFBO1NBQ2pDO1FBRUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUMzQixDQUFDO0NBQ0o7QUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFBO0FBQ3JCLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGRvbSBmcm9tIFwiLi4vc2hhcmVkL2RvbS5qc1wiXHJcbmltcG9ydCAqIGFzIGdlbyBmcm9tIFwiLi4vc2hhcmVkL2dlbzNkLmpzXCJcclxuaW1wb3J0ICogYXMgZ2Z4IGZyb20gXCIuL2dmeC5qc1wiXHJcblxyXG4vLyBzdGVwIDEgLSBjbGVhciBzY3JlZW4sIGluaXQgZ2wsIGV0Yy4uLlxyXG4vLyBzdGVwIDIgLSBkcmF3IGEgY2xpcCBzcGFjZSB0cmlhbmdsZVxyXG4vLyBzdGVwIDMgLSBkcmF3IGEgd29ybGQgc3BhY2UgdHJpYW5nbGVcclxuY2xhc3MgQXBwIHtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2FudmFzID0gZG9tLmJ5SWQoXCJjYW52YXNcIikgYXMgSFRNTENhbnZhc0VsZW1lbnRcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgcmVuZGVyZXIgPSBuZXcgZ2Z4LlJlbmRlcmVyKHRoaXMuY2FudmFzKVxyXG4gICAgcHJpdmF0ZSB0aWNrcyA9IDBcclxuICAgIHByaXZhdGUgYmF0Y2hlczogQXJyYXk8Z2Z4LkJhdGNoPiA9IFtdXHJcblxyXG4gICAgZXhlYygpIHtcclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy50aWNrKCkpXHJcbiAgICAgICAgdGhpcy5pbml0U2NlbmUoKVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaW5pdFNjZW5lKCkge1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIudmlld01hdHJpeCA9IGdlby5NYXQ0Lmxvb2tBdChuZXcgZ2VvLlZlYzMoMCwgMCwgNCksIG5ldyBnZW8uVmVjMygwLCAwLCAtMSksIG5ldyBnZW8uVmVjMygwLCAxLCAwKSkuaW52ZXJ0KClcclxuXHJcbiAgICAgICAgY29uc3QgaXhtID0gZ2Z4LnNwaGVyZSg4LCA4KVxyXG4gICAgICAgIGNvbnN0IHZhbyA9IHRoaXMucmVuZGVyZXIuY3JlYXRlTWVzaChpeG0pXHJcblxyXG4gICAgICAgIHRoaXMuYmF0Y2hlcy5wdXNoKHtcclxuICAgICAgICAgICAgdmFvOiB2YW8sXHJcbiAgICAgICAgICAgIHdvcmxkTWF0cml4OiBnZW8uTWF0NC5pZGVudGl0eSgpLFxyXG4gICAgICAgICAgICBvZmZzZXQ6IDAsXHJcbiAgICAgICAgICAgIG51bUluZGljZXM6IGl4bS5pbmRpY2VzLmxlbmd0aFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB0aWNrKCkge1xyXG4gICAgICAgIHRoaXMuZHJhd1NjZW5lKClcclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy50aWNrKCkpXHJcbiAgICAgICAgKyt0aGlzLnRpY2tzXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBkcmF3U2NlbmUoKSB7XHJcbiAgICAgICAgY29uc3QgcmF0ZSA9ICBNYXRoLlBJIC8gNjBcclxuICAgICAgICAvL2NvbnN0IHdvcmxkTWF0cml4ID0gZ2VvLk1hdDQucm90YXRpb25ZKHRoaXMudGlja3MgKiByYXRlKVxyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGJhdGNoIG9mIHRoaXMuYmF0Y2hlcykge1xyXG4gICAgICAgICAgICAvLyBiYXRjaC53b3JsZE1hdHJpeCA9IHdvcmxkTWF0cml4XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuZHJhd0JhdGNoKGJhdGNoKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5wcmVzZW50KClcclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgYXBwID0gbmV3IEFwcCgpXHJcbmFwcC5leGVjKCkiXX0=