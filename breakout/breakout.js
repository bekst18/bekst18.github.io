import * as dom from "../shared/dom.js";
import * as geo from "../shared/geo3d.js";
import * as gfx from "./gfx.js";
// step 1 - clear screen, init gl, etc...
// step 2 - draw a clip space triangle
// step 3 - draw a world space triangle
class App {
    constructor() {
        this.canvas = dom.byId("canvas");
        this.renderer = new gfx.Renderer(this.canvas);
        this.ticks = 0;
        this.batches = [];
    }
    exec() {
        requestAnimationFrame(() => this.tick());
        this.initScene();
    }
    initScene() {
        this.renderer.viewMatrix = geo.Mat4.lookAt(new geo.Vec3(0, 0, 8), new geo.Vec3(0, 0, -1), new geo.Vec3(0, 1, 0)).invert();
        const ixm = gfx.cube();
        const vao = this.renderer.createMesh(ixm);
        this.batches.push({
            vao: vao,
            worldMatrix: geo.Mat4.identity(),
            offset: 0,
            numIndices: ixm.indices.length
        });
    }
    tick() {
        // const rate =  Math.PI / 60
        // this.renderer.worldMatrix = geo.Mat4.rotationY(this.ticks * rate).matmul(geo.Mat4.translation(new geo.Vec3(0, 0, -16)))
        // this.renderer.worldMatrix = geo.Mat4.translation(new geo.Vec3(0, 0, -4))
        this.drawScene();
        requestAnimationFrame(() => this.tick());
        ++this.ticks;
    }
    drawScene() {
        for (const batch of this.batches) {
            this.renderer.drawBatch(batch);
        }
        this.renderer.present();
    }
}
const app = new App();
app.exec();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWtvdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJicmVha291dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssR0FBRyxNQUFNLGtCQUFrQixDQUFBO0FBQ3ZDLE9BQU8sS0FBSyxHQUFHLE1BQU0sb0JBQW9CLENBQUE7QUFDekMsT0FBTyxLQUFLLEdBQUcsTUFBTSxVQUFVLENBQUE7QUFFL0IseUNBQXlDO0FBQ3pDLHNDQUFzQztBQUN0Qyx1Q0FBdUM7QUFDdkMsTUFBTSxHQUFHO0lBQVQ7UUFDcUIsV0FBTSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFzQixDQUFBO1FBQ2hELGFBQVEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ2pELFVBQUssR0FBRyxDQUFDLENBQUE7UUFDVCxZQUFPLEdBQXFCLEVBQUUsQ0FBQTtJQXFDMUMsQ0FBQztJQW5DRyxJQUFJO1FBQ0EscUJBQXFCLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUE7UUFDeEMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFBO0lBQ3BCLENBQUM7SUFFTyxTQUFTO1FBQ2IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO1FBRXpILE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUN0QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUV6QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztZQUNkLEdBQUcsRUFBRSxHQUFHO1lBQ1IsV0FBVyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2hDLE1BQU0sRUFBRSxDQUFDO1lBQ1QsVUFBVSxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTTtTQUNqQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRU8sSUFBSTtRQUNSLDZCQUE2QjtRQUM3QiwwSEFBMEg7UUFDMUgsMkVBQTJFO1FBQzNFLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQTtRQUNoQixxQkFBcUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtRQUN4QyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDaEIsQ0FBQztJQUVPLFNBQVM7UUFDYixLQUFLLE1BQU0sS0FBSyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDOUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUE7U0FDakM7UUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQzNCLENBQUM7Q0FDSjtBQUVELE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7QUFDckIsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZG9tIGZyb20gXCIuLi9zaGFyZWQvZG9tLmpzXCJcclxuaW1wb3J0ICogYXMgZ2VvIGZyb20gXCIuLi9zaGFyZWQvZ2VvM2QuanNcIlxyXG5pbXBvcnQgKiBhcyBnZnggZnJvbSBcIi4vZ2Z4LmpzXCJcclxuXHJcbi8vIHN0ZXAgMSAtIGNsZWFyIHNjcmVlbiwgaW5pdCBnbCwgZXRjLi4uXHJcbi8vIHN0ZXAgMiAtIGRyYXcgYSBjbGlwIHNwYWNlIHRyaWFuZ2xlXHJcbi8vIHN0ZXAgMyAtIGRyYXcgYSB3b3JsZCBzcGFjZSB0cmlhbmdsZVxyXG5jbGFzcyBBcHAge1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBjYW52YXMgPSBkb20uYnlJZChcImNhbnZhc1wiKSBhcyBIVE1MQ2FudmFzRWxlbWVudFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSByZW5kZXJlciA9IG5ldyBnZnguUmVuZGVyZXIodGhpcy5jYW52YXMpXHJcbiAgICBwcml2YXRlIHRpY2tzID0gMFxyXG4gICAgcHJpdmF0ZSBiYXRjaGVzOiBBcnJheTxnZnguQmF0Y2g+ID0gW11cclxuXHJcbiAgICBleGVjKCkge1xyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLnRpY2soKSlcclxuICAgICAgICB0aGlzLmluaXRTY2VuZSgpXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpbml0U2NlbmUoKSB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci52aWV3TWF0cml4ID0gZ2VvLk1hdDQubG9va0F0KG5ldyBnZW8uVmVjMygwLCAwLCA4KSwgbmV3IGdlby5WZWMzKDAsIDAsIC0xKSwgbmV3IGdlby5WZWMzKDAsIDEsIDApKS5pbnZlcnQoKVxyXG5cclxuICAgICAgICBjb25zdCBpeG0gPSBnZnguY3ViZSgpXHJcbiAgICAgICAgY29uc3QgdmFvID0gdGhpcy5yZW5kZXJlci5jcmVhdGVNZXNoKGl4bSlcclxuXHJcbiAgICAgICAgdGhpcy5iYXRjaGVzLnB1c2goe1xyXG4gICAgICAgICAgICB2YW86IHZhbyxcclxuICAgICAgICAgICAgd29ybGRNYXRyaXg6IGdlby5NYXQ0LmlkZW50aXR5KCksXHJcbiAgICAgICAgICAgIG9mZnNldDogMCxcclxuICAgICAgICAgICAgbnVtSW5kaWNlczogaXhtLmluZGljZXMubGVuZ3RoXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHRpY2soKSB7XHJcbiAgICAgICAgLy8gY29uc3QgcmF0ZSA9ICBNYXRoLlBJIC8gNjBcclxuICAgICAgICAvLyB0aGlzLnJlbmRlcmVyLndvcmxkTWF0cml4ID0gZ2VvLk1hdDQucm90YXRpb25ZKHRoaXMudGlja3MgKiByYXRlKS5tYXRtdWwoZ2VvLk1hdDQudHJhbnNsYXRpb24obmV3IGdlby5WZWMzKDAsIDAsIC0xNikpKVxyXG4gICAgICAgIC8vIHRoaXMucmVuZGVyZXIud29ybGRNYXRyaXggPSBnZW8uTWF0NC50cmFuc2xhdGlvbihuZXcgZ2VvLlZlYzMoMCwgMCwgLTQpKVxyXG4gICAgICAgIHRoaXMuZHJhd1NjZW5lKClcclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy50aWNrKCkpXHJcbiAgICAgICAgKyt0aGlzLnRpY2tzXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBkcmF3U2NlbmUoKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBiYXRjaCBvZiB0aGlzLmJhdGNoZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5kcmF3QmF0Y2goYmF0Y2gpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnJlbmRlcmVyLnByZXNlbnQoKVxyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBhcHAgPSBuZXcgQXBwKClcclxuYXBwLmV4ZWMoKSJdfQ==