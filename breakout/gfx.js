import * as glu from "../shared/glu.js";
import * as geo from "../shared/geo3d.js";
import * as array from "../shared/array.js";
import * as iter from "../shared/iter.js";
const vertexSrc = `#version 300 es
precision mediump float;
uniform mat4 world_matrix;
uniform mat4 view_matrix;
uniform mat4 projection_matrix;
uniform vec4 diffuse_color;

in vec3 vert_position;
in vec3 vert_normal;
in vec4 vert_color;
out vec3 frag_normal;
out vec3 frag_position;
out vec4 frag_color;

void main() {
    frag_color = vert_color * diffuse_color;
    frag_normal = mat3(world_matrix) * vert_normal;
    vec4 position_world = world_matrix * vec4(vert_position, 1.f);
    gl_Position = projection_matrix * view_matrix * position_world;
    frag_position = position_world.xyz / position_world.w;
}`;
const fragmentSrc = `#version 300 es
precision highp float;
precision highp sampler2D;
precision highp sampler2DArray;

uniform vec3 eye_position;
uniform float roughness;
in vec4 frag_color;
in vec3 frag_position;
in vec3 frag_normal;
out vec4 out_color;

void main() {
    float specular_intensity = 1.f - roughness;
    float specular_pow = mix(.1f, 32.f, specular_intensity);
    vec3 surface_normal = normalize(frag_normal);
    vec3 to_light = normalize(vec3(-1, 0, 1));
    vec3 half_vec = normalize(normalize(eye_position - frag_position) + to_light);
    float ndl = clamp(dot(to_light, surface_normal), 0.f, 1.f);
    float ndh = pow(clamp(dot(half_vec, surface_normal), 0.0, 1.f), specular_pow);

    vec3 directional = frag_color.rgb * ndl;
    vec3 specular = vec3(1, 1, 1) * ndh * specular_intensity;
    out_color = vec4(directional + specular, frag_color.a);
}`;
export class Vertex {
    constructor(options = {}) {
        var _a, _b, _c, _d, _e, _f;
        this.position = (_b = (_a = options.position) === null || _a === void 0 ? void 0 : _a.clone()) !== null && _b !== void 0 ? _b : new geo.Vec3(0, 0, 0);
        this.normal = (_d = (_c = options.normal) === null || _c === void 0 ? void 0 : _c.clone()) !== null && _d !== void 0 ? _d : new geo.Vec3(0, 0, 0);
        this.color = (_f = (_e = options.color) === null || _e === void 0 ? void 0 : _e.clone()) !== null && _f !== void 0 ? _f : new geo.Vec4(1, 1, 1, 1);
    }
    clone() {
        return new Vertex(this);
    }
}
export class IxMesh {
    constructor(options = {}) {
        this.vertices = [];
        this.indices = [];
        if (options.vertices) {
            this.vertices.push(...options.vertices);
        }
        if (options.indices) {
            this.indices.push(...options.indices);
        }
    }
    clear() {
        this.vertices = [];
        this.indices = [];
    }
    transform(mat) {
        transform(mat, this.vertices);
    }
    cat(ixm) {
        const offset = this.vertices.length;
        this.vertices.push(...ixm.vertices.map(v => v.clone()));
        this.indices.push(...ixm.indices.map(ix => ix + offset));
    }
    calcAABB() {
        return calcAABB(this.vertices);
    }
    static cube() {
        // -x, +x, -y, +y, -z, +z
        const vertices = new Array(
        // -x
        new Vertex({ position: new geo.Vec3(-1, -1, -1), normal: new geo.Vec3(-1, 0, 0) }), new Vertex({ position: new geo.Vec3(-1, -1, 1), normal: new geo.Vec3(-1, 0, 0) }), new Vertex({ position: new geo.Vec3(-1, 1, 1), normal: new geo.Vec3(-1, 0, 0), }), new Vertex({ position: new geo.Vec3(-1, 1, -1), normal: new geo.Vec3(-1, 0, 0) }), 
        // +x
        new Vertex({ position: new geo.Vec3(1, -1, 1), normal: new geo.Vec3(1, 0, 0) }), new Vertex({ position: new geo.Vec3(1, -1, -1), normal: new geo.Vec3(1, 0, 0) }), new Vertex({ position: new geo.Vec3(1, 1, -1), normal: new geo.Vec3(1, 0, 0) }), new Vertex({ position: new geo.Vec3(1, 1, 1), normal: new geo.Vec3(1, 0, 0) }), 
        // -y
        new Vertex({ position: new geo.Vec3(-1, -1, 1), normal: new geo.Vec3(0, -1, 0) }), new Vertex({ position: new geo.Vec3(-1, -1, -1), normal: new geo.Vec3(0, -1, 0) }), new Vertex({ position: new geo.Vec3(1, -1, -1), normal: new geo.Vec3(0, -1, 0) }), new Vertex({ position: new geo.Vec3(1, -1, 1), normal: new geo.Vec3(0, -1, 0) }), 
        // +y
        new Vertex({ position: new geo.Vec3(-1, 1, 1), normal: new geo.Vec3(0, 1, 0) }), new Vertex({ position: new geo.Vec3(1, 1, 1), normal: new geo.Vec3(0, 1, 0) }), new Vertex({ position: new geo.Vec3(1, 1, -1), normal: new geo.Vec3(0, 1, 0) }), new Vertex({ position: new geo.Vec3(-1, 1, -1), normal: new geo.Vec3(0, 1, 0) }), 
        // -z
        new Vertex({ position: new geo.Vec3(-1, -1, -1), normal: new geo.Vec3(0, 0, -1) }), new Vertex({ position: new geo.Vec3(-1, 1, -1), normal: new geo.Vec3(0, 0, -1) }), new Vertex({ position: new geo.Vec3(1, 1, -1), normal: new geo.Vec3(0, 0, -1) }), new Vertex({ position: new geo.Vec3(1, -1, -1), normal: new geo.Vec3(0, 0, -1) }), 
        // +z
        new Vertex({ position: new geo.Vec3(-1, -1, 1), normal: new geo.Vec3(0, 0, 1) }), new Vertex({ position: new geo.Vec3(1, -1, 1), normal: new geo.Vec3(0, 0, 1) }), new Vertex({ position: new geo.Vec3(1, 1, 1), normal: new geo.Vec3(0, 0, 1) }), new Vertex({ position: new geo.Vec3(-1, 1, 1), normal: new geo.Vec3(0, 0, 1) }));
        return new IxMesh({
            vertices,
            indices: quadIndices(vertices.length / 4)
        });
    }
    static sphere(rows, cols) {
        // create north pole
        const vertices = new Array();
        const indices = new Array();
        const northPole = new Vertex({ position: new geo.Vec3(0, 1, 0), normal: new geo.Vec3(0, 1, 0), color: new geo.Vec4(1, 1, 1, 1) });
        vertices.push(northPole);
        // iterate over angles, essentially forming polar coordinates of each point
        // let theta = elevation angle above xy plane
        // let phi = xy plane angle
        const dtheta = Math.PI / (rows + 1);
        const dphi = 2 * Math.PI / cols;
        for (let j = 0; j < cols; ++j) {
            const phi = dphi * j;
            const theta = dtheta;
            const position = new geo.Vec3(Math.sin(theta) * Math.cos(phi), Math.cos(theta), Math.sin(theta) * Math.sin(phi));
            vertices.push(new Vertex({ position: position, normal: position, color: new geo.Vec4(1, 1, 1, 1) }));
            // connect to pole to form triangle
            indices.push(j + 1, (j + 1) % cols + 1, 0);
        }
        // interior
        for (let i = 1; i < rows; ++i) {
            const theta = dtheta * (i + 1);
            const prevRowOffset = (i - 1) * cols + 1;
            const rowOffset = prevRowOffset + cols;
            for (let j = 0; j < cols; ++j) {
                const phi = dphi * j;
                const position = new geo.Vec3(Math.sin(theta) * Math.cos(phi), Math.cos(theta), Math.sin(theta) * Math.sin(phi));
                vertices.push(new Vertex({ position: position, normal: position, color: new geo.Vec4(1, 1, 1, 1) }));
                const a = prevRowOffset + j;
                const b = rowOffset + j;
                const c = rowOffset + (j + 1) % cols;
                const d = prevRowOffset + (j + 1) % cols;
                indices.push(a, b, c, a, c, d);
            }
        }
        // create south pole
        const southPole = new Vertex({ position: new geo.Vec3(0, -1, 0), normal: new geo.Vec3(0, -1, 0), color: new geo.Vec4(1, 1, 1, 1) });
        vertices.push(southPole);
        const southPoleIdx = vertices.length - 1;
        // connect south pole to rest of mesh
        for (let j = 0; j < cols; ++j) {
            const offset = southPoleIdx - cols;
            // connect to pole to form triangle
            indices.push(offset + j, southPoleIdx, offset + (j + 1) % cols);
        }
        return new IxMesh({
            vertices,
            indices
        });
    }
    static rect(aabb) {
        // -x, +x, -y, +y, -z, +z
        const mesh = IxMesh.cube();
        const halfExtents = aabb.extents.divX(2);
        const negHalfExtents = halfExtents.neg();
        const translation = geo.Mat4.translation(aabb.min.sub(negHalfExtents));
        const scaling = geo.Mat4.scaling(halfExtents);
        const mat = scaling.matmul(translation);
        mesh.transform(mat);
        return mesh;
    }
    static rectFromCoords(minX, minY, minZ, maxX, maxY, maxZ) {
        return this.rect(geo.AABB.fromCoords(minX, minY, minZ, maxX, maxY, maxZ));
    }
}
function quadIndices(quads) {
    return array.generate(quads, i => [i * 4, i * 4 + 1, i * 4 + 2, i * 4, i * 4 + 2, i * 4 + 3]).flat();
}
export class Batch {
    constructor(options = {}) {
        var _a, _b, _c, _d, _e, _f;
        this.diffuseColor = new geo.Vec4(1, 1, 1, 1);
        this.roughness = 0;
        this.worldMatrix = (_a = options.worldMatrix) !== null && _a !== void 0 ? _a : geo.Mat4.identity();
        this.diffuseColor = (_b = options.diffuseColor) !== null && _b !== void 0 ? _b : new geo.Vec4(1, 1, 1, 1);
        this.roughness = (_c = options.roughness) !== null && _c !== void 0 ? _c : 0;
        this.vao = (_d = options.vao) !== null && _d !== void 0 ? _d : null;
        this.offset = (_e = options.offset) !== null && _e !== void 0 ? _e : 0;
        this.numIndices = (_f = options.numIndices) !== null && _f !== void 0 ? _f : 0;
    }
}
const elemsPerVertex = 10;
const vertexStride = elemsPerVertex * 4;
export class Renderer {
    constructor(canvas) {
        this.canvas = canvas;
        this.fov = Math.PI / 2;
        this.projectionMatrix = geo.Mat4.identity();
        this.viewMatrix = geo.Mat4.identity();
        this.batches = [];
        this.gl = glu.createContext(this.canvas);
        const gl = this.gl;
        this.program = glu.compileProgram(gl, vertexSrc, fragmentSrc);
        this.worldMatrixLoc = glu.getUniformLocation(gl, this.program, "world_matrix");
        this.viewMatrixLoc = glu.getUniformLocation(gl, this.program, "view_matrix");
        this.projectionMatrixLoc = glu.getUniformLocation(gl, this.program, "projection_matrix");
        this.projectionMatrixLoc = glu.getUniformLocation(gl, this.program, "projection_matrix");
        this.diffuseColorLoc = glu.getUniformLocation(gl, this.program, "diffuse_color");
        this.eyePositionLoc = glu.getUniformLocation(gl, this.program, "eye_position");
        this.roughnessLoc = glu.getUniformLocation(gl, this.program, "roughness");
    }
    get aspect() {
        return this.gl.drawingBufferWidth / this.gl.drawingBufferHeight;
    }
    present() {
        const gl = this.gl;
        this.projectionMatrix = geo.Mat4.perspective(this.fov, this.aspect, 1, 512);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
        gl.clearColor(0, 0, 0, 1);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        gl.enable(gl.DEPTH_TEST);
        this.renderBatches();
    }
    createMesh(mesh) {
        // for now - place single triangle into vertex buffer
        const gl = this.gl;
        const vbo = glu.createBuffer(gl);
        const ibo = glu.createBuffer(gl);
        gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
        gl.bufferData(gl.ARRAY_BUFFER, toFloatArray(mesh.vertices), gl.STATIC_DRAW);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibo);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint32Array(mesh.indices), gl.STATIC_DRAW);
        return this.createVao(vbo, ibo);
    }
    drawBatch(batch) {
        this.batches.push(batch);
    }
    createVao(vbo, ibo) {
        const { gl, program } = this;
        const vao = glu.createVertexArray(gl);
        gl.bindVertexArray(vao);
        const positionAttribIdx = glu.getAttribLocation(gl, program, "vert_position");
        const normalAttribIdx = glu.getAttribLocation(gl, program, "vert_normal");
        const colorAttribIdx = glu.getAttribLocation(gl, program, "vert_color");
        gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
        gl.enableVertexAttribArray(positionAttribIdx);
        gl.enableVertexAttribArray(normalAttribIdx);
        gl.enableVertexAttribArray(colorAttribIdx);
        gl.vertexAttribPointer(positionAttribIdx, 3, gl.FLOAT, false, vertexStride, 0);
        gl.vertexAttribPointer(normalAttribIdx, 3, gl.FLOAT, false, vertexStride, 12);
        gl.vertexAttribPointer(colorAttribIdx, 4, gl.FLOAT, false, vertexStride, 24);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibo);
        gl.bindVertexArray(null);
        return vao;
    }
    renderBatches() {
        const gl = this.gl;
        gl.useProgram(this.program);
        gl.uniformMatrix4fv(this.projectionMatrixLoc, false, this.projectionMatrix.toArray());
        gl.uniformMatrix4fv(this.viewMatrixLoc, false, this.viewMatrix.toArray());
        // determine eye position and set uniform
        {
            const invViewMatrix = this.viewMatrix.invert();
            const eyePosition = invViewMatrix.transform3(new geo.Vec3(0, 0, 0));
            gl.uniform3fv(this.eyePositionLoc, eyePosition.toArray());
        }
        for (const batch of this.batches) {
            if (!batch.vao) {
                continue;
            }
            if (batch.numIndices <= 0) {
                continue;
            }
            gl.uniformMatrix4fv(this.worldMatrixLoc, false, batch.worldMatrix.toArray());
            gl.uniform4fv(this.diffuseColorLoc, batch.diffuseColor.toArray());
            gl.uniform1f(this.roughnessLoc, batch.roughness);
            gl.bindVertexArray(batch.vao);
            gl.drawElements(gl.TRIANGLES, batch.numIndices, gl.UNSIGNED_INT, batch.offset);
        }
        this.batches = [];
    }
}
function toFloatArray(vertices) {
    const a = new Float32Array(vertices.flatMap(v => [
        v.position.x, v.position.y, v.position.z,
        v.normal.x, v.normal.y, v.normal.z,
        v.color.x, v.color.y, v.color.z, v.color.w
    ]));
    return a;
}
export function transform(mat, vertices) {
    const basis = mat.toMat3();
    for (const v of vertices) {
        v.position = mat.transform3(v.position);
        v.normal = basis.transform(v.normal);
    }
}
export function calcAABB(vertices) {
    const aabb = geo.AABB.fromPoints(iter.map(vertices, v => v.position));
    return aabb;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2Z4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ2Z4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxHQUFHLE1BQU0sa0JBQWtCLENBQUE7QUFDdkMsT0FBTyxLQUFLLEdBQUcsTUFBTSxvQkFBb0IsQ0FBQTtBQUN6QyxPQUFPLEtBQUssS0FBSyxNQUFNLG9CQUFvQixDQUFBO0FBQzNDLE9BQU8sS0FBSyxJQUFJLE1BQU0sbUJBQW1CLENBQUE7QUFFekMsTUFBTSxTQUFTLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBb0JoQixDQUFBO0FBRUYsTUFBTSxXQUFXLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXdCbEIsQ0FBQTtBQVFGLE1BQU0sT0FBTyxNQUFNO0lBS2YsWUFBWSxVQUF5QixFQUFFOztRQUNuQyxJQUFJLENBQUMsUUFBUSxlQUFHLE9BQU8sQ0FBQyxRQUFRLDBDQUFFLEtBQUsscUNBQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDbEUsSUFBSSxDQUFDLE1BQU0sZUFBRyxPQUFPLENBQUMsTUFBTSwwQ0FBRSxLQUFLLHFDQUFNLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQzlELElBQUksQ0FBQyxLQUFLLGVBQUcsT0FBTyxDQUFDLEtBQUssMENBQUUsS0FBSyxxQ0FBTSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDbkUsQ0FBQztJQUVELEtBQUs7UUFDRCxPQUFPLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzNCLENBQUM7Q0FDSjtBQU9ELE1BQU0sT0FBTyxNQUFNO0lBSWYsWUFBWSxVQUF5QixFQUFFO1FBSGhDLGFBQVEsR0FBYSxFQUFFLENBQUE7UUFDdkIsWUFBTyxHQUFhLEVBQUUsQ0FBQTtRQUd6QixJQUFJLE9BQU8sQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUE7U0FDMUM7UUFFRCxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7WUFDakIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUE7U0FDeEM7SUFDTCxDQUFDO0lBRUQsS0FBSztRQUNELElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFBO1FBQ2xCLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFBO0lBQ3JCLENBQUM7SUFFRCxTQUFTLENBQUMsR0FBYTtRQUNuQixTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNqQyxDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQVc7UUFDWCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQTtRQUNuQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUN2RCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUE7SUFDNUQsQ0FBQztJQUVELFFBQVE7UUFDSixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDbEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJO1FBQ1AseUJBQXlCO1FBQ3pCLE1BQU0sUUFBUSxHQUFHLElBQUksS0FBSztRQUN0QixLQUFLO1FBQ0wsSUFBSSxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNsRixJQUFJLE1BQU0sQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNqRixJQUFJLE1BQU0sQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFDakYsSUFBSSxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDakYsS0FBSztRQUNMLElBQUksTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDL0UsSUFBSSxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ2hGLElBQUksTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDL0UsSUFBSSxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDOUUsS0FBSztRQUNMLElBQUksTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ2pGLElBQUksTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDbEYsSUFBSSxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDakYsSUFBSSxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ2hGLEtBQUs7UUFDTCxJQUFJLE1BQU0sQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQy9FLElBQUksTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQzlFLElBQUksTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDL0UsSUFBSSxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ2hGLEtBQUs7UUFDTCxJQUFJLE1BQU0sQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ2xGLElBQUksTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ2pGLElBQUksTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNoRixJQUFJLE1BQU0sQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNqRixLQUFLO1FBQ0wsSUFBSSxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ2hGLElBQUksTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDL0UsSUFBSSxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDOUUsSUFBSSxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUNsRixDQUFBO1FBRUQsT0FBTyxJQUFJLE1BQU0sQ0FBQztZQUNkLFFBQVE7WUFDUixPQUFPLEVBQUUsV0FBVyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1NBQzVDLENBQUMsQ0FBQTtJQUNOLENBQUM7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O0tBQUMsQ0FBQyxDQUFDLENBQUE7SUFFakQsT0FBTyxDQUFDLENBQUE7QUFDWixDQUFDO0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FBQyxHQUFhLEVBQUUsUUFBa0I7SUFDdkQsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFBO0lBQzFCLEtBQUssTUFBTSxDQUFDLElBQUksUUFBUSxFQUFFO1FBQ3RCLENBQUMsQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDdkMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtLQUN2QztBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLFFBQTBCO0lBQy9DLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7SUFDckUsT0FBTyxJQUFJLENBQUE7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZ2x1IGZyb20gXCIuLi9zaGFyZWQvZ2x1LmpzXCJcclxuaW1wb3J0ICogYXMgZ2VvIGZyb20gXCIuLi9zaGFyZWQvZ2VvM2QuanNcIlxyXG5pbXBvcnQgKiBhcyBhcnJheSBmcm9tIFwiLi4vc2hhcmVkL2FycmF5LmpzXCJcclxuaW1wb3J0ICogYXMgaXRlciBmcm9tIFwiLi4vc2hhcmVkL2l0ZXIuanNcIlxyXG5cclxuY29uc3QgdmVydGV4U3JjID0gYCN2ZXJzaW9uIDMwMCBlc1xyXG5wcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcclxudW5pZm9ybSBtYXQ0IHdvcmxkX21hdHJpeDtcclxudW5pZm9ybSBtYXQ0IHZpZXdfbWF0cml4O1xyXG51bmlmb3JtIG1hdDQgcHJvamVjdGlvbl9tYXRyaXg7XHJcbnVuaWZvcm0gdmVjNCBkaWZmdXNlX2NvbG9yO1xyXG5cclxuaW4gdmVjMyB2ZXJ0X3Bvc2l0aW9uO1xyXG5pbiB2ZWMzIHZlcnRfbm9ybWFsO1xyXG5pbiB2ZWM0IHZlcnRfY29sb3I7XHJcbm91dCB2ZWMzIGZyYWdfbm9ybWFsO1xyXG5vdXQgdmVjMyBmcmFnX3Bvc2l0aW9uO1xyXG5vdXQgdmVjNCBmcmFnX2NvbG9yO1xyXG5cclxudm9pZCBtYWluKCkge1xyXG4gICAgZnJhZ19jb2xvciA9IHZlcnRfY29sb3IgKiBkaWZmdXNlX2NvbG9yO1xyXG4gICAgZnJhZ19ub3JtYWwgPSBtYXQzKHdvcmxkX21hdHJpeCkgKiB2ZXJ0X25vcm1hbDtcclxuICAgIHZlYzQgcG9zaXRpb25fd29ybGQgPSB3b3JsZF9tYXRyaXggKiB2ZWM0KHZlcnRfcG9zaXRpb24sIDEuZik7XHJcbiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25fbWF0cml4ICogdmlld19tYXRyaXggKiBwb3NpdGlvbl93b3JsZDtcclxuICAgIGZyYWdfcG9zaXRpb24gPSBwb3NpdGlvbl93b3JsZC54eXogLyBwb3NpdGlvbl93b3JsZC53O1xyXG59YFxyXG5cclxuY29uc3QgZnJhZ21lbnRTcmMgPSBgI3ZlcnNpb24gMzAwIGVzXHJcbnByZWNpc2lvbiBoaWdocCBmbG9hdDtcclxucHJlY2lzaW9uIGhpZ2hwIHNhbXBsZXIyRDtcclxucHJlY2lzaW9uIGhpZ2hwIHNhbXBsZXIyREFycmF5O1xyXG5cclxudW5pZm9ybSB2ZWMzIGV5ZV9wb3NpdGlvbjtcclxudW5pZm9ybSBmbG9hdCByb3VnaG5lc3M7XHJcbmluIHZlYzQgZnJhZ19jb2xvcjtcclxuaW4gdmVjMyBmcmFnX3Bvc2l0aW9uO1xyXG5pbiB2ZWMzIGZyYWdfbm9ybWFsO1xyXG5vdXQgdmVjNCBvdXRfY29sb3I7XHJcblxyXG52b2lkIG1haW4oKSB7XHJcbiAgICBmbG9hdCBzcGVjdWxhcl9pbnRlbnNpdHkgPSAxLmYgLSByb3VnaG5lc3M7XHJcbiAgICBmbG9hdCBzcGVjdWxhcl9wb3cgPSBtaXgoLjFmLCAzMi5mLCBzcGVjdWxhcl9pbnRlbnNpdHkpO1xyXG4gICAgdmVjMyBzdXJmYWNlX25vcm1hbCA9IG5vcm1hbGl6ZShmcmFnX25vcm1hbCk7XHJcbiAgICB2ZWMzIHRvX2xpZ2h0ID0gbm9ybWFsaXplKHZlYzMoLTEsIDAsIDEpKTtcclxuICAgIHZlYzMgaGFsZl92ZWMgPSBub3JtYWxpemUobm9ybWFsaXplKGV5ZV9wb3NpdGlvbiAtIGZyYWdfcG9zaXRpb24pICsgdG9fbGlnaHQpO1xyXG4gICAgZmxvYXQgbmRsID0gY2xhbXAoZG90KHRvX2xpZ2h0LCBzdXJmYWNlX25vcm1hbCksIDAuZiwgMS5mKTtcclxuICAgIGZsb2F0IG5kaCA9IHBvdyhjbGFtcChkb3QoaGFsZl92ZWMsIHN1cmZhY2Vfbm9ybWFsKSwgMC4wLCAxLmYpLCBzcGVjdWxhcl9wb3cpO1xyXG5cclxuICAgIHZlYzMgZGlyZWN0aW9uYWwgPSBmcmFnX2NvbG9yLnJnYiAqIG5kbDtcclxuICAgIHZlYzMgc3BlY3VsYXIgPSB2ZWMzKDEsIDEsIDEpICogbmRoICogc3BlY3VsYXJfaW50ZW5zaXR5O1xyXG4gICAgb3V0X2NvbG9yID0gdmVjNChkaXJlY3Rpb25hbCArIHNwZWN1bGFyLCBmcmFnX2NvbG9yLmEpO1xyXG59YFxyXG5cclxuaW50ZXJmYWNlIFZlcnRleE9wdGlvbnMge1xyXG4gICAgcG9zaXRpb24/OiBnZW8uVmVjM1xyXG4gICAgbm9ybWFsPzogZ2VvLlZlYzNcclxuICAgIGNvbG9yPzogZ2VvLlZlYzRcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFZlcnRleCB7XHJcbiAgICBwb3NpdGlvbjogZ2VvLlZlYzNcclxuICAgIG5vcm1hbDogZ2VvLlZlYzNcclxuICAgIGNvbG9yOiBnZW8uVmVjNFxyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IFZlcnRleE9wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBvcHRpb25zLnBvc2l0aW9uPy5jbG9uZSgpID8/IG5ldyBnZW8uVmVjMygwLCAwLCAwKVxyXG4gICAgICAgIHRoaXMubm9ybWFsID0gb3B0aW9ucy5ub3JtYWw/LmNsb25lKCkgPz8gbmV3IGdlby5WZWMzKDAsIDAsIDApXHJcbiAgICAgICAgdGhpcy5jb2xvciA9IG9wdGlvbnMuY29sb3I/LmNsb25lKCkgPz8gbmV3IGdlby5WZWM0KDEsIDEsIDEsIDEpXHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogVmVydGV4IHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlcnRleCh0aGlzKVxyXG4gICAgfVxyXG59XHJcblxyXG5pbnRlcmZhY2UgSXhNZXNoT3B0aW9ucyB7XHJcbiAgICB2ZXJ0aWNlcz86IFZlcnRleFtdXHJcbiAgICBpbmRpY2VzPzogbnVtYmVyW11cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEl4TWVzaCB7XHJcbiAgICBwdWJsaWMgdmVydGljZXM6IFZlcnRleFtdID0gW11cclxuICAgIHB1YmxpYyBpbmRpY2VzOiBudW1iZXJbXSA9IFtdXHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogSXhNZXNoT3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMudmVydGljZXMpIHtcclxuICAgICAgICAgICAgdGhpcy52ZXJ0aWNlcy5wdXNoKC4uLm9wdGlvbnMudmVydGljZXMpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5pbmRpY2VzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5kaWNlcy5wdXNoKC4uLm9wdGlvbnMuaW5kaWNlcylcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXIoKSB7XHJcbiAgICAgICAgdGhpcy52ZXJ0aWNlcyA9IFtdXHJcbiAgICAgICAgdGhpcy5pbmRpY2VzID0gW11cclxuICAgIH1cclxuXHJcbiAgICB0cmFuc2Zvcm0obWF0OiBnZW8uTWF0NCkge1xyXG4gICAgICAgIHRyYW5zZm9ybShtYXQsIHRoaXMudmVydGljZXMpXHJcbiAgICB9XHJcblxyXG4gICAgY2F0KGl4bTogSXhNZXNoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGhcclxuICAgICAgICB0aGlzLnZlcnRpY2VzLnB1c2goLi4uaXhtLnZlcnRpY2VzLm1hcCh2ID0+IHYuY2xvbmUoKSkpXHJcbiAgICAgICAgdGhpcy5pbmRpY2VzLnB1c2goLi4uaXhtLmluZGljZXMubWFwKGl4ID0+IGl4ICsgb2Zmc2V0KSlcclxuICAgIH1cclxuXHJcbiAgICBjYWxjQUFCQigpOiBnZW8uQUFCQiB7XHJcbiAgICAgICAgcmV0dXJuIGNhbGNBQUJCKHRoaXMudmVydGljZXMpXHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGN1YmUoKTogSXhNZXNoIHtcclxuICAgICAgICAvLyAteCwgK3gsIC15LCAreSwgLXosICt6XHJcbiAgICAgICAgY29uc3QgdmVydGljZXMgPSBuZXcgQXJyYXk8VmVydGV4PihcclxuICAgICAgICAgICAgLy8gLXhcclxuICAgICAgICAgICAgbmV3IFZlcnRleCh7IHBvc2l0aW9uOiBuZXcgZ2VvLlZlYzMoLTEsIC0xLCAtMSksIG5vcm1hbDogbmV3IGdlby5WZWMzKC0xLCAwLCAwKSB9KSxcclxuICAgICAgICAgICAgbmV3IFZlcnRleCh7IHBvc2l0aW9uOiBuZXcgZ2VvLlZlYzMoLTEsIC0xLCAxKSwgbm9ybWFsOiBuZXcgZ2VvLlZlYzMoLTEsIDAsIDApIH0pLFxyXG4gICAgICAgICAgICBuZXcgVmVydGV4KHsgcG9zaXRpb246IG5ldyBnZW8uVmVjMygtMSwgMSwgMSksIG5vcm1hbDogbmV3IGdlby5WZWMzKC0xLCAwLCAwKSwgfSksXHJcbiAgICAgICAgICAgIG5ldyBWZXJ0ZXgoeyBwb3NpdGlvbjogbmV3IGdlby5WZWMzKC0xLCAxLCAtMSksIG5vcm1hbDogbmV3IGdlby5WZWMzKC0xLCAwLCAwKSB9KSxcclxuICAgICAgICAgICAgLy8gK3hcclxuICAgICAgICAgICAgbmV3IFZlcnRleCh7IHBvc2l0aW9uOiBuZXcgZ2VvLlZlYzMoMSwgLTEsIDEpLCBub3JtYWw6IG5ldyBnZW8uVmVjMygxLCAwLCAwKSB9KSxcclxuICAgICAgICAgICAgbmV3IFZlcnRleCh7IHBvc2l0aW9uOiBuZXcgZ2VvLlZlYzMoMSwgLTEsIC0xKSwgbm9ybWFsOiBuZXcgZ2VvLlZlYzMoMSwgMCwgMCkgfSksXHJcbiAgICAgICAgICAgIG5ldyBWZXJ0ZXgoeyBwb3NpdGlvbjogbmV3IGdlby5WZWMzKDEsIDEsIC0xKSwgbm9ybWFsOiBuZXcgZ2VvLlZlYzMoMSwgMCwgMCkgfSksXHJcbiAgICAgICAgICAgIG5ldyBWZXJ0ZXgoeyBwb3NpdGlvbjogbmV3IGdlby5WZWMzKDEsIDEsIDEpLCBub3JtYWw6IG5ldyBnZW8uVmVjMygxLCAwLCAwKSB9KSxcclxuICAgICAgICAgICAgLy8gLXlcclxuICAgICAgICAgICAgbmV3IFZlcnRleCh7IHBvc2l0aW9uOiBuZXcgZ2VvLlZlYzMoLTEsIC0xLCAxKSwgbm9ybWFsOiBuZXcgZ2VvLlZlYzMoMCwgLTEsIDApIH0pLFxyXG4gICAgICAgICAgICBuZXcgVmVydGV4KHsgcG9zaXRpb246IG5ldyBnZW8uVmVjMygtMSwgLTEsIC0xKSwgbm9ybWFsOiBuZXcgZ2VvLlZlYzMoMCwgLTEsIDApIH0pLFxyXG4gICAgICAgICAgICBuZXcgVmVydGV4KHsgcG9zaXRpb246IG5ldyBnZW8uVmVjMygxLCAtMSwgLTEpLCBub3JtYWw6IG5ldyBnZW8uVmVjMygwLCAtMSwgMCkgfSksXHJcbiAgICAgICAgICAgIG5ldyBWZXJ0ZXgoeyBwb3NpdGlvbjogbmV3IGdlby5WZWMzKDEsIC0xLCAxKSwgbm9ybWFsOiBuZXcgZ2VvLlZlYzMoMCwgLTEsIDApIH0pLFxyXG4gICAgICAgICAgICAvLyAreVxyXG4gICAgICAgICAgICBuZXcgVmVydGV4KHsgcG9zaXRpb246IG5ldyBnZW8uVmVjMygtMSwgMSwgMSksIG5vcm1hbDogbmV3IGdlby5WZWMzKDAsIDEsIDApIH0pLFxyXG4gICAgICAgICAgICBuZXcgVmVydGV4KHsgcG9zaXRpb246IG5ldyBnZW8uVmVjMygxLCAxLCAxKSwgbm9ybWFsOiBuZXcgZ2VvLlZlYzMoMCwgMSwgMCkgfSksXHJcbiAgICAgICAgICAgIG5ldyBWZXJ0ZXgoeyBwb3NpdGlvbjogbmV3IGdlby5WZWMzKDEsIDEsIC0xKSwgbm9ybWFsOiBuZXcgZ2VvLlZlYzMoMCwgMSwgMCkgfSksXHJcbiAgICAgICAgICAgIG5ldyBWZXJ0ZXgoeyBwb3NpdGlvbjogbmV3IGdlby5WZWMzKC0xLCAxLCAtMSksIG5vcm1hbDogbmV3IGdlby5WZWMzKDAsIDEsIDApIH0pLFxyXG4gICAgICAgICAgICAvLyAtelxyXG4gICAgICAgICAgICBuZXcgVmVydGV4KHsgcG9zaXRpb246IG5ldyBnZW8uVmVjMygtMSwgLTEsIC0xKSwgbm9ybWFsOiBuZXcgZ2VvLlZlYzMoMCwgMCwgLTEpIH0pLFxyXG4gICAgICAgICAgICBuZXcgVmVydGV4KHsgcG9zaXRpb246IG5ldyBnZW8uVmVjMygtMSwgMSwgLTEpLCBub3JtYWw6IG5ldyBnZW8uVmVjMygwLCAwLCAtMSkgfSksXHJcbiAgICAgICAgICAgIG5ldyBWZXJ0ZXgoeyBwb3NpdGlvbjogbmV3IGdlby5WZWMzKDEsIDEsIC0xKSwgbm9ybWFsOiBuZXcgZ2VvLlZlYzMoMCwgMCwgLTEpIH0pLFxyXG4gICAgICAgICAgICBuZXcgVmVydGV4KHsgcG9zaXRpb246IG5ldyBnZW8uVmVjMygxLCAtMSwgLTEpLCBub3JtYWw6IG5ldyBnZW8uVmVjMygwLCAwLCAtMSkgfSksXHJcbiAgICAgICAgICAgIC8vICt6XHJcbiAgICAgICAgICAgIG5ldyBWZXJ0ZXgoeyBwb3NpdGlvbjogbmV3IGdlby5WZWMzKC0xLCAtMSwgMSksIG5vcm1hbDogbmV3IGdlby5WZWMzKDAsIDAsIDEpIH0pLFxyXG4gICAgICAgICAgICBuZXcgVmVydGV4KHsgcG9zaXRpb246IG5ldyBnZW8uVmVjMygxLCAtMSwgMSksIG5vcm1hbDogbmV3IGdlby5WZWMzKDAsIDAsIDEpIH0pLFxyXG4gICAgICAgICAgICBuZXcgVmVydGV4KHsgcG9zaXRpb246IG5ldyBnZW8uVmVjMygxLCAxLCAxKSwgbm9ybWFsOiBuZXcgZ2VvLlZlYzMoMCwgMCwgMSkgfSksXHJcbiAgICAgICAgICAgIG5ldyBWZXJ0ZXgoeyBwb3NpdGlvbjogbmV3IGdlby5WZWMzKC0xLCAxLCAxKSwgbm9ybWFsOiBuZXcgZ2VvLlZlYzMoMCwgMCwgMSkgfSlcclxuICAgICAgICApXHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgSXhNZXNoKHtcclxuICAgICAgICAgICAgdmVydGljZXMsXHJcbiAgICAgICAgICAgIGluZGljZXM6IHF1YWRJbmRpY2VzKHZlcnRpY2VzLmxlbmd0aCAvIDQpXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgc3BoZXJlKHJvd3M6IG51bWJlciwgY29sczogbnVtYmVyKTogSXhNZXNoIHtcclxuICAgICAgICAvLyBjcmVhdGUgbm9ydGggcG9sZVxyXG4gICAgICAgIGNvbnN0IHZlcnRpY2VzID0gbmV3IEFycmF5PFZlcnRleD4oKVxyXG4gICAgICAgIGNvbnN0IGluZGljZXMgPSBuZXcgQXJyYXk8bnVtYmVyPigpXHJcbiAgICAgICAgY29uc3Qgbm9ydGhQb2xlID0gbmV3IFZlcnRleCh7IHBvc2l0aW9uOiBuZXcgZ2VvLlZlYzMoMCwgMSwgMCksIG5vcm1hbDogbmV3IGdlby5WZWMzKDAsIDEsIDApLCBjb2xvcjogbmV3IGdlby5WZWM0KDEsIDEsIDEsIDEpIH0pXHJcbiAgICAgICAgdmVydGljZXMucHVzaChub3J0aFBvbGUpXHJcblxyXG4gICAgICAgIC8vIGl0ZXJhdGUgb3ZlciBhbmdsZXMsIGVzc2VudGlhbGx5IGZvcm1pbmcgcG9sYXIgY29vcmRpbmF0ZXMgb2YgZWFjaCBwb2ludFxyXG4gICAgICAgIC8vIGxldCB0aGV0YSA9IGVsZXZhdGlvbiBhbmdsZSBhYm92ZSB4eSBwbGFuZVxyXG4gICAgICAgIC8vIGxldCBwaGkgPSB4eSBwbGFuZSBhbmdsZVxyXG4gICAgICAgIGNvbnN0IGR0aGV0YSA9IE1hdGguUEkgLyAocm93cyArIDEpXHJcbiAgICAgICAgY29uc3QgZHBoaSA9IDIgKiBNYXRoLlBJIC8gY29sc1xyXG5cclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbHM7ICsraikge1xyXG4gICAgICAgICAgICBjb25zdCBwaGkgPSBkcGhpICogalxyXG4gICAgICAgICAgICBjb25zdCB0aGV0YSA9IGR0aGV0YVxyXG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IG5ldyBnZW8uVmVjMyhcclxuICAgICAgICAgICAgICAgIE1hdGguc2luKHRoZXRhKSAqIE1hdGguY29zKHBoaSksXHJcbiAgICAgICAgICAgICAgICBNYXRoLmNvcyh0aGV0YSksXHJcbiAgICAgICAgICAgICAgICBNYXRoLnNpbih0aGV0YSkgKiBNYXRoLnNpbihwaGkpXHJcbiAgICAgICAgICAgIClcclxuXHJcbiAgICAgICAgICAgIHZlcnRpY2VzLnB1c2gobmV3IFZlcnRleCh7IHBvc2l0aW9uOiBwb3NpdGlvbiwgbm9ybWFsOiBwb3NpdGlvbiwgY29sb3I6IG5ldyBnZW8uVmVjNCgxLCAxLCAxLCAxKSB9KSlcclxuXHJcbiAgICAgICAgICAgIC8vIGNvbm5lY3QgdG8gcG9sZSB0byBmb3JtIHRyaWFuZ2xlXHJcbiAgICAgICAgICAgIGluZGljZXMucHVzaChqICsgMSwgKGogKyAxKSAlIGNvbHMgKyAxLCAwKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaW50ZXJpb3JcclxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHJvd3M7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCB0aGV0YSA9IGR0aGV0YSAqIChpICsgMSlcclxuICAgICAgICAgICAgY29uc3QgcHJldlJvd09mZnNldCA9IChpIC0gMSkgKiBjb2xzICsgMVxyXG4gICAgICAgICAgICBjb25zdCByb3dPZmZzZXQgPSBwcmV2Um93T2Zmc2V0ICsgY29sc1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbHM7ICsraikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGhpID0gZHBoaSAqIGpcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gbmV3IGdlby5WZWMzKFxyXG4gICAgICAgICAgICAgICAgICAgIE1hdGguc2luKHRoZXRhKSAqIE1hdGguY29zKHBoaSksXHJcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5jb3ModGhldGEpLFxyXG4gICAgICAgICAgICAgICAgICAgIE1hdGguc2luKHRoZXRhKSAqIE1hdGguc2luKHBoaSlcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIHZlcnRpY2VzLnB1c2gobmV3IFZlcnRleCh7IHBvc2l0aW9uOiBwb3NpdGlvbiwgbm9ybWFsOiBwb3NpdGlvbiwgY29sb3I6IG5ldyBnZW8uVmVjNCgxLCAxLCAxLCAxKSB9KSlcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gcHJldlJvd09mZnNldCArIGpcclxuICAgICAgICAgICAgICAgIGNvbnN0IGIgPSByb3dPZmZzZXQgKyBqXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjID0gcm93T2Zmc2V0ICsgKGogKyAxKSAlIGNvbHNcclxuICAgICAgICAgICAgICAgIGNvbnN0IGQgPSBwcmV2Um93T2Zmc2V0ICsgKGogKyAxKSAlIGNvbHNcclxuICAgICAgICAgICAgICAgIGluZGljZXMucHVzaChhLCBiLCBjLCBhLCBjLCBkKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBjcmVhdGUgc291dGggcG9sZVxyXG4gICAgICAgIGNvbnN0IHNvdXRoUG9sZSA9IG5ldyBWZXJ0ZXgoeyBwb3NpdGlvbjogbmV3IGdlby5WZWMzKDAsIC0xLCAwKSwgbm9ybWFsOiBuZXcgZ2VvLlZlYzMoMCwgLTEsIDApLCBjb2xvcjogbmV3IGdlby5WZWM0KDEsIDEsIDEsIDEpIH0pXHJcbiAgICAgICAgdmVydGljZXMucHVzaChzb3V0aFBvbGUpXHJcbiAgICAgICAgY29uc3Qgc291dGhQb2xlSWR4ID0gdmVydGljZXMubGVuZ3RoIC0gMVxyXG5cclxuICAgICAgICAvLyBjb25uZWN0IHNvdXRoIHBvbGUgdG8gcmVzdCBvZiBtZXNoXHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2xzOyArK2opIHtcclxuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gc291dGhQb2xlSWR4IC0gY29sc1xyXG5cclxuICAgICAgICAgICAgLy8gY29ubmVjdCB0byBwb2xlIHRvIGZvcm0gdHJpYW5nbGVcclxuICAgICAgICAgICAgaW5kaWNlcy5wdXNoKG9mZnNldCArIGosIHNvdXRoUG9sZUlkeCwgb2Zmc2V0ICsgKGogKyAxKSAlIGNvbHMpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3IEl4TWVzaCh7XHJcbiAgICAgICAgICAgIHZlcnRpY2VzLFxyXG4gICAgICAgICAgICBpbmRpY2VzXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcmVjdChhYWJiOiBnZW8uQUFCQik6IEl4TWVzaCB7XHJcbiAgICAgICAgLy8gLXgsICt4LCAteSwgK3ksIC16LCArelxyXG4gICAgICAgIGNvbnN0IG1lc2ggPSBJeE1lc2guY3ViZSgpXHJcbiAgICAgICAgY29uc3QgaGFsZkV4dGVudHMgPSBhYWJiLmV4dGVudHMuZGl2WCgyKVxyXG4gICAgICAgIGNvbnN0IG5lZ0hhbGZFeHRlbnRzID0gaGFsZkV4dGVudHMubmVnKClcclxuICAgICAgICBjb25zdCB0cmFuc2xhdGlvbiA9IGdlby5NYXQ0LnRyYW5zbGF0aW9uKGFhYmIubWluLnN1YihuZWdIYWxmRXh0ZW50cykpXHJcbiAgICAgICAgY29uc3Qgc2NhbGluZyA9IGdlby5NYXQ0LnNjYWxpbmcoaGFsZkV4dGVudHMpXHJcbiAgICAgICAgY29uc3QgbWF0ID0gc2NhbGluZy5tYXRtdWwodHJhbnNsYXRpb24pXHJcbiAgICAgICAgbWVzaC50cmFuc2Zvcm0obWF0KVxyXG4gICAgICAgIHJldHVybiBtZXNoXHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHJlY3RGcm9tQ29vcmRzKG1pblg6IG51bWJlciwgbWluWTogbnVtYmVyLCBtaW5aOiBudW1iZXIsIG1heFg6IG51bWJlciwgbWF4WTogbnVtYmVyLCBtYXhaOiBudW1iZXIpOiBJeE1lc2gge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlY3QoZ2VvLkFBQkIuZnJvbUNvb3JkcyhtaW5YLCBtaW5ZLCBtaW5aLCBtYXhYLCBtYXhZLCBtYXhaKSlcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcXVhZEluZGljZXMocXVhZHM6IG51bWJlcik6IG51bWJlcltdIHtcclxuICAgIHJldHVybiBhcnJheS5nZW5lcmF0ZShxdWFkcywgaSA9PiBbaSAqIDQsIGkgKiA0ICsgMSwgaSAqIDQgKyAyLCBpICogNCwgaSAqIDQgKyAyLCBpICogNCArIDNdKS5mbGF0KClcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBNZXNoRGF0YSB7XHJcbiAgICB2ZXJ0aWNlczogVmVydGV4W11cclxuICAgIGluZGljZXM6IG51bWJlcltdXHJcbiAgICBpbmRleE9mZnNldDogbnVtYmVyXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQmF0Y2hPcHRpb25zIHtcclxuICAgIHdvcmxkTWF0cml4PzogZ2VvLk1hdDRcclxuICAgIGRpZmZ1c2VDb2xvcj86IGdlby5WZWM0XHJcbiAgICByb3VnaG5lc3M/OiBudW1iZXJcclxuICAgIHZhbz86IFdlYkdMVmVydGV4QXJyYXlPYmplY3RcclxuICAgIG9mZnNldD86IG51bWJlclxyXG4gICAgbnVtSW5kaWNlcz86IG51bWJlclxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQmF0Y2gge1xyXG4gICAgcHVibGljIHdvcmxkTWF0cml4OiBnZW8uTWF0NFxyXG4gICAgcHVibGljIGRpZmZ1c2VDb2xvcjogZ2VvLlZlYzQgPSBuZXcgZ2VvLlZlYzQoMSwgMSwgMSwgMSlcclxuICAgIHB1YmxpYyByb3VnaG5lc3M6IG51bWJlciA9IDBcclxuICAgIHB1YmxpYyB2YW86IFdlYkdMVmVydGV4QXJyYXlPYmplY3QgfCBudWxsXHJcbiAgICBwdWJsaWMgb2Zmc2V0OiBudW1iZXJcclxuICAgIHB1YmxpYyBudW1JbmRpY2VzOiBudW1iZXJcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBCYXRjaE9wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgIHRoaXMud29ybGRNYXRyaXggPSBvcHRpb25zLndvcmxkTWF0cml4ID8/IGdlby5NYXQ0LmlkZW50aXR5KClcclxuICAgICAgICB0aGlzLmRpZmZ1c2VDb2xvciA9IG9wdGlvbnMuZGlmZnVzZUNvbG9yID8/IG5ldyBnZW8uVmVjNCgxLCAxLCAxLCAxKVxyXG4gICAgICAgIHRoaXMucm91Z2huZXNzID0gb3B0aW9ucy5yb3VnaG5lc3MgPz8gMFxyXG4gICAgICAgIHRoaXMudmFvID0gb3B0aW9ucy52YW8gPz8gbnVsbFxyXG4gICAgICAgIHRoaXMub2Zmc2V0ID0gb3B0aW9ucy5vZmZzZXQgPz8gMFxyXG4gICAgICAgIHRoaXMubnVtSW5kaWNlcyA9IG9wdGlvbnMubnVtSW5kaWNlcyA/PyAwXHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IGVsZW1zUGVyVmVydGV4ID0gMTBcclxuY29uc3QgdmVydGV4U3RyaWRlID0gZWxlbXNQZXJWZXJ0ZXggKiA0XHJcblxyXG5leHBvcnQgY2xhc3MgUmVuZGVyZXIge1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBnbDogV2ViR0wyUmVuZGVyaW5nQ29udGV4dFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBwcm9ncmFtOiBXZWJHTFByb2dyYW1cclxuICAgIHB1YmxpYyByZWFkb25seSBmb3YgPSBNYXRoLlBJIC8gMlxyXG4gICAgcHJpdmF0ZSByZWFkb25seSB3b3JsZE1hdHJpeExvYzogV2ViR0xVbmlmb3JtTG9jYXRpb25cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgdmlld01hdHJpeExvYzogV2ViR0xVbmlmb3JtTG9jYXRpb25cclxuICAgIHB1YmxpYyByZWFkb25seSBwcm9qZWN0aW9uTWF0cml4TG9jOiBXZWJHTFVuaWZvcm1Mb2NhdGlvblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBkaWZmdXNlQ29sb3JMb2M6IFdlYkdMVW5pZm9ybUxvY2F0aW9uXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGV5ZVBvc2l0aW9uTG9jOiBXZWJHTFVuaWZvcm1Mb2NhdGlvblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSByb3VnaG5lc3NMb2M6IFdlYkdMVW5pZm9ybUxvY2F0aW9uXHJcbiAgICBwdWJsaWMgcHJvamVjdGlvbk1hdHJpeDogZ2VvLk1hdDQgPSBnZW8uTWF0NC5pZGVudGl0eSgpXHJcbiAgICBwdWJsaWMgdmlld01hdHJpeDogZ2VvLk1hdDQgPSBnZW8uTWF0NC5pZGVudGl0eSgpXHJcbiAgICBwcml2YXRlIGJhdGNoZXM6IEJhdGNoW10gPSBbXVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMuZ2wgPSBnbHUuY3JlYXRlQ29udGV4dCh0aGlzLmNhbnZhcylcclxuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2xcclxuICAgICAgICB0aGlzLnByb2dyYW0gPSBnbHUuY29tcGlsZVByb2dyYW0oZ2wsIHZlcnRleFNyYywgZnJhZ21lbnRTcmMpXHJcbiAgICAgICAgdGhpcy53b3JsZE1hdHJpeExvYyA9IGdsdS5nZXRVbmlmb3JtTG9jYXRpb24oZ2wsIHRoaXMucHJvZ3JhbSwgXCJ3b3JsZF9tYXRyaXhcIilcclxuICAgICAgICB0aGlzLnZpZXdNYXRyaXhMb2MgPSBnbHUuZ2V0VW5pZm9ybUxvY2F0aW9uKGdsLCB0aGlzLnByb2dyYW0sIFwidmlld19tYXRyaXhcIilcclxuICAgICAgICB0aGlzLnByb2plY3Rpb25NYXRyaXhMb2MgPSBnbHUuZ2V0VW5pZm9ybUxvY2F0aW9uKGdsLCB0aGlzLnByb2dyYW0sIFwicHJvamVjdGlvbl9tYXRyaXhcIilcclxuICAgICAgICB0aGlzLnByb2plY3Rpb25NYXRyaXhMb2MgPSBnbHUuZ2V0VW5pZm9ybUxvY2F0aW9uKGdsLCB0aGlzLnByb2dyYW0sIFwicHJvamVjdGlvbl9tYXRyaXhcIilcclxuICAgICAgICB0aGlzLmRpZmZ1c2VDb2xvckxvYyA9IGdsdS5nZXRVbmlmb3JtTG9jYXRpb24oZ2wsIHRoaXMucHJvZ3JhbSwgXCJkaWZmdXNlX2NvbG9yXCIpXHJcbiAgICAgICAgdGhpcy5leWVQb3NpdGlvbkxvYyA9IGdsdS5nZXRVbmlmb3JtTG9jYXRpb24oZ2wsIHRoaXMucHJvZ3JhbSwgXCJleWVfcG9zaXRpb25cIilcclxuICAgICAgICB0aGlzLnJvdWdobmVzc0xvYyA9IGdsdS5nZXRVbmlmb3JtTG9jYXRpb24oZ2wsIHRoaXMucHJvZ3JhbSwgXCJyb3VnaG5lc3NcIilcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGFzcGVjdCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdsLmRyYXdpbmdCdWZmZXJXaWR0aCAvIHRoaXMuZ2wuZHJhd2luZ0J1ZmZlckhlaWdodFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBwcmVzZW50KCkge1xyXG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbFxyXG5cclxuICAgICAgICB0aGlzLnByb2plY3Rpb25NYXRyaXggPSBnZW8uTWF0NC5wZXJzcGVjdGl2ZSh0aGlzLmZvdiwgdGhpcy5hc3BlY3QsIDEsIDUxMilcclxuXHJcbiAgICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBudWxsKVxyXG4gICAgICAgIGdsLnZpZXdwb3J0KDAsIDAsIGdsLmRyYXdpbmdCdWZmZXJXaWR0aCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodClcclxuICAgICAgICBnbC5jbGVhckNvbG9yKDAsIDAsIDAsIDEpXHJcbiAgICAgICAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCB8IGdsLkRFUFRIX0JVRkZFUl9CSVQpXHJcbiAgICAgICAgZ2wuZW5hYmxlKGdsLkRFUFRIX1RFU1QpXHJcbiAgICAgICAgdGhpcy5yZW5kZXJCYXRjaGVzKClcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY3JlYXRlTWVzaChtZXNoOiBJeE1lc2gpOiBXZWJHTFZlcnRleEFycmF5T2JqZWN0IHtcclxuICAgICAgICAvLyBmb3Igbm93IC0gcGxhY2Ugc2luZ2xlIHRyaWFuZ2xlIGludG8gdmVydGV4IGJ1ZmZlclxyXG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbFxyXG4gICAgICAgIGNvbnN0IHZibyA9IGdsdS5jcmVhdGVCdWZmZXIoZ2wpXHJcbiAgICAgICAgY29uc3QgaWJvID0gZ2x1LmNyZWF0ZUJ1ZmZlcihnbClcclxuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdmJvKVxyXG4gICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCB0b0Zsb2F0QXJyYXkobWVzaC52ZXJ0aWNlcyksIGdsLlNUQVRJQ19EUkFXKVxyXG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGlibylcclxuICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBuZXcgVWludDMyQXJyYXkobWVzaC5pbmRpY2VzKSwgZ2wuU1RBVElDX0RSQVcpXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlVmFvKHZibywgaWJvKVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkcmF3QmF0Y2goYmF0Y2g6IEJhdGNoKSB7XHJcbiAgICAgICAgdGhpcy5iYXRjaGVzLnB1c2goYmF0Y2gpXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjcmVhdGVWYW8odmJvOiBXZWJHTEJ1ZmZlciwgaWJvOiBXZWJHTEJ1ZmZlcik6IFdlYkdMVmVydGV4QXJyYXlPYmplY3Qge1xyXG4gICAgICAgIGNvbnN0IHsgZ2wsIHByb2dyYW0gfSA9IHRoaXNcclxuICAgICAgICBjb25zdCB2YW8gPSBnbHUuY3JlYXRlVmVydGV4QXJyYXkoZ2wpXHJcbiAgICAgICAgZ2wuYmluZFZlcnRleEFycmF5KHZhbylcclxuXHJcbiAgICAgICAgY29uc3QgcG9zaXRpb25BdHRyaWJJZHggPSBnbHUuZ2V0QXR0cmliTG9jYXRpb24oZ2wsIHByb2dyYW0sIFwidmVydF9wb3NpdGlvblwiKVxyXG4gICAgICAgIGNvbnN0IG5vcm1hbEF0dHJpYklkeCA9IGdsdS5nZXRBdHRyaWJMb2NhdGlvbihnbCwgcHJvZ3JhbSwgXCJ2ZXJ0X25vcm1hbFwiKVxyXG4gICAgICAgIGNvbnN0IGNvbG9yQXR0cmliSWR4ID0gZ2x1LmdldEF0dHJpYkxvY2F0aW9uKGdsLCBwcm9ncmFtLCBcInZlcnRfY29sb3JcIilcclxuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdmJvKVxyXG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHBvc2l0aW9uQXR0cmliSWR4KVxyXG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KG5vcm1hbEF0dHJpYklkeClcclxuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShjb2xvckF0dHJpYklkeClcclxuICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHBvc2l0aW9uQXR0cmliSWR4LCAzLCBnbC5GTE9BVCwgZmFsc2UsIHZlcnRleFN0cmlkZSwgMClcclxuICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKG5vcm1hbEF0dHJpYklkeCwgMywgZ2wuRkxPQVQsIGZhbHNlLCB2ZXJ0ZXhTdHJpZGUsIDEyKVxyXG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoY29sb3JBdHRyaWJJZHgsIDQsIGdsLkZMT0FULCBmYWxzZSwgdmVydGV4U3RyaWRlLCAyNClcclxuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBpYm8pXHJcblxyXG4gICAgICAgIGdsLmJpbmRWZXJ0ZXhBcnJheShudWxsKVxyXG4gICAgICAgIHJldHVybiB2YW9cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlbmRlckJhdGNoZXMoKSB7XHJcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmdsXHJcbiAgICAgICAgZ2wudXNlUHJvZ3JhbSh0aGlzLnByb2dyYW0pXHJcbiAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLnByb2plY3Rpb25NYXRyaXhMb2MsIGZhbHNlLCB0aGlzLnByb2plY3Rpb25NYXRyaXgudG9BcnJheSgpKVxyXG4gICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy52aWV3TWF0cml4TG9jLCBmYWxzZSwgdGhpcy52aWV3TWF0cml4LnRvQXJyYXkoKSlcclxuXHJcbiAgICAgICAgLy8gZGV0ZXJtaW5lIGV5ZSBwb3NpdGlvbiBhbmQgc2V0IHVuaWZvcm1cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IGludlZpZXdNYXRyaXggPSB0aGlzLnZpZXdNYXRyaXguaW52ZXJ0KClcclxuICAgICAgICAgICAgY29uc3QgZXllUG9zaXRpb24gPSBpbnZWaWV3TWF0cml4LnRyYW5zZm9ybTMobmV3IGdlby5WZWMzKDAsIDAsIDApKVxyXG4gICAgICAgICAgICBnbC51bmlmb3JtM2Z2KHRoaXMuZXllUG9zaXRpb25Mb2MsIGV5ZVBvc2l0aW9uLnRvQXJyYXkoKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgYmF0Y2ggb2YgdGhpcy5iYXRjaGVzKSB7XHJcbiAgICAgICAgICAgIGlmICghYmF0Y2gudmFvKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYmF0Y2gubnVtSW5kaWNlcyA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMud29ybGRNYXRyaXhMb2MsIGZhbHNlLCBiYXRjaC53b3JsZE1hdHJpeC50b0FycmF5KCkpXHJcbiAgICAgICAgICAgIGdsLnVuaWZvcm00ZnYodGhpcy5kaWZmdXNlQ29sb3JMb2MsIGJhdGNoLmRpZmZ1c2VDb2xvci50b0FycmF5KCkpXHJcbiAgICAgICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLnJvdWdobmVzc0xvYywgYmF0Y2gucm91Z2huZXNzKVxyXG4gICAgICAgICAgICBnbC5iaW5kVmVydGV4QXJyYXkoYmF0Y2gudmFvKVxyXG4gICAgICAgICAgICBnbC5kcmF3RWxlbWVudHMoZ2wuVFJJQU5HTEVTLCBiYXRjaC5udW1JbmRpY2VzLCBnbC5VTlNJR05FRF9JTlQsIGJhdGNoLm9mZnNldClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYmF0Y2hlcyA9IFtdXHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRvRmxvYXRBcnJheSh2ZXJ0aWNlczogVmVydGV4W10pOiBGbG9hdDMyQXJyYXkge1xyXG4gICAgY29uc3QgYSA9IG5ldyBGbG9hdDMyQXJyYXkodmVydGljZXMuZmxhdE1hcCh2ID0+IFtcclxuICAgICAgICB2LnBvc2l0aW9uLngsIHYucG9zaXRpb24ueSwgdi5wb3NpdGlvbi56LFxyXG4gICAgICAgIHYubm9ybWFsLngsIHYubm9ybWFsLnksIHYubm9ybWFsLnosXHJcbiAgICAgICAgdi5jb2xvci54LCB2LmNvbG9yLnksIHYuY29sb3Iueiwgdi5jb2xvci53XSkpXHJcblxyXG4gICAgcmV0dXJuIGFcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybShtYXQ6IGdlby5NYXQ0LCB2ZXJ0aWNlczogVmVydGV4W10pIHtcclxuICAgIGNvbnN0IGJhc2lzID0gbWF0LnRvTWF0MygpXHJcbiAgICBmb3IgKGNvbnN0IHYgb2YgdmVydGljZXMpIHtcclxuICAgICAgICB2LnBvc2l0aW9uID0gbWF0LnRyYW5zZm9ybTModi5wb3NpdGlvbilcclxuICAgICAgICB2Lm5vcm1hbCA9IGJhc2lzLnRyYW5zZm9ybSh2Lm5vcm1hbClcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGNBQUJCKHZlcnRpY2VzOiBJdGVyYWJsZTxWZXJ0ZXg+KTogZ2VvLkFBQkIge1xyXG4gICAgY29uc3QgYWFiYiA9IGdlby5BQUJCLmZyb21Qb2ludHMoaXRlci5tYXAodmVydGljZXMsIHYgPT4gdi5wb3NpdGlvbikpXHJcbiAgICByZXR1cm4gYWFiYlxyXG59Il19