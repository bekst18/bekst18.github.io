import * as dom from "../shared/dom.js";
import * as array from "../shared/array.js";
import * as gfx from "./gfx.js";
import * as gen from "./gen.js";
import * as grid from "../shared/grid.js";
const tileSize = 24;
async function generateMap(renderer, width, height) {
    const gmap = gen.generateMap(width, height);
    // bake all 24x24 tile images to a single texture
    // store mapping from image url to index
    const imageUrls = array.mapDistinct(gen.iterThings(gmap), th => th.image);
    const layerMap = new Map(imageUrls.map((url, i) => [url, i]));
    const images = await Promise.all(imageUrls.map(url => dom.loadImage(url)));
    const texture = renderer.bakeTextureArray(tileSize, tileSize, images);
    const map = new grid.Grid(gmap.width, gmap.height, (x, y) => {
        const gtile = gmap.at(x, y);
        const tile = {
            things: []
        };
        for (const gthing of gtile.things) {
            const layer = layerMap.get(gthing.image);
            if (typeof layer === "undefined") {
                throw new Error(`texture index not found for ${gthing.image}`);
            }
            const thing = {
                name: gthing.name,
                texture: texture,
                textureLayer: layer
            };
            tile.things.push(thing);
        }
        return tile;
    });
    return map;
}
const errorsDiv = dom.byId("errors");
function clearErrorMessages() {
    dom.removeAllChildren(errorsDiv);
}
function appendErrorMessage(error) {
    console.log(error);
    const div = document.createElement("div");
    div.classList.add("error-message");
    div.textContent = error;
    errorsDiv.appendChild(div);
}
function tick(renderer, map) {
    for (let ty = 0; ty < map.height; ++ty) {
        for (let tx = 0; tx < map.width; ++tx) {
            const tile = map.at(tx, ty);
            const x = tx * tileSize;
            const y = ty * tileSize;
            for (const thing of tile.things) {
                const sprite = {
                    position: [x, y],
                    color: [1, 1, 1, 1],
                    width: tileSize,
                    height: tileSize,
                    texture: thing.texture,
                    layer: thing.textureLayer
                };
                renderer.drawSprite(sprite);
            }
        }
    }
    renderer.flush();
}
async function main() {
    const canvas = dom.byId("canvas");
    const renderer = new gfx.Renderer(canvas);
    const map = await generateMap(renderer, 32, 32);
    requestAnimationFrame(() => tick(renderer, map));
}
main();
//# sourceMappingURL=data:application/json;base64,