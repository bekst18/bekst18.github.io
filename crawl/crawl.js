import * as dom from "../shared/dom.js";
import * as array from "../shared/array.js";
import * as gfx from "./gfx.js";
import * as gen from "./gen.js";
import * as input from "../shared/input.js";
import * as rl from "./rl.js";
import * as geo from "../shared/geo2d.js";
const tileSize = 24;
const moveSpeed = 2;
async function generateMap(player, renderer, width, height) {
    const map = gen.generateMap(width, height, player);
    // bake all 24x24 tile images to a single array texture
    // store mapping from image url to index
    let imageUrls = [];
    imageUrls.push(...map.tiles.map(t => t.image));
    imageUrls.push(...map.fixtures.map(t => t.image));
    if (map.stairsUp) {
        imageUrls.push(map.stairsUp.image);
    }
    if (map.stairsDown) {
        imageUrls.push(map.stairsDown.image);
    }
    imageUrls.push(...map.creatures.map(c => c.image));
    imageUrls.push(player.image);
    imageUrls = imageUrls.filter(url => url);
    imageUrls = array.distinct(imageUrls);
    const layerMap = new Map(imageUrls.map((url, i) => [url, i]));
    const images = await Promise.all(imageUrls.map(url => dom.loadImage(url)));
    const texture = renderer.bakeTextureArray(tileSize, tileSize, images);
    for (const th of map) {
        if (!th.image) {
            th.textureLayer = -1;
            th.texture = null;
            continue;
        }
        const layer = layerMap.get(th.image);
        if (layer === undefined) {
            throw new Error(`texture index not found for ${th.image}`);
        }
        th.texture = texture;
        th.textureLayer = layer;
    }
    return map;
}
const errorsDiv = dom.byId("errors");
function clearErrorMessages() {
    dom.removeAllChildren(errorsDiv);
}
function appendErrorMessage(error) {
    console.log(error);
    const div = document.createElement("div");
    div.classList.add("error-message");
    div.textContent = error;
    errorsDiv.appendChild(div);
}
function tick(renderer, inp, player, map) {
    handleInput(renderer.canvas, player, map, inp);
    drawFrame(renderer, player, map);
    requestAnimationFrame(() => tick(renderer, inp, player, map));
}
function handleInput(canvas, player, map, inp) {
    const position = player.position.clone();
    if (inp.mouseLeftHeld) {
        const center = new geo.Point(canvas.width / 2, canvas.height / 2);
        const mousePosition = new geo.Point(inp.mouseX, inp.mouseY);
        const dxy = mousePosition.subPoint(center);
        const sgn = dxy.sign();
        const abs = dxy.abs();
        if (abs.x > tileSize / 2 && abs.x >= abs.y) {
            position.x += sgn.x * moveSpeed;
        }
        if (abs.y > tileSize / 2 && abs.y > abs.x) {
            position.y += sgn.y * moveSpeed;
        }
    }
    else if (inp.held("w")) {
        position.y -= moveSpeed;
    }
    else if (inp.held("s")) {
        position.y += moveSpeed;
    }
    else if (inp.held("a")) {
        position.x -= moveSpeed;
    }
    else if (inp.held("d")) {
        position.x += moveSpeed;
    }
    if (isPassable(map, position)) {
        player.position = position;
    }
    inp.flush();
}
function isPassable(map, xy) {
    const tiles = array.filter(map.tiles, t => t.position.equal(xy));
    for (const tile of tiles) {
        if (!tile.passable) {
            return false;
        }
    }
    const fixtures = array.filter(map.fixtures, t => t.position.equal(xy));
    for (const fixture of fixtures) {
        if (!fixture.passable) {
            return false;
        }
    }
    return true;
}
function drawFrame(renderer, player, map) {
    // center the grid around the player
    handleResize(renderer.canvas);
    const playerCoords = player.position;
    const center = new geo.Point(Math.floor((renderer.canvas.width - tileSize) / 2), Math.floor((renderer.canvas.height - tileSize) / 2));
    const offset = center.subPoint(playerCoords);
    // note - drawing order matters - draw from bottom to top
    // draw various layers of sprites
    for (const tile of map.tiles) {
        drawThing(renderer, offset, tile);
    }
    for (const fixture of map.fixtures) {
        drawThing(renderer, offset, fixture);
    }
    if (map.stairsUp) {
        drawThing(renderer, offset, map.stairsUp);
    }
    if (map.stairsDown) {
        drawThing(renderer, offset, map.stairsDown);
    }
    for (const creature of map.creatures) {
        drawThing(renderer, offset, creature);
    }
    drawThing(renderer, offset, player);
    drawHealthBar(renderer, player, offset);
    renderer.flush(rl.lightRadius * tileSize);
}
function drawThing(renderer, offset, th) {
    const spritePosition = th.position.addPoint(offset);
    const sprite = new gfx.Sprite({
        position: spritePosition,
        color: th.color,
        width: tileSize,
        height: tileSize,
        texture: th.texture,
        layer: th.textureLayer,
        flags: gfx.SpriteFlags.Lit | gfx.SpriteFlags.ArrayTexture | gfx.SpriteFlags.CastsShadows
    });
    renderer.drawSprite(sprite);
}
function drawHealthBar(renderer, creature, offset) {
    const width = creature.maxHealth * 4 + 2;
    const spritePosition = creature.position.mulScalar(tileSize).addPoint(offset).subPoint(new geo.Point(0, tileSize / 2));
    renderer.drawSprite(new gfx.Sprite({
        position: spritePosition,
        color: gfx.Color.white,
        width: width,
        height: 8
    }));
    renderer.drawSprite(new gfx.Sprite({
        position: spritePosition.addPoint(new geo.Point(1, 1)),
        color: gfx.Color.red,
        width: width - 2,
        height: 6
    }));
}
function handleResize(canvas) {
    if (canvas.width === canvas.clientWidth && canvas.height === canvas.clientHeight) {
        return;
    }
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;
}
async function main() {
    const canvas = dom.byId("canvas");
    const renderer = new gfx.Renderer(canvas);
    const player = new rl.Player({
        name: "Player",
        position: new geo.Point(0, 0),
        image: "./assets/char.png",
        maxHealth: 6
    });
    const map = await generateMap(player, renderer, 32, 32);
    const inp = new input.Input(canvas);
    requestAnimationFrame(() => tick(renderer, inp, player, map));
}
main();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jhd2wuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjcmF3bC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssR0FBRyxNQUFNLGtCQUFrQixDQUFBO0FBQ3ZDLE9BQU8sS0FBSyxLQUFLLE1BQU0sb0JBQW9CLENBQUE7QUFDM0MsT0FBTyxLQUFLLEdBQUcsTUFBTSxVQUFVLENBQUE7QUFDL0IsT0FBTyxLQUFLLEdBQUcsTUFBTSxVQUFVLENBQUE7QUFDL0IsT0FBTyxLQUFLLEtBQUssTUFBTSxvQkFBb0IsQ0FBQTtBQUMzQyxPQUFPLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQTtBQUM3QixPQUFPLEtBQUssR0FBRyxNQUFNLG9CQUFvQixDQUFBO0FBRXpDLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQTtBQUNuQixNQUFNLFNBQVMsR0FBRyxDQUFDLENBQUE7QUFFbkIsS0FBSyxVQUFVLFdBQVcsQ0FBQyxNQUFpQixFQUFFLFFBQXNCLEVBQUUsS0FBYSxFQUFFLE1BQWM7SUFDL0YsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBRWxELHVEQUF1RDtJQUN2RCx3Q0FBd0M7SUFDeEMsSUFBSSxTQUFTLEdBQWEsRUFBRSxDQUFBO0lBQzVCLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBQzlDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBRWpELElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRTtRQUNkLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFB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RyxDQUFDLEVBQUU7UUFDcEIsUUFBUSxDQUFDLENBQUMsSUFBSSxTQUFTLENBQUE7S0FDMUI7U0FDSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDcEIsUUFBUSxDQUFDLENBQUMsSUFBSSxTQUFTLENBQUE7S0FDMUI7U0FDSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDcEIsUUFBUSxDQUFDLENBQUMsSUFBSSxTQUFTLENBQUE7S0FDMUI7U0FDSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDcEIsUUFBUSxDQUFDLENBQUMsSUFBSSxTQUFTLENBQUE7S0FDMUI7SUFFRCxJQUFJLFVBQVUsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLEVBQUU7UUFDM0IsTUFBTSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUE7S0FDN0I7SUFFRCxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUE7QUFDZixDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsR0FBZ0IsRUFBRSxFQUFhO0lBQy9DLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDaEUsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7UUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDaEIsT0FBTyxLQUFLLENBQUE7U0FDZjtLQUNKO0lBRUQsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUN0RSxLQUFLLE1BQU0sT0FBTyxJQUFJLFFBQVEsRUFBRTtRQUM1QixJQUFJLENBQUMsT0FBTyxD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TUFBTSxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBRXpDLE1BQU0sTUFBTSxHQUFHLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQztRQUN6QixJQUFJLEVBQUUsUUFBUTtRQUNkLFFBQVEsRUFBRSxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM3QixLQUFLLEVBQUUsbUJBQW1CO1FBQzFCLFNBQVMsRUFBRSxDQUFDO0tBQ2YsQ0FBQyxDQUFBO0lBRUYsTUFBTSxHQUFHLEdBQUcsTUFBTSxXQUFXLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDdkQsTUFBTSxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBRW5DLHFCQUFxQixDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ2pFLENBQUM7QUFFRCxJQUFJLEVBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGRvbSBmcm9tIFwiLi4vc2hhcmVkL2RvbS5qc1wiXHJcbmltcG9ydCAqIGFzIGFycmF5IGZyb20gXCIuLi9zaGFyZWQvYXJyYXkuanNcIlxyXG5pbXBvcnQgKiBhcyBnZnggZnJvbSBcIi4vZ2Z4LmpzXCJcclxuaW1wb3J0ICogYXMgZ2VuIGZyb20gXCIuL2dlbi5qc1wiXHJcbmltcG9ydCAqIGFzIGlucHV0IGZyb20gXCIuLi9zaGFyZWQvaW5wdXQuanNcIlxyXG5pbXBvcnQgKiBhcyBybCBmcm9tIFwiLi9ybC5qc1wiXHJcbmltcG9ydCAqIGFzIGdlbyBmcm9tIFwiLi4vc2hhcmVkL2dlbzJkLmpzXCJcclxuXHJcbmNvbnN0IHRpbGVTaXplID0gMjRcclxuY29uc3QgbW92ZVNwZWVkID0gMlxyXG5cclxuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVNYXAocGxheWVyOiBybC5QbGF5ZXIsIHJlbmRlcmVyOiBnZnguUmVuZGVyZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogUHJvbWlzZTxnZW4uTWFwRGF0YT4ge1xyXG4gICAgY29uc3QgbWFwID0gZ2VuLmdlbmVyYXRlTWFwKHdpZHRoLCBoZWlnaHQsIHBsYXllcilcclxuXHJcbiAgICAvLyBiYWtlIGFsbCAyNHgyNCB0aWxlIGltYWdlcyB0byBhIHNpbmdsZSBhcnJheSB0ZXh0dXJlXHJcbiAgICAvLyBzdG9yZSBtYXBwaW5nIGZyb20gaW1hZ2UgdXJsIHRvIGluZGV4XHJcbiAgICBsZXQgaW1hZ2VVcmxzOiBzdHJpbmdbXSA9IFtdXHJcbiAgICBpbWFnZVVybHMucHVzaCguLi5tYXAudGlsZXMubWFwKHQgPT4gdC5pbWFnZSkpXHJcbiAgICBpbWFnZVVybHMucHVzaCguLi5tYXAuZml4dHVyZXMubWFwKHQgPT4gdC5pbWFnZSkpXHJcblxyXG4gICAgaWYgKG1hcC5zdGFpcnNVcCkge1xyXG4gICAgICAgIGltYWdlVXJscy5wdXNoKG1hcC5zdGFpcnNVcC5pbWFnZSlcclxuICAgIH1cclxuXHJcbiAgICBpZiAobWFwLnN0YWlyc0Rvd24pIHtcclxuICAgICAgICBpbWFnZVVybHMucHVzaChtYXAuc3RhaXJzRG93bi5pbWFnZSlcclxuICAgIH1cclxuXHJcbiAgICBpbWFnZVVybHMucHVzaCguLi5tYXAuY3JlYXR1cmVzLm1hcChjID0+IGMuaW1hZ2UpKVxyXG4gICAgaW1hZ2VVcmxzLnB1c2gocGxheWVyLmltYWdlKVxyXG4gICAgaW1hZ2VVcmxzID0gaW1hZ2VVcmxzLmZpbHRlcih1cmwgPT4gdXJsKVxyXG4gICAgaW1hZ2VVcmxzID0gYXJyYXkuZGlzdGluY3QoaW1hZ2VVcmxzKVxyXG5cclxuICAgIGNvbnN0IGxheWVyTWFwID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oaW1hZ2VVcmxzLm1hcCgodXJsLCBpKSA9PiBbdXJsLCBpXSkpXHJcbiAgICBjb25zdCBpbWFnZXMgPSBhd2FpdCBQcm9taXNlLmFsbChpbWFnZVVybHMubWFwKHVybCA9PiBkb20ubG9hZEltYWdlKHVybCkpKVxyXG4gICAgY29uc3QgdGV4dHVyZSA9IHJlbmRlcmVyLmJha2VUZXh0dXJlQXJyYXkodGlsZVNpemUsIHRpbGVTaXplLCBpbWFnZXMpXHJcblxyXG4gICAgZm9yIChjb25zdCB0aCBvZiBtYXApIHtcclxuICAgICAgICBpZiAoIXRoLmltYWdlKSB7XHJcbiAgICAgICAgICAgIHRoLnRleHR1cmVMYXllciA9IC0xXHJcbiAgICAgICAgICAgIHRoLnRleHR1cmUgPSBudWxsXHJcbiAgICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBsYXllciA9IGxheWVyTWFwLmdldCh0aC5pbWFnZSlcclxuICAgICAgICBpZiAobGF5ZXIgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHRleHR1cmUgaW5kZXggbm90IGZvdW5kIGZvciAke3RoLmltYWdlfWApXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aC50ZXh0dXJlID0gdGV4dHVyZVxyXG4gICAgICAgIHRoLnRleHR1cmVMYXllciA9IGxheWVyXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG1hcFxyXG59XHJcblxyXG5jb25zdCBlcnJvcnNEaXYgPSBkb20uYnlJZChcImVycm9yc1wiKTtcclxuXHJcbmZ1bmN0aW9uIGNsZWFyRXJyb3JNZXNzYWdlcygpIHtcclxuICAgIGRvbS5yZW1vdmVBbGxDaGlsZHJlbihlcnJvcnNEaXYpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFwcGVuZEVycm9yTWVzc2FnZShlcnJvcjogc3RyaW5nKSB7XHJcbiAgICBjb25zb2xlLmxvZyhlcnJvcilcclxuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBkaXYuY2xhc3NMaXN0LmFkZChcImVycm9yLW1lc3NhZ2VcIilcclxuICAgIGRpdi50ZXh0Q29udGVudCA9IGVycm9yXHJcbiAgICBlcnJvcnNEaXYuYXBwZW5kQ2hpbGQoZGl2KVxyXG59XHJcblxyXG5mdW5jdGlvbiB0aWNrKHJlbmRlcmVyOiBnZnguUmVuZGVyZXIsIGlucDogaW5wdXQuSW5wdXQsIHBsYXllcjogcmwuUGxheWVyLCBtYXA6IGdlbi5NYXBEYXRhKSB7XHJcbiAgICBoYW5kbGVJbnB1dChyZW5kZXJlci5jYW52YXMsIHBsYXllciwgbWFwLCBpbnApXHJcbiAgICBkcmF3RnJhbWUocmVuZGVyZXIsIHBsYXllciwgbWFwKVxyXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRpY2socmVuZGVyZXIsIGlucCwgcGxheWVyLCBtYXApKVxyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVJbnB1dChjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LCBwbGF5ZXI6IHJsLlBsYXllciwgbWFwOiBnZW4uTWFwRGF0YSwgaW5wOiBpbnB1dC5JbnB1dCkge1xyXG4gICAgY29uc3QgcG9zaXRpb24gPSBwbGF5ZXIucG9zaXRpb24uY2xvbmUoKVxyXG5cclxuICAgIGlmIChpbnAubW91c2VMZWZ0SGVsZCkge1xyXG4gICAgICAgIGNvbnN0IGNlbnRlciA9IG5ldyBnZW8uUG9pbnQoY2FudmFzLndpZHRoIC8gMiwgY2FudmFzLmhlaWdodCAvIDIpXHJcbiAgICAgICAgY29uc3QgbW91c2VQb3NpdGlvbiA9IG5ldyBnZW8uUG9pbnQoaW5wLm1vdXNlWCwgaW5wLm1vdXNlWSlcclxuICAgICAgICBjb25zdCBkeHkgPSBtb3VzZVBvc2l0aW9uLnN1YlBvaW50KGNlbnRlcilcclxuICAgICAgICBjb25zdCBzZ24gPSBkeHkuc2lnbigpXHJcbiAgICAgICAgY29uc3QgYWJzID0gZHh5LmFicygpXHJcblxyXG4gICAgICAgIGlmIChhYnMueCA+IHRpbGVTaXplIC8gMiAmJiBhYnMueCA+PSBhYnMueSkge1xyXG4gICAgICAgICAgICBwb3NpdGlvbi54ICs9IHNnbi54ICogbW92ZVNwZWVkXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYWJzLnkgPiB0aWxlU2l6ZSAvIDIgJiYgYWJzLnkgPiBhYnMueCkge1xyXG4gICAgICAgICAgICBwb3NpdGlvbi55ICs9IHNnbi55ICogbW92ZVNwZWVkXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlucC5oZWxkKFwid1wiKSkge1xyXG4gICAgICAgIHBvc2l0aW9uLnkgLT0gbW92ZVNwZWVkXHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpbnAuaGVsZChcInNcIikpIHtcclxuICAgICAgICBwb3NpdGlvbi55ICs9IG1vdmVTcGVlZFxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaW5wLmhlbGQoXCJhXCIpKSB7XHJcbiAgICAgICAgcG9zaXRpb24ueCAtPSBtb3ZlU3BlZWRcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlucC5oZWxkKFwiZFwiKSkge1xyXG4gICAgICAgIHBvc2l0aW9uLnggKz0gbW92ZVNwZWVkXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzUGFzc2FibGUobWFwLCBwb3NpdGlvbikpIHtcclxuICAgICAgICBwbGF5ZXIucG9zaXRpb24gPSBwb3NpdGlvblxyXG4gICAgfVxyXG5cclxuICAgIGlucC5mbHVzaCgpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzUGFzc2FibGUobWFwOiBnZW4uTWFwRGF0YSwgeHk6IGdlby5Qb2ludCk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgdGlsZXMgPSBhcnJheS5maWx0ZXIobWFwLnRpbGVzLCB0ID0+IHQucG9zaXRpb24uZXF1YWwoeHkpKVxyXG4gICAgZm9yIChjb25zdCB0aWxlIG9mIHRpbGVzKSB7XHJcbiAgICAgICAgaWYgKCF0aWxlLnBhc3NhYmxlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBmaXh0dXJlcyA9IGFycmF5LmZpbHRlcihtYXAuZml4dHVyZXMsIHQgPT4gdC5wb3NpdGlvbi5lcXVhbCh4eSkpXHJcbiAgICBmb3IgKGNvbnN0IGZpeHR1cmUgb2YgZml4dHVyZXMpIHtcclxuICAgICAgICBpZiAoIWZpeHR1cmUucGFzc2FibGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdGcmFtZShyZW5kZXJlcjogZ2Z4LlJlbmRlcmVyLCBwbGF5ZXI6IHJsLlBsYXllciwgbWFwOiBnZW4uTWFwRGF0YSkge1xyXG4gICAgLy8gY2VudGVyIHRoZSBncmlkIGFyb3VuZCB0aGUgcGxheWVyXHJcbiAgICBoYW5kbGVSZXNpemUocmVuZGVyZXIuY2FudmFzKVxyXG5cclxuICAgIGNvbnN0IHBsYXllckNvb3JkcyA9IHBsYXllci5wb3NpdGlvblxyXG4gICAgY29uc3QgY2VudGVyID0gbmV3IGdlby5Qb2ludChNYXRoLmZsb29yKChyZW5kZXJlci5jYW52YXMud2lkdGggLSB0aWxlU2l6ZSkgLyAyKSwgTWF0aC5mbG9vcigocmVuZGVyZXIuY2FudmFzLmhlaWdodCAtIHRpbGVTaXplKSAvIDIpKVxyXG4gICAgY29uc3Qgb2Zmc2V0ID0gY2VudGVyLnN1YlBvaW50KHBsYXllckNvb3JkcylcclxuXHJcbiAgICAvLyBub3RlIC0gZHJhd2luZyBvcmRlciBtYXR0ZXJzIC0gZHJhdyBmcm9tIGJvdHRvbSB0byB0b3BcclxuXHJcbiAgICAvLyBkcmF3IHZhcmlvdXMgbGF5ZXJzIG9mIHNwcml0ZXNcclxuICAgIGZvciAoY29uc3QgdGlsZSBvZiBtYXAudGlsZXMpIHtcclxuICAgICAgICBkcmF3VGhpbmcocmVuZGVyZXIsIG9mZnNldCwgdGlsZSlcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGNvbnN0IGZpeHR1cmUgb2YgbWFwLmZpeHR1cmVzKSB7XHJcbiAgICAgICAgZHJhd1RoaW5nKHJlbmRlcmVyLCBvZmZzZXQsIGZpeHR1cmUpXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG1hcC5zdGFpcnNVcCkge1xyXG4gICAgICAgIGRyYXdUaGluZyhyZW5kZXJlciwgb2Zmc2V0LCBtYXAuc3RhaXJzVXApXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG1hcC5zdGFpcnNEb3duKSB7XHJcbiAgICAgICAgZHJhd1RoaW5nKHJlbmRlcmVyLCBvZmZzZXQsIG1hcC5zdGFpcnNEb3duKVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAoY29uc3QgY3JlYXR1cmUgb2YgbWFwLmNyZWF0dXJlcykge1xyXG4gICAgICAgIGRyYXdUaGluZyhyZW5kZXJlciwgb2Zmc2V0LCBjcmVhdHVyZSlcclxuICAgIH1cclxuXHJcbiAgICBkcmF3VGhpbmcocmVuZGVyZXIsIG9mZnNldCwgcGxheWVyKVxyXG4gICAgZHJhd0hlYWx0aEJhcihyZW5kZXJlciwgcGxheWVyLCBvZmZzZXQpXHJcblxyXG4gICAgcmVuZGVyZXIuZmx1c2gocmwubGlnaHRSYWRpdXMgKiB0aWxlU2l6ZSlcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1RoaW5nKHJlbmRlcmVyOiBnZnguUmVuZGVyZXIsIG9mZnNldDogZ2VvLlBvaW50LCB0aDogcmwuVGhpbmcpIHtcclxuICAgIGNvbnN0IHNwcml0ZVBvc2l0aW9uID0gdGgucG9zaXRpb24uYWRkUG9pbnQob2Zmc2V0KVxyXG4gICAgY29uc3Qgc3ByaXRlID0gbmV3IGdmeC5TcHJpdGUoe1xyXG4gICAgICAgIHBvc2l0aW9uOiBzcHJpdGVQb3NpdGlvbixcclxuICAgICAgICBjb2xvcjogdGguY29sb3IsXHJcbiAgICAgICAgd2lkdGg6IHRpbGVTaXplLFxyXG4gICAgICAgIGhlaWdodDogdGlsZVNpemUsXHJcbiAgICAgICAgdGV4dHVyZTogdGgudGV4dHVyZSxcclxuICAgICAgICBsYXllcjogdGgudGV4dHVyZUxheWVyLFxyXG4gICAgICAgIGZsYWdzOiBnZnguU3ByaXRlRmxhZ3MuTGl0IHwgZ2Z4LlNwcml0ZUZsYWdzLkFycmF5VGV4dHVyZSB8IGdmeC5TcHJpdGVGbGFncy5DYXN0c1NoYWRvd3NcclxuICAgIH0pXHJcblxyXG4gICAgcmVuZGVyZXIuZHJhd1Nwcml0ZShzcHJpdGUpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdIZWFsdGhCYXIocmVuZGVyZXI6IGdmeC5SZW5kZXJlciwgY3JlYXR1cmU6IHJsLkNyZWF0dXJlLCBvZmZzZXQ6IGdlby5Qb2ludCkge1xyXG4gICAgY29uc3Qgd2lkdGggPSBjcmVhdHVyZS5tYXhIZWFsdGggKiA0ICsgMlxyXG4gICAgY29uc3Qgc3ByaXRlUG9zaXRpb24gPSBjcmVhdHVyZS5wb3NpdGlvbi5tdWxTY2FsYXIodGlsZVNpemUpLmFkZFBvaW50KG9mZnNldCkuc3ViUG9pbnQobmV3IGdlby5Qb2ludCgwLCB0aWxlU2l6ZSAvIDIpKVxyXG4gICAgcmVuZGVyZXIuZHJhd1Nwcml0ZShuZXcgZ2Z4LlNwcml0ZSh7XHJcbiAgICAgICAgcG9zaXRpb246IHNwcml0ZVBvc2l0aW9uLFxyXG4gICAgICAgIGNvbG9yOiBnZnguQ29sb3Iud2hpdGUsXHJcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxyXG4gICAgICAgIGhlaWdodDogOFxyXG4gICAgfSkpXHJcblxyXG4gICAgcmVuZGVyZXIuZHJhd1Nwcml0ZShuZXcgZ2Z4LlNwcml0ZSh7XHJcbiAgICAgICAgcG9zaXRpb246IHNwcml0ZVBvc2l0aW9uLmFkZFBvaW50KG5ldyBnZW8uUG9pbnQoMSwgMSkpLFxyXG4gICAgICAgIGNvbG9yOiBnZnguQ29sb3IucmVkLFxyXG4gICAgICAgIHdpZHRoOiB3aWR0aCAtIDIsXHJcbiAgICAgICAgaGVpZ2h0OiA2XHJcbiAgICB9KSlcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlUmVzaXplKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpIHtcclxuICAgIGlmIChjYW52YXMud2lkdGggPT09IGNhbnZhcy5jbGllbnRXaWR0aCAmJiBjYW52YXMuaGVpZ2h0ID09PSBjYW52YXMuY2xpZW50SGVpZ2h0KSB7XHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICB9XHJcblxyXG4gICAgY2FudmFzLndpZHRoID0gY2FudmFzLmNsaWVudFdpZHRoXHJcbiAgICBjYW52YXMuaGVpZ2h0ID0gY2FudmFzLmNsaWVudEhlaWdodFxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBtYWluKCkge1xyXG4gICAgY29uc3QgY2FudmFzID0gZG9tLmJ5SWQoXCJjYW52YXNcIikgYXMgSFRNTENhbnZhc0VsZW1lbnRcclxuICAgIGNvbnN0IHJlbmRlcmVyID0gbmV3IGdmeC5SZW5kZXJlcihjYW52YXMpXHJcblxyXG4gICAgY29uc3QgcGxheWVyID0gbmV3IHJsLlBsYXllcih7XHJcbiAgICAgICAgbmFtZTogXCJQbGF5ZXJcIixcclxuICAgICAgICBwb3NpdGlvbjogbmV3IGdlby5Qb2ludCgwLCAwKSxcclxuICAgICAgICBpbWFnZTogXCIuL2Fzc2V0cy9jaGFyLnBuZ1wiLFxyXG4gICAgICAgIG1heEhlYWx0aDogNlxyXG4gICAgfSlcclxuXHJcbiAgICBjb25zdCBtYXAgPSBhd2FpdCBnZW5lcmF0ZU1hcChwbGF5ZXIsIHJlbmRlcmVyLCAzMiwgMzIpXHJcbiAgICBjb25zdCBpbnAgPSBuZXcgaW5wdXQuSW5wdXQoY2FudmFzKVxyXG5cclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aWNrKHJlbmRlcmVyLCBpbnAsIHBsYXllciwgbWFwKSlcclxufVxyXG5cclxubWFpbigpIl19