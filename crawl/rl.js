import * as rand from "../shared/rand.js";
import * as gfx from "./gfx.js";
export const tileSize = 24;
export const lightRadius = 9;
export var Visible;
(function (Visible) {
    Visible[Visible["None"] = 0] = "None";
    Visible[Visible["Fog"] = 1] = "Fog";
    Visible[Visible["Visible"] = 2] = "Visible";
})(Visible || (Visible = {}));
export class Thing {
    constructor(options) {
        var _a, _b, _c;
        this.color = new gfx.Color(1, 1, 1, 1);
        this.texture = null;
        this.textureLayer = -1;
        this.visible = Visible.None;
        this.position = (_b = (_a = options.position) === null || _a === void 0 ? void 0 : _a.clone()) !== null && _b !== void 0 ? _b : null;
        this.passable = options.passable;
        this.transparent = options.transparent;
        this.name = options.name;
        this.image = (_c = options.image) !== null && _c !== void 0 ? _c : "";
        if (options.color) {
            this.color = options.color;
        }
    }
    clone() {
        return new Thing(this);
    }
}
export class Dice {
    constructor(min = 0, max = 0) {
        this.min = min;
        this.max = max;
    }
    roll() {
        return rand.int(this.min, this.max + 1);
    }
    clone() {
        return new Dice(this.min, this.max);
    }
}
export class Tile extends Thing {
    clone() {
        return new Tile(this);
    }
}
export class Fixture extends Thing {
    clone() {
        return new Fixture(this);
    }
}
export class Door extends Fixture {
    clone() {
        return new Door(this);
    }
}
export class StairsUp extends Fixture {
    clone() {
        return new StairsUp(this);
    }
}
export class StairsDown extends Fixture {
    clone() {
        return new StairsDown(this);
    }
}
export class Item extends Thing {
}
export class Weapon extends Item {
    constructor(options) {
        var _a;
        super(Object.assign({ passable: false, transparent: false }, options));
        this.attack = options.attack;
        this.damage = options.damage.clone();
        this.range = (_a = options.range) !== null && _a !== void 0 ? _a : 1;
    }
    clone() {
        return new Weapon(this);
    }
}
export class Armor extends Item {
    constructor(options) {
        super(Object.assign({ passable: false, transparent: false }, options));
        this.defense = options.defense;
    }
    clone() {
        return new Armor(this);
    }
}
export class Shield extends Item {
    constructor(options) {
        super(Object.assign({ passable: false, transparent: false }, options));
        this.defense = options.defense;
    }
    clone() {
        return new Shield(this);
    }
}
export function isEquippable(item) {
    return item instanceof Weapon || item instanceof Armor || item instanceof Shield;
}
export class Usable extends Item {
    constructor(options) {
        super(Object.assign({ passable: false, transparent: false }, options));
        this.health = options.health;
    }
    clone() {
        return new Usable(this);
    }
}
export class Creature extends Thing {
    constructor(options) {
        var _a;
        super(Object.assign({ passable: false, transparent: false }, options));
        this.action = 0;
        this.maxHealth = options.maxHealth;
        this.health = (_a = options.health) !== null && _a !== void 0 ? _a : this.maxHealth;
        this.attack = options.attack;
        this.defense = options.defense;
        this.agility = options.agility;
    }
    clone() {
        return new Creature(this);
    }
}
export class Player extends Creature {
    constructor(options) {
        var _a, _b, _c, _d, _e;
        super(options);
        this.level = 1;
        this.experience = 0;
        this.level = (_a = options.level) !== null && _a !== void 0 ? _a : 1;
        if (this.level < 1) {
            this.level = 1;
        }
        this.experience = (_b = options.experience) !== null && _b !== void 0 ? _b : 0;
        this.weapon = (_c = options.weapon) !== null && _c !== void 0 ? _c : null;
        this.armor = (_d = options.armor) !== null && _d !== void 0 ? _d : null;
        this.shield = (_e = options.shield) !== null && _e !== void 0 ? _e : null;
        this.inventory = options.inventory ? new Set(options.inventory) : new Set();
    }
    clone() {
        return new Player(this);
    }
    equip(item) {
        if (!this.inventory.has(item)) {
            return;
        }
        else if (item instanceof Weapon) {
            this.equipWeapon(item);
        }
        else if (item instanceof Armor) {
            this.equipArmor(item);
        }
        else if (item instanceof Shield) {
            this.equipShield(item);
        }
    }
    remove(item) {
        if (item === this.weapon) {
            this.removeWeapon();
        }
        else if (item === this.armor) {
            this.removeArmor();
        }
        else if (item === this.shield) {
            this.removeShield();
        }
    }
    equipWeapon(weapon) {
        this.removeWeapon();
        this.weapon = weapon;
        this.attack += weapon.attack;
    }
    equipArmor(armor) {
        this.removeArmor();
        this.armor = armor;
        this.defense += armor.defense;
    }
    equipShield(shield) {
        this.removeShield();
        this.shield = shield;
        this.defense += shield.defense;
    }
    removeWeapon() {
        if (!this.weapon) {
            return;
        }
        this.attack -= this.weapon.attack;
        this.weapon = null;
    }
    removeArmor() {
        if (!this.armor) {
            return;
        }
        this.defense -= this.armor.defense;
        this.armor = null;
    }
    removeShield() {
        if (!this.shield) {
            return;
        }
        this.defense -= this.shield.defense;
        this.shield = null;
    }
    isEquipped(item) {
        return this.weapon === item || this.armor === item || this.shield === item;
    }
    delete(item) {
        if (isEquippable(item)) {
            this.remove(item);
        }
        this.inventory.delete(item);
    }
}
export class Attack {
    constructor(options) {
        var _a, _b;
        this.attack = (_a = options.attack) !== null && _a !== void 0 ? _a : 0;
        this.damage = options.damage.clone();
        this.verb = (_b = options.verb) !== null && _b !== void 0 ? _b : "";
    }
    clone() {
        return new Attack(this);
    }
}
export var MonsterState;
(function (MonsterState) {
    MonsterState[MonsterState["idle"] = 0] = "idle";
    MonsterState[MonsterState["aggro"] = 1] = "aggro";
})(MonsterState || (MonsterState = {}));
export class Monster extends Creature {
    constructor(options) {
        var _a;
        super(options);
        this.attacks = [];
        this.experience = options.experience;
        this.attacks = [...options.attacks];
        this.state = (_a = options.state) !== null && _a !== void 0 ? _a : MonsterState.idle;
        if (this.attacks.length == 0) {
            throw new Error(`No attacks defined for monster ${this.name}`);
        }
    }
    clone() {
        return new Monster(this);
    }
}
export class Container extends Fixture {
    constructor(options) {
        var _a;
        super(Object.assign({ passable: false, transparent: true }, options));
        this.position = (_a = options.position) !== null && _a !== void 0 ? _a : null;
        this.items = new Set(options.items);
    }
}
const levels = [
    10,
    20,
    50,
    100,
    200,
    500,
    1000,
    2000,
    5000,
    10000
];
export function getExperienceRequirement(level) {
    if (level < 2) {
        return 0;
    }
    if (level - 2 >= levels.length) {
        return Infinity;
    }
    return levels[level - 2];
}
//# sourceMappingURL=data:application/json;base64,