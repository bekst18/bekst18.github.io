/**
 * rogue-like library
 */
import * as geo from "../shared/geo2d.js";
import * as rand from "../shared/rand.js";
import * as gfx from "./gfx.js";
export const tileSize = 24;
export const lightRadius = 5;
export var Visibility;
(function (Visibility) {
    Visibility[Visibility["None"] = 0] = "None";
    Visibility[Visibility["Fog"] = 1] = "Fog";
    Visibility[Visibility["Visible"] = 2] = "Visible";
})(Visibility || (Visibility = {}));
export class Thing {
    constructor(options) {
        var _a, _b, _c;
        this.color = new gfx.Color(1, 1, 1, 1);
        this.texture = null;
        this.textureLayer = -1;
        this.visible = Visibility.None;
        this.position = (_b = (_a = options.position) === null || _a === void 0 ? void 0 : _a.clone()) !== null && _b !== void 0 ? _b : new geo.Point(-1, -1);
        this.passable = options.passable;
        this.transparent = options.transparent;
        this.name = options.name;
        this.image = (_c = options.image) !== null && _c !== void 0 ? _c : "";
        if (options.color) {
            this.color = options.color;
        }
    }
    clone() {
        return new Thing(this);
    }
}
export class Dice {
    constructor(min = 0, max = 0) {
        this.min = min;
        this.max = max;
    }
    roll() {
        return rand.int(this.min, this.max + 1);
    }
    clone() {
        return new Dice(this.min, this.max);
    }
}
export class Tile extends Thing {
    clone() {
        return new Tile(this);
    }
}
export class Fixture extends Thing {
    clone() {
        return new Fixture(this);
    }
}
export class Door extends Fixture {
    clone() {
        return new Door(this);
    }
}
export class StairsUp extends Fixture {
    clone() {
        return new StairsUp(this);
    }
}
export class StairsDown extends Fixture {
    clone() {
        return new StairsDown(this);
    }
}
export class Item extends Thing {
}
export class Weapon extends Item {
    constructor(options) {
        var _a, _b;
        super(Object.assign({ passable: false, transparent: false }, options));
        this.attack = options.attack;
        this.damage = options.damage.clone();
        this.range = (_a = options.range) !== null && _a !== void 0 ? _a : 1;
        this.verb = (_b = options.verb) !== null && _b !== void 0 ? _b : "";
        this.action = options.action;
    }
    clone() {
        return new Weapon(this);
    }
}
export class Armor extends Item {
    constructor(options) {
        super(Object.assign({ position: new geo.Point(-1, -1), passable: false, transparent: false }, options));
        this.defense = options.defense;
    }
    clone() {
        return new Armor(this);
    }
}
export class Shield extends Item {
    constructor(options) {
        super(Object.assign({ passable: false, transparent: false }, options));
        this.defense = options.defense;
    }
    clone() {
        return new Shield(this);
    }
}
export function isEquippable(item) {
    return item instanceof Weapon || item instanceof Armor || item instanceof Shield;
}
export class Usable extends Item {
    constructor(options) {
        super(Object.assign({ passable: false, transparent: false }, options));
        this.health = options.health;
    }
    clone() {
        return new Usable(this);
    }
}
export class Creature extends Thing {
    constructor(options) {
        var _a;
        super(Object.assign({ passable: false, transparent: true }, options));
        this.action = 0;
        this.actionReserve = 0;
        this.maxHealth = options.maxHealth;
        this.health = (_a = options.health) !== null && _a !== void 0 ? _a : this.maxHealth;
        this.defense = options.defense;
        this.agility = options.agility;
    }
    clone() {
        return new Creature(this);
    }
}
export class Player extends Creature {
    constructor(options) {
        var _a, _b, _c, _d, _e;
        super(options);
        this.level = 1;
        this.attack = 0;
        this.experience = 0;
        if (options.attack) {
            this.attack = options.attack;
        }
        this.level = (_a = options.level) !== null && _a !== void 0 ? _a : 1;
        if (this.level < 1) {
            this.level = 1;
        }
        this.experience = (_b = options.experience) !== null && _b !== void 0 ? _b : 0;
        this.weapon = (_c = options.weapon) !== null && _c !== void 0 ? _c : null;
        this.armor = (_d = options.armor) !== null && _d !== void 0 ? _d : null;
        this.shield = (_e = options.shield) !== null && _e !== void 0 ? _e : null;
        this.inventory = options.inventory ? new Set(options.inventory) : new Set();
    }
    clone() {
        return new Player(this);
    }
    equip(item) {
        if (!this.inventory.has(item)) {
            return;
        }
        else if (item instanceof Weapon) {
            this.equipWeapon(item);
        }
        else if (item instanceof Armor) {
            this.equipArmor(item);
        }
        else if (item instanceof Shield) {
            this.equipShield(item);
        }
    }
    remove(item) {
        if (item === this.weapon) {
            this.removeWeapon();
        }
        else if (item === this.armor) {
            this.removeArmor();
        }
        else if (item === this.shield) {
            this.removeShield();
        }
    }
    equipWeapon(weapon) {
        this.removeWeapon();
        this.weapon = weapon;
        this.attack += weapon.attack;
    }
    equipArmor(armor) {
        this.removeArmor();
        this.armor = armor;
        this.defense += armor.defense;
    }
    equipShield(shield) {
        this.removeShield();
        this.shield = shield;
        this.defense += shield.defense;
    }
    removeWeapon() {
        if (!this.weapon) {
            return;
        }
        this.attack -= this.weapon.attack;
        this.weapon = null;
    }
    removeArmor() {
        if (!this.armor) {
            return;
        }
        this.defense -= this.armor.defense;
        this.armor = null;
    }
    removeShield() {
        if (!this.shield) {
            return;
        }
        this.defense -= this.shield.defense;
        this.shield = null;
    }
    isEquipped(item) {
        return this.weapon === item || this.armor === item || this.shield === item;
    }
    delete(item) {
        if (isEquippable(item)) {
            this.remove(item);
        }
        this.inventory.delete(item);
    }
}
export class Attack {
    constructor(options) {
        var _a, _b, _c;
        this.attack = (_a = options.attack) !== null && _a !== void 0 ? _a : 0;
        this.damage = options.damage.clone();
        this.action = options.action;
        this.range = (_b = options.range) !== null && _b !== void 0 ? _b : 1;
        this.verb = (_c = options.verb) !== null && _c !== void 0 ? _c : "";
    }
    clone() {
        return new Attack(this);
    }
}
export var MonsterState;
(function (MonsterState) {
    MonsterState[MonsterState["idle"] = 0] = "idle";
    MonsterState[MonsterState["aggro"] = 1] = "aggro";
})(MonsterState || (MonsterState = {}));
export class Monster extends Creature {
    constructor(options) {
        var _a;
        super(options);
        this.attacks = [];
        this.experience = options.experience;
        this.attacks = [...options.attacks];
        this.state = (_a = options.state) !== null && _a !== void 0 ? _a : MonsterState.idle;
        if (this.attacks.length == 0) {
            throw new Error(`No attacks defined for monster ${this.name}`);
        }
    }
    clone() {
        return new Monster(this);
    }
}
export class Container extends Fixture {
    constructor(options) {
        var _a;
        super(Object.assign({ passable: false, transparent: true }, options));
        this.items = new Set([...(_a = options.items) !== null && _a !== void 0 ? _a : []]);
    }
    clone() {
        return new Container(this);
    }
}
const levels = [
    10,
    20,
    50,
    100,
    200,
    500,
    1000,
    2000,
    5000,
    10000
];
export function getExperienceRequirement(level) {
    if (level < 2) {
        return 0;
    }
    if (level - 2 >= levels.length) {
        return Infinity;
    }
    return levels[level - 2];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJybC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUNILE9BQU8sS0FBSyxHQUFHLE1BQU0sb0JBQW9CLENBQUE7QUFDekMsT0FBTyxLQUFLLElBQUksTUFBTSxtQkFBbUIsQ0FBQTtBQUN6QyxPQUFPLEtBQUssR0FBRyxNQUFNLFVBQVUsQ0FBQTtBQUUvQixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFBO0FBQzFCLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLENBQUE7QUFFNUIsTUFBTSxDQUFOLElBQVksVUFJWDtBQUpELFdBQVksVUFBVTtJQUNsQiwyQ0FBSSxDQUFBO0lBQ0oseUNBQUcsQ0FBQTtJQUNILGlEQUFPLENBQUE7QUFDWCxDQUFDLEVBSlcsVUFBVSxLQUFWLFVBQVUsUUFJckI7QUFXRCxNQUFNLE9BQU8sS0FBSztJQVdkLFlBQVksT0FBcUI7O1FBTGpDLFVBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDakMsWUFBTyxHQUF1QixJQUFJLENBQUE7UUFDbEMsaUJBQVksR0FBVyxDQUFDLENBQUMsQ0FBQTtRQUN6QixZQUFPLEdBQWUsVUFBVSxDQUFDLElBQUksQ0FBQTtRQUdqQyxJQUFJLENBQUMsUUFBUSxlQUFHLE9BQU8sQ0FBQyxRQUFRLDBDQUFFLEtBQUsscUNBQU0sSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDbEUsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFBO1FBQ2hDLElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQTtRQUN0QyxJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUE7UUFDeEIsSUFB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QUFHLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO1FBQzVCLE9BQU8sUUFBUSxDQUFBO0tBQ2xCO0lBRUQsT0FBTyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQzVCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogcm9ndWUtbGlrZSBsaWJyYXJ5XHJcbiAqL1xyXG5pbXBvcnQgKiBhcyBnZW8gZnJvbSBcIi4uL3NoYXJlZC9nZW8yZC5qc1wiXHJcbmltcG9ydCAqIGFzIHJhbmQgZnJvbSBcIi4uL3NoYXJlZC9yYW5kLmpzXCJcclxuaW1wb3J0ICogYXMgZ2Z4IGZyb20gXCIuL2dmeC5qc1wiXHJcblxyXG5leHBvcnQgY29uc3QgdGlsZVNpemUgPSAyNFxyXG5leHBvcnQgY29uc3QgbGlnaHRSYWRpdXMgPSA1XHJcblxyXG5leHBvcnQgZW51bSBWaXNpYmlsaXR5IHtcclxuICAgIE5vbmUsXHJcbiAgICBGb2csXHJcbiAgICBWaXNpYmxlXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGhpbmdPcHRpb25zIHtcclxuICAgIHBvc2l0aW9uPzogZ2VvLlBvaW50XHJcbiAgICBwYXNzYWJsZTogYm9vbGVhblxyXG4gICAgdHJhbnNwYXJlbnQ6IGJvb2xlYW5cclxuICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgaW1hZ2U/OiBzdHJpbmdcclxuICAgIGNvbG9yPzogZ2Z4LkNvbG9yXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUaGluZyB7XHJcbiAgICBwb3NpdGlvbjogZ2VvLlBvaW50XHJcbiAgICBwYXNzYWJsZTogYm9vbGVhblxyXG4gICAgdHJhbnNwYXJlbnQ6IGJvb2xlYW5cclxuICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgaW1hZ2U6IHN0cmluZ1xyXG4gICAgY29sb3IgPSBuZXcgZ2Z4LkNvbG9yKDEsIDEsIDEsIDEpXHJcbiAgICB0ZXh0dXJlOiBnZnguVGV4dHVyZSB8IG51bGwgPSBudWxsXHJcbiAgICB0ZXh0dXJlTGF5ZXI6IG51bWJlciA9IC0xXHJcbiAgICB2aXNpYmxlOiBWaXNpYmlsaXR5ID0gVmlzaWJpbGl0eS5Ob25lXHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogVGhpbmdPcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IG9wdGlvbnMucG9zaXRpb24/LmNsb25lKCkgPz8gbmV3IGdlby5Qb2ludCgtMSwgLTEpXHJcbiAgICAgICAgdGhpcy5wYXNzYWJsZSA9IG9wdGlvbnMucGFzc2FibGVcclxuICAgICAgICB0aGlzLnRyYW5zcGFyZW50ID0gb3B0aW9ucy50cmFuc3BhcmVudFxyXG4gICAgICAgIHRoaXMubmFtZSA9IG9wdGlvbnMubmFtZVxyXG4gICAgICAgIHRoaXMuaW1hZ2UgPSBvcHRpb25zLmltYWdlID8/IFwiXCJcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuY29sb3IpIHtcclxuICAgICAgICAgICAgdGhpcy5jb2xvciA9IG9wdGlvbnMuY29sb3JcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogVGhpbmcge1xyXG4gICAgICAgIHJldHVybiBuZXcgVGhpbmcodGhpcylcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERpY2Uge1xyXG4gICAgY29uc3RydWN0b3IocmVhZG9ubHkgbWluOiBudW1iZXIgPSAwLCByZWFkb25seSBtYXg6IG51bWJlciA9IDApIHsgfVxyXG5cclxuICAgIHJvbGwoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gcmFuZC5pbnQodGhpcy5taW4sIHRoaXMubWF4ICsgMSlcclxuICAgIH1cclxuXHJcbiAgICBjbG9uZSgpOiBEaWNlIHtcclxuICAgICAgICByZXR1cm4gbmV3IERpY2UodGhpcy5taW4sIHRoaXMubWF4KVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVGlsZSBleHRlbmRzIFRoaW5nIHtcclxuICAgIGNsb25lKCk6IFRpbGUge1xyXG4gICAgICAgIHJldHVybiBuZXcgVGlsZSh0aGlzKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRml4dHVyZSBleHRlbmRzIFRoaW5nIHtcclxuICAgIGNsb25lKCk6IEZpeHR1cmUge1xyXG4gICAgICAgIHJldHVybiBuZXcgRml4dHVyZSh0aGlzKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRG9vciBleHRlbmRzIEZpeHR1cmUge1xyXG4gICAgY2xvbmUoKTogRG9vciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEb29yKHRoaXMpXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTdGFpcnNVcCBleHRlbmRzIEZpeHR1cmUge1xyXG4gICAgY2xvbmUoKTogU3RhaXJzVXAge1xyXG4gICAgICAgIHJldHVybiBuZXcgU3RhaXJzVXAodGhpcylcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFN0YWlyc0Rvd24gZXh0ZW5kcyBGaXh0dXJlIHtcclxuICAgIGNsb25lKCk6IFN0YWlyc0Rvd24ge1xyXG4gICAgICAgIHJldHVybiBuZXcgU3RhaXJzRG93bih0aGlzKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSXRlbSBleHRlbmRzIFRoaW5nIHsgfVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBXZWFwb25PcHRpb25zIHtcclxuICAgIHBvc2l0aW9uPzogZ2VvLlBvaW50XHJcbiAgICBuYW1lOiBzdHJpbmdcclxuICAgIGltYWdlPzogc3RyaW5nXHJcbiAgICBjb2xvcj86IGdmeC5Db2xvclxyXG4gICAgYXR0YWNrOiBudW1iZXJcclxuICAgIHJhbmdlPzogbnVtYmVyXHJcbiAgICB2ZXJiPzogc3RyaW5nXHJcbiAgICBhY3Rpb246IG51bWJlclxyXG4gICAgZGFtYWdlOiBEaWNlXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBXZWFwb24gZXh0ZW5kcyBJdGVtIHtcclxuICAgIHJlYWRvbmx5IGF0dGFjazogbnVtYmVyXHJcbiAgICByZWFkb25seSBkYW1hZ2U6IERpY2VcclxuICAgIHJlYWRvbmx5IHJhbmdlOiBudW1iZXJcclxuICAgIHJlYWRvbmx5IGFjdGlvbjogbnVtYmVyXHJcbiAgICByZWFkb25seSB2ZXJiOiBzdHJpbmdcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBXZWFwb25PcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoT2JqZWN0LmFzc2lnbih7IHBhc3NhYmxlOiBmYWxzZSwgdHJhbnNwYXJlbnQ6IGZhbHNlIH0sIG9wdGlvbnMpKVxyXG4gICAgICAgIHRoaXMuYXR0YWNrID0gb3B0aW9ucy5hdHRhY2tcclxuICAgICAgICB0aGlzLmRhbWFnZSA9IG9wdGlvbnMuZGFtYWdlLmNsb25lKClcclxuICAgICAgICB0aGlzLnJhbmdlID0gb3B0aW9ucy5yYW5nZSA/PyAxXHJcbiAgICAgICAgdGhpcy52ZXJiID0gb3B0aW9ucy52ZXJiID8/IFwiXCJcclxuICAgICAgICB0aGlzLmFjdGlvbiA9IG9wdGlvbnMuYWN0aW9uXHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogV2VhcG9uIHtcclxuICAgICAgICByZXR1cm4gbmV3IFdlYXBvbih0aGlzKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFybW9yT3B0aW9ucyB7XHJcbiAgICBwb3NpdGlvbj86IGdlby5Qb2ludFxyXG4gICAgbmFtZTogc3RyaW5nXHJcbiAgICBpbWFnZT86IHN0cmluZ1xyXG4gICAgY29sb3I/OiBnZnguQ29sb3JcclxuICAgIGRlZmVuc2U6IG51bWJlclxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQXJtb3IgZXh0ZW5kcyBJdGVtIHtcclxuICAgIHJlYWRvbmx5IGRlZmVuc2U6IG51bWJlclxyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEFybW9yT3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKE9iamVjdC5hc3NpZ24oeyBwb3NpdGlvbjogbmV3IGdlby5Qb2ludCgtMSwgLTEpLCBwYXNzYWJsZTogZmFsc2UsIHRyYW5zcGFyZW50OiBmYWxzZSB9LCBvcHRpb25zKSlcclxuICAgICAgICB0aGlzLmRlZmVuc2UgPSBvcHRpb25zLmRlZmVuc2VcclxuICAgIH1cclxuXHJcbiAgICBjbG9uZSgpOiBBcm1vciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBBcm1vcih0aGlzKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNoaWVsZE9wdGlvbnMge1xyXG4gICAgcG9zaXRpb24/OiBnZW8uUG9pbnRcclxuICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgaW1hZ2U/OiBzdHJpbmdcclxuICAgIGNvbG9yPzogZ2Z4LkNvbG9yXHJcbiAgICBkZWZlbnNlOiBudW1iZXJcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNoaWVsZCBleHRlbmRzIEl0ZW0ge1xyXG4gICAgcmVhZG9ubHkgZGVmZW5zZTogbnVtYmVyXHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogU2hpZWxkT3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKE9iamVjdC5hc3NpZ24oeyBwYXNzYWJsZTogZmFsc2UsIHRyYW5zcGFyZW50OiBmYWxzZSB9LCBvcHRpb25zKSlcclxuICAgICAgICB0aGlzLmRlZmVuc2UgPSBvcHRpb25zLmRlZmVuc2VcclxuICAgIH1cclxuXHJcbiAgICBjbG9uZSgpOiBTaGllbGQge1xyXG4gICAgICAgIHJldHVybiBuZXcgU2hpZWxkKHRoaXMpXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEVxdWlwcGFibGUgPSBXZWFwb24gfCBBcm1vciB8IFNoaWVsZFxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRXF1aXBwYWJsZShpdGVtOiBJdGVtKTogaXRlbSBpcyBFcXVpcHBhYmxlIHtcclxuICAgIHJldHVybiBpdGVtIGluc3RhbmNlb2YgV2VhcG9uIHx8IGl0ZW0gaW5zdGFuY2VvZiBBcm1vciB8fCBpdGVtIGluc3RhbmNlb2YgU2hpZWxkXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNhYmxlT3B0aW9ucyB7XHJcbiAgICBwb3NpdGlvbj86IGdlby5Qb2ludFxyXG4gICAgbmFtZTogc3RyaW5nXHJcbiAgICBpbWFnZT86IHN0cmluZ1xyXG4gICAgY29sb3I/OiBnZnguQ29sb3JcclxuICAgIGhlYWx0aDogbnVtYmVyXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBVc2FibGUgZXh0ZW5kcyBJdGVtIHtcclxuICAgIHJlYWRvbmx5IGhlYWx0aDogbnVtYmVyXHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogVXNhYmxlT3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKE9iamVjdC5hc3NpZ24oeyBwYXNzYWJsZTogZmFsc2UsIHRyYW5zcGFyZW50OiBmYWxzZSB9LCBvcHRpb25zKSlcclxuICAgICAgICB0aGlzLmhlYWx0aCA9IG9wdGlvbnMuaGVhbHRoXHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogVXNhYmxlIHtcclxuICAgICAgICByZXR1cm4gbmV3IFVzYWJsZSh0aGlzKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENyZWF0dXJlT3B0aW9ucyB7XHJcbiAgICBwb3NpdGlvbj86IGdlby5Qb2ludFxyXG4gICAgbmFtZTogc3RyaW5nXHJcbiAgICBpbWFnZTogc3RyaW5nXHJcbiAgICBjb2xvcj86IGdmeC5Db2xvclxyXG4gICAgbWF4SGVhbHRoOiBudW1iZXJcclxuICAgIGhlYWx0aD86IG51bWJlclxyXG4gICAgZGVmZW5zZTogbnVtYmVyXHJcbiAgICBhZ2lsaXR5OiBudW1iZXJcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENyZWF0dXJlIGV4dGVuZHMgVGhpbmcge1xyXG4gICAgbWF4SGVhbHRoOiBudW1iZXJcclxuICAgIGhlYWx0aDogbnVtYmVyXHJcbiAgICBkZWZlbnNlOiBudW1iZXJcclxuICAgIGFnaWxpdHk6IG51bWJlclxyXG4gICAgYWN0aW9uOiBudW1iZXIgPSAwXHJcbiAgICBhY3Rpb25SZXNlcnZlOiBudW1iZXIgPSAwXHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogQ3JlYXR1cmVPcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoT2JqZWN0LmFzc2lnbih7IHBhc3NhYmxlOiBmYWxzZSwgdHJhbnNwYXJlbnQ6IHRydWUgfSwgb3B0aW9ucykpXHJcbiAgICAgICAgdGhpcy5tYXhIZWFsdGggPSBvcHRpb25zLm1heEhlYWx0aFxyXG4gICAgICAgIHRoaXMuaGVhbHRoID0gb3B0aW9ucy5oZWFsdGggPz8gdGhpcy5tYXhIZWFsdGhcclxuICAgICAgICB0aGlzLmRlZmVuc2UgPSBvcHRpb25zLmRlZmVuc2VcclxuICAgICAgICB0aGlzLmFnaWxpdHkgPSBvcHRpb25zLmFnaWxpdHlcclxuICAgIH1cclxuXHJcbiAgICBjbG9uZSgpOiBDcmVhdHVyZSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDcmVhdHVyZSh0aGlzKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBsYXllck9wdGlvbnMgZXh0ZW5kcyBDcmVhdHVyZU9wdGlvbnMge1xyXG4gICAgYXR0YWNrPzogbnVtYmVyXHJcbiAgICBsZXZlbD86IG51bWJlclxyXG4gICAgZXhwZXJpZW5jZT86IG51bWJlclxyXG4gICAgd2VhcG9uPzogV2VhcG9uIHwgbnVsbFxyXG4gICAgYXJtb3I/OiBBcm1vciB8IG51bGxcclxuICAgIHNoaWVsZD86IFNoaWVsZCB8IG51bGxcclxuICAgIGludmVudG9yeT86IFNldDxJdGVtPlxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUGxheWVyIGV4dGVuZHMgQ3JlYXR1cmUge1xyXG4gICAgbGV2ZWw6IG51bWJlciA9IDFcclxuICAgIGF0dGFjazogbnVtYmVyID0gMFxyXG4gICAgZXhwZXJpZW5jZTogbnVtYmVyID0gMFxyXG4gICAgd2VhcG9uOiBXZWFwb24gfCBudWxsXHJcbiAgICBhcm1vcjogQXJtb3IgfCBudWxsXHJcbiAgICBzaGllbGQ6IFNoaWVsZCB8IG51bGxcclxuICAgIGludmVudG9yeTogU2V0PEl0ZW0+XHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogUGxheWVyT3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKG9wdGlvbnMpXHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmF0dGFjaykge1xyXG4gICAgICAgICAgICB0aGlzLmF0dGFjayA9IG9wdGlvbnMuYXR0YWNrXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxldmVsID0gb3B0aW9ucy5sZXZlbCA/PyAxXHJcbiAgICAgICAgaWYgKHRoaXMubGV2ZWwgPCAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGV2ZWwgPSAxXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmV4cGVyaWVuY2UgPSBvcHRpb25zLmV4cGVyaWVuY2UgPz8gMFxyXG4gICAgICAgIHRoaXMud2VhcG9uID0gb3B0aW9ucy53ZWFwb24gPz8gbnVsbFxyXG4gICAgICAgIHRoaXMuYXJtb3IgPSBvcHRpb25zLmFybW9yID8/IG51bGxcclxuICAgICAgICB0aGlzLnNoaWVsZCA9IG9wdGlvbnMuc2hpZWxkID8/IG51bGxcclxuICAgICAgICB0aGlzLmludmVudG9yeSA9IG9wdGlvbnMuaW52ZW50b3J5ID8gbmV3IFNldDxJdGVtPihvcHRpb25zLmludmVudG9yeSkgOiBuZXcgU2V0PEl0ZW0+KClcclxuICAgIH1cclxuXHJcbiAgICBjbG9uZSgpOiBQbGF5ZXIge1xyXG4gICAgICAgIHJldHVybiBuZXcgUGxheWVyKHRoaXMpXHJcbiAgICB9XHJcblxyXG4gICAgZXF1aXAoaXRlbTogRXF1aXBwYWJsZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5pbnZlbnRvcnkuaGFzKGl0ZW0pKSB7XHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbSBpbnN0YW5jZW9mIFdlYXBvbikge1xyXG4gICAgICAgICAgICB0aGlzLmVxdWlwV2VhcG9uKGl0ZW0pXHJcbiAgICAgICAgfSBlbHNlIGlmIChpdGVtIGluc3RhbmNlb2YgQXJtb3IpIHtcclxuICAgICAgICAgICAgdGhpcy5lcXVpcEFybW9yKGl0ZW0pXHJcbiAgICAgICAgfSBlbHNlIGlmIChpdGVtIGluc3RhbmNlb2YgU2hpZWxkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXF1aXBTaGllbGQoaXRlbSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlKGl0ZW06IEVxdWlwcGFibGUpIHtcclxuICAgICAgICBpZiAoaXRlbSA9PT0gdGhpcy53ZWFwb24pIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVXZWFwb24oKVxyXG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbSA9PT0gdGhpcy5hcm1vcikge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUFybW9yKClcclxuICAgICAgICB9IGVsc2UgaWYgKGl0ZW0gPT09IHRoaXMuc2hpZWxkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlU2hpZWxkKClcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXF1aXBXZWFwb24od2VhcG9uOiBXZWFwb24pIHtcclxuICAgICAgICB0aGlzLnJlbW92ZVdlYXBvbigpXHJcbiAgICAgICAgdGhpcy53ZWFwb24gPSB3ZWFwb25cclxuICAgICAgICB0aGlzLmF0dGFjayArPSB3ZWFwb24uYXR0YWNrXHJcbiAgICB9XHJcblxyXG4gICAgZXF1aXBBcm1vcihhcm1vcjogQXJtb3IpIHtcclxuICAgICAgICB0aGlzLnJlbW92ZUFybW9yKClcclxuICAgICAgICB0aGlzLmFybW9yID0gYXJtb3JcclxuICAgICAgICB0aGlzLmRlZmVuc2UgKz0gYXJtb3IuZGVmZW5zZVxyXG4gICAgfVxyXG5cclxuICAgIGVxdWlwU2hpZWxkKHNoaWVsZDogU2hpZWxkKSB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVTaGllbGQoKVxyXG4gICAgICAgIHRoaXMuc2hpZWxkID0gc2hpZWxkXHJcbiAgICAgICAgdGhpcy5kZWZlbnNlICs9IHNoaWVsZC5kZWZlbnNlXHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlV2VhcG9uKCkge1xyXG4gICAgICAgIGlmICghdGhpcy53ZWFwb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmF0dGFjayAtPSB0aGlzLndlYXBvbi5hdHRhY2tcclxuICAgICAgICB0aGlzLndlYXBvbiA9IG51bGxcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVBcm1vcigpIHtcclxuICAgICAgICBpZiAoIXRoaXMuYXJtb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmRlZmVuc2UgLT0gdGhpcy5hcm1vci5kZWZlbnNlXHJcbiAgICAgICAgdGhpcy5hcm1vciA9IG51bGxcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVTaGllbGQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNoaWVsZCkge1xyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZGVmZW5zZSAtPSB0aGlzLnNoaWVsZC5kZWZlbnNlXHJcbiAgICAgICAgdGhpcy5zaGllbGQgPSBudWxsXHJcbiAgICB9XHJcblxyXG4gICAgaXNFcXVpcHBlZChpdGVtOiBJdGVtKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2VhcG9uID09PSBpdGVtIHx8IHRoaXMuYXJtb3IgPT09IGl0ZW0gfHwgdGhpcy5zaGllbGQgPT09IGl0ZW1cclxuICAgIH1cclxuXHJcbiAgICBkZWxldGUoaXRlbTogSXRlbSkge1xyXG4gICAgICAgIGlmIChpc0VxdWlwcGFibGUoaXRlbSkpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmUoaXRlbSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaW52ZW50b3J5LmRlbGV0ZShpdGVtKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEF0dGFja09wdGlvbnMge1xyXG4gICAgYXR0YWNrOiBudW1iZXJcclxuICAgIGRhbWFnZTogRGljZVxyXG4gICAgYWN0aW9uOiBudW1iZXJcclxuICAgIHJhbmdlPzogbnVtYmVyXHJcbiAgICB2ZXJiPzogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBdHRhY2sge1xyXG4gICAgYXR0YWNrOiBudW1iZXJcclxuICAgIGRhbWFnZTogRGljZVxyXG4gICAgYWN0aW9uOiBudW1iZXJcclxuICAgIHJhbmdlOiBudW1iZXJcclxuICAgIHZlcmI6IHN0cmluZ1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEF0dGFja09wdGlvbnMpIHtcclxuICAgICAgICB0aGlzLmF0dGFjayA9IG9wdGlvbnMuYXR0YWNrID8/IDBcclxuICAgICAgICB0aGlzLmRhbWFnZSA9IG9wdGlvbnMuZGFtYWdlLmNsb25lKClcclxuICAgICAgICB0aGlzLmFjdGlvbiA9IG9wdGlvbnMuYWN0aW9uXHJcbiAgICAgICAgdGhpcy5yYW5nZSA9IG9wdGlvbnMucmFuZ2UgPz8gMVxyXG4gICAgICAgIHRoaXMudmVyYiA9IG9wdGlvbnMudmVyYiA/PyBcIlwiXHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogQXR0YWNrIHtcclxuICAgICAgICByZXR1cm4gbmV3IEF0dGFjayh0aGlzKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZW51bSBNb25zdGVyU3RhdGUge1xyXG4gICAgaWRsZSxcclxuICAgIGFnZ3JvXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTW9uc3Rlck9wdGlvbnMgZXh0ZW5kcyBDcmVhdHVyZU9wdGlvbnMge1xyXG4gICAgZXhwZXJpZW5jZTogbnVtYmVyLFxyXG4gICAgYXR0YWNrczogQXR0YWNrW10sXHJcbiAgICBzdGF0ZT86IE1vbnN0ZXJTdGF0ZVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTW9uc3RlciBleHRlbmRzIENyZWF0dXJlIHtcclxuICAgIGV4cGVyaWVuY2U6IG51bWJlclxyXG4gICAgcmVhZG9ubHkgYXR0YWNrczogQXR0YWNrW10gPSBbXVxyXG4gICAgc3RhdGU6IE1vbnN0ZXJTdGF0ZVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IE1vbnN0ZXJPcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIob3B0aW9ucylcclxuICAgICAgICB0aGlzLmV4cGVyaWVuY2UgPSBvcHRpb25zLmV4cGVyaWVuY2VcclxuICAgICAgICB0aGlzLmF0dGFja3MgPSBbLi4ub3B0aW9ucy5hdHRhY2tzXVxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBvcHRpb25zLnN0YXRlID8/IE1vbnN0ZXJTdGF0ZS5pZGxlXHJcblxyXG4gICAgICAgIGlmICh0aGlzLmF0dGFja3MubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBhdHRhY2tzIGRlZmluZWQgZm9yIG1vbnN0ZXIgJHt0aGlzLm5hbWV9YClcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogTW9uc3RlciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBNb25zdGVyKHRoaXMpXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29udGFpbmVyT3B0aW9ucyB7XHJcbiAgICBwb3NpdGlvbj86IGdlby5Qb2ludFxyXG4gICAgbmFtZTogc3RyaW5nXHJcbiAgICBpbWFnZTogc3RyaW5nXHJcbiAgICBjb2xvcj86IGdmeC5Db2xvclxyXG4gICAgaXRlbXM/OiBTZXQ8SXRlbT5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENvbnRhaW5lciBleHRlbmRzIEZpeHR1cmUge1xyXG4gICAgcmVhZG9ubHkgaXRlbXM6IFNldDxJdGVtPlxyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IENvbnRhaW5lck9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihPYmplY3QuYXNzaWduKHsgcGFzc2FibGU6IGZhbHNlLCB0cmFuc3BhcmVudDogdHJ1ZSB9LCBvcHRpb25zKSlcclxuICAgICAgICB0aGlzLml0ZW1zID0gbmV3IFNldDxJdGVtPihbLi4ub3B0aW9ucy5pdGVtcyA/PyBbXV0pXHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogQ29udGFpbmVyIHtcclxuICAgICAgICByZXR1cm4gbmV3IENvbnRhaW5lcih0aGlzKVxyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBsZXZlbHMgPSBbXHJcbiAgICAxMCxcclxuICAgIDIwLFxyXG4gICAgNTAsXHJcbiAgICAxMDAsXHJcbiAgICAyMDAsXHJcbiAgICA1MDAsXHJcbiAgICAxMDAwLFxyXG4gICAgMjAwMCxcclxuICAgIDUwMDAsXHJcbiAgICAxMDAwMF1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRFeHBlcmllbmNlUmVxdWlyZW1lbnQobGV2ZWw6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBpZiAobGV2ZWwgPCAyKSB7XHJcbiAgICAgICAgcmV0dXJuIDBcclxuICAgIH1cclxuXHJcbiAgICBpZiAobGV2ZWwgLSAyID49IGxldmVscy5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gSW5maW5pdHlcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbGV2ZWxzW2xldmVsIC0gMl1cclxufSJdfQ==