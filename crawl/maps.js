import * as geo from "../shared/geo2d.js";
import * as iter from "../shared/iter.js";
import * as rl from "./rl.js";
import * as grid from "../shared/grid.js";
/**
 * a layer that is based on a set
 * works well for sparse layers
 */
export class SetLayer {
    constructor() {
        this.set = new Set();
    }
    add(item) {
        this.set.add(item);
    }
    delete(item) {
        this.set.delete(item);
    }
    has(item) {
        return this.set.has(item);
    }
    at(position) {
        var _a;
        for (const value of this.set) {
            if ((_a = value.position) === null || _a === void 0 ? void 0 : _a.equal(position)) {
                return value;
            }
        }
        return null;
    }
    *within(aabb) {
        for (const item of this.set) {
            if (aabb.contains(item.position)) {
                yield item;
            }
        }
    }
    get size() {
        return this.set.size;
    }
    *[Symbol.iterator]() {
        for (const value of this.set) {
            yield value;
        }
    }
}
/**
 * a layer that is based on a grid
 * works well for dense layers
 */
export class GridLayer {
    constructor(width, height) {
        this.set = new Set();
        this.grd = grid.generate(width, height, () => null);
    }
    get width() {
        return this.grd.width;
    }
    get height() {
        return this.grd.height;
    }
    add(item) {
        this.grd.setPoint(item.position, item);
        this.set.add(item);
    }
    delete(item) {
        this.grd.setPoint(item.position, null);
        this.set.delete(item);
    }
    has(item) {
        return this.set.has(item);
    }
    at(position) {
        return this.grd.atPoint(position);
    }
    *within(aabb) {
        for (const [item] of this.grd.scanAABB(aabb)) {
            if (item) {
                yield item;
            }
        }
    }
    get size() {
        return this.set.size;
    }
    *[Symbol.iterator]() {
        for (const value of this.set) {
            yield value;
        }
    }
}
export var Lighting;
(function (Lighting) {
    Lighting[Lighting["None"] = 0] = "None";
    Lighting[Lighting["Ambient"] = 1] = "Ambient";
})(Lighting || (Lighting = {}));
/**
 * components of a generated map area
 */
export class Map {
    constructor(width, height, player) {
        this.width = width;
        this.height = height;
        this.player = player;
        this.lighting = Lighting.None;
        this.tiles = new GridLayer(width, height);
        this.fixtures = new SetLayer();
        this.monsters = new SetLayer();
        this.containers = new SetLayer();
    }
    /**
      * iterate over all things in map
    */
    *[Symbol.iterator]() {
        for (const tile of this.tiles) {
            yield tile;
        }
        for (const fixture of this.fixtures) {
            yield fixture;
        }
        for (const container of this.containers) {
            yield container;
        }
        for (const monster of this.monsters) {
            yield monster;
        }
        yield this.player;
    }
    tileAt(xy) {
        return this.tiles.at(xy);
    }
    fixtureAt(xy) {
        return this.fixtures.at(xy);
    }
    containerAt(xy) {
        return this.containers.at(xy);
    }
    monsterAt(xy) {
        return this.monsters.at(xy);
    }
    *at(xy) {
        const fixture = this.fixtureAt(xy);
        if (fixture) {
            yield fixture;
        }
        const tile = this.tileAt(xy);
        if (tile) {
            yield tile;
        }
        const container = this.containerAt(xy);
        if (container) {
            yield container;
        }
        const monster = this.monsterAt(xy);
        if (monster) {
            yield monster;
        }
        if (this.player.position.equal(xy)) {
            yield this.player;
        }
    }
    inBounds(xy) {
        return xy.x >= 0 && xy.x < this.width && xy.y >= 0 && xy.y < this.height;
    }
    isPassable(position) {
        return this.inBounds(position) && iter.all(this.at(position), th => th.passable);
    }
}
function resetVisibility(map) {
    for (const th of map) {
        if (th.visible === rl.Visibility.Visible) {
            th.visible = rl.Visibility.Fog;
        }
    }
    for (const monster of map.monsters) {
        monster.visible = rl.Visibility.None;
    }
    map.player.visible = rl.Visibility.Visible;
}
export function updateVisibility(map, eye, radius) {
    resetVisibility(map);
    for (let i = 0; i < 8; ++i) {
        updateVisibilityOctant(map, eye, radius, i);
    }
}
function updateVisibilityOctant(map, eye, radius, octant) {
    const shadows = [];
    for (let y = 1; y <= radius; ++y) {
        for (let x = 0; x <= y; ++x) {
            const octantPoint = new geo.Point(x, y);
            const mapPoint = transformOctant(octantPoint, octant).addPoint(eye);
            if (!map.inBounds(mapPoint)) {
                continue;
            }
            if (isShadowed(shadows, octantPoint)) {
                continue;
            }
            const opaque = iter.any(map.at(mapPoint), th => !th.transparent);
            if (opaque) {
                shadows.push(octantPoint);
            }
            if (geo.calcManhattenDist(mapPoint, eye) > radius) {
                continue;
            }
            for (const th of map.at(mapPoint)) {
                th.visible = rl.Visibility.Visible;
            }
        }
    }
}
function transformOctant(coords, octant) {
    switch (octant) {
        case 0: return new geo.Point(-coords.x, coords.y);
        case 1: return new geo.Point(-coords.y, coords.x);
        case 2: return new geo.Point(coords.y, coords.x);
        case 3: return new geo.Point(coords.x, coords.y);
        case 4: return new geo.Point(coords.x, -coords.y);
        case 5: return new geo.Point(coords.y, -coords.x);
        case 6: return new geo.Point(-coords.y, -coords.x);
        case 7: return new geo.Point(-coords.x, -coords.y);
    }
    throw new Error("Invalid octant - must be in interval [0, 8)");
}
function isShadowed(shadows, coords) {
    return iter.any(shadows, x => shadowCoversPoint(x, coords));
}
function shadowCoversPoint(shadow, coords) {
    if (shadow.x == 0) {
        return coords.y > shadow.y;
    }
    const startX = shadow.x / (shadow.y + 1) * coords.y;
    const endX = (shadow.x + 1) / shadow.y * coords.y;
    return coords.y > shadow.y && coords.x > startX && coords.x < endX;
}
/**
 * Find a path from start to goal
 * @param map map
 * @param start start coords
 * @param goal goal coords
 * @returns path from start to goal, including goal, but not starting position
 */
export function findPath(map, start, goal) {
    const open = new Array();
    const closed = new Array();
    open.push({ f: 0, g: 0, h: 0, parent: null, coords: start });
    const popOpen = () => {
        // warning: assumes non-empty!
        let n = 0;
        open.forEach((x, i) => {
            if (x.f < open[n].f) {
                n = i;
            }
        });
        // swap & pop
        const r = open[n];
        if (n < open.length - 1) {
            open[n] = open[open.length - 1];
        }
        open.pop();
        return r;
    };
    const assemblePath = (node) => {
        // path found! backtrack and assemble path
        const path = new Array();
        while (node && !node.coords.equal(start)) {
            path.push(node.coords);
            node = node.parent;
        }
        return path.reverse();
    };
    while (open.length > 0) {
        const cur = popOpen();
        closed.push(cur);
        if (cur.coords.equal(goal)) {
            return assemblePath(cur);
        }
        for (const coords of visitNeighbors(cur.coords, map.width, map.height)) {
            if (!map.isPassable(coords) && !coords.equal(goal)) {
                continue;
            }
            if (closed.find(x => coords.equal(x.coords))) {
                continue;
            }
            const g = cur.g + 1;
            const h = geo.calcManhattenDist(goal, coords);
            const f = g + h;
            // does this node already exist in open list?
            const openNode = open.find(x => coords.equal(x.coords));
            if (openNode != null && openNode.g <= g) {
                continue;
            }
            // place in open list
            open.push({ g: g, h: h, f: f, parent: cur, coords: coords });
        }
    }
    return new Array();
}
function* visitNeighbors(pt, width, height) {
    if (pt.x < 0 || pt.y < 0 || pt.x >= width || pt.y >= height) {
        throw new Error("pt is out of bounds");
    }
    // w
    if (pt.x > 0) {
        const w = new geo.Point(pt.x - 1, pt.y);
        yield w;
    }
    // s
    if (pt.y < height - 1) {
        const s = new geo.Point(pt.x, pt.y + 1);
        yield s;
    }
    // e
    if (pt.x < width - 1) {
        const e = new geo.Point(pt.x + 1, pt.y);
        yield e;
    }
    // n
    if (pt.y > 0) {
        const n = new geo.Point(pt.x, pt.y - 1);
        yield n;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1hcHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEdBQUcsTUFBTSxvQkFBb0IsQ0FBQTtBQUN6QyxPQUFPLEtBQUssSUFBSSxNQUFNLG1CQUFtQixDQUFBO0FBQ3pDLE9BQU8sS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFBO0FBQzdCLE9BQU8sS0FBSyxJQUFJLE1BQU0sbUJBQW1CLENBQUE7QUFlekM7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLFFBQVE7SUFBckI7UUFDcUIsUUFBRyxHQUFHLElBQUksR0FBRyxFQUFLLENBQUE7SUF5Q3ZDLENBQUM7SUF2Q0csR0FBRyxDQUFDLElBQU87UUFDUCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUN0QixDQUFDO0lBRUQsTUFBTSxDQUFDLElBQU87UUFDVixJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUN6QixDQUFDO0lBRUQsR0FBRyxDQUFDLElBQU87UUFDUCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzdCLENBQUM7SUFFRCxFQUFFLENBQUMsUUFBbUI7O1FBQ2xCLEtBQUssTUFBTSxLQUFLLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUMxQixVQUFJLEtBQUssQ0FBQyxRQUFRLDBDQUFFLEtBQUssQ0FBQyxRQUFRLEdBQUc7Z0JBQ2pDLE9BQU8sS0FBSyxDQUFBO2FBQ2Y7U0FDSjtRQUVELE9BQU8sSUFBSSxDQUFBO0lBQ2YsQ0FBQztJQUVELENBQUMsTUFBTSxDQUFDLElBQWM7UUFDbEIsS0FBSyxNQUFNLElBQUksSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ3pCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQzlCLE1BQU0sSUFB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QUFDLElBQUksTUFBTSxFQUFFO1FBQ3pELE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQTtLQUN6QztJQUVELElBQUk7SUFDSixJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ1YsTUFBTSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN2QyxNQUFNLENBQUMsQ0FBQTtLQUNWO0lBRUQsSUFBSTtJQUNKLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ25CLE1BQU0sQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDdkMsTUFBTSxDQUFDLENBQUE7S0FDVjtJQUVELElBQUk7SUFDSixJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsRUFBRTtRQUNsQixNQUFNLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3ZDLE1BQU0sQ0FBQyxDQUFBO0tBQ1Y7SUFFRCxJQUFJO0lBQ0osSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNWLE1BQU0sQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDdkMsTUFBTSxDQUFDLENBQUE7S0FDVjtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBnZW8gZnJvbSBcIi4uL3NoYXJlZC9nZW8yZC5qc1wiXHJcbmltcG9ydCAqIGFzIGl0ZXIgZnJvbSBcIi4uL3NoYXJlZC9pdGVyLmpzXCJcclxuaW1wb3J0ICogYXMgcmwgZnJvbSBcIi4vcmwuanNcIlxyXG5pbXBvcnQgKiBhcyBncmlkIGZyb20gXCIuLi9zaGFyZWQvZ3JpZC5qc1wiXHJcblxyXG4vKipcclxuICogYSBsYXllciBvZiB0aGluZ3Mgb24gYSBtYXBcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTGF5ZXI8VCBleHRlbmRzIHJsLlRoaW5nPiB7XHJcbiAgICBhZGQoaXRlbTogVCk6IHZvaWRcclxuICAgIGRlbGV0ZShpdGVtOiBUKTogdm9pZFxyXG4gICAgaGFzKGl0ZW06IFQpOiBib29sZWFuXHJcbiAgICBhdChwb3NpdGlvbjogZ2VvLlBvaW50KTogVCB8IG51bGxcclxuICAgIHdpdGhpbihhYWJiOiBnZW8uQUFCQik6IEdlbmVyYXRvcjxUPlxyXG4gICAgc2l6ZTogbnVtYmVyXHJcbiAgICBbU3ltYm9sLml0ZXJhdG9yXSgpOiBHZW5lcmF0b3I8VD5cclxufVxyXG5cclxuLyoqXHJcbiAqIGEgbGF5ZXIgdGhhdCBpcyBiYXNlZCBvbiBhIHNldFxyXG4gKiB3b3JrcyB3ZWxsIGZvciBzcGFyc2UgbGF5ZXJzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2V0TGF5ZXI8VCBleHRlbmRzIHJsLlRoaW5nPiBpbXBsZW1lbnRzIExheWVyPFQ+IHtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2V0ID0gbmV3IFNldDxUPigpXHJcblxyXG4gICAgYWRkKGl0ZW06IFQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNldC5hZGQoaXRlbSlcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGUoaXRlbTogVCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc2V0LmRlbGV0ZShpdGVtKVxyXG4gICAgfVxyXG5cclxuICAgIGhhcyhpdGVtOiBUKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0LmhhcyhpdGVtKVxyXG4gICAgfVxyXG5cclxuICAgIGF0KHBvc2l0aW9uOiBnZW8uUG9pbnQpOiBUIHwgbnVsbCB7XHJcbiAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiB0aGlzLnNldCkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUucG9zaXRpb24/LmVxdWFsKHBvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudWxsXHJcbiAgICB9XHJcblxyXG4gICAgKndpdGhpbihhYWJiOiBnZW8uQUFCQik6IEdlbmVyYXRvcjxUPiB7XHJcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMuc2V0KSB7XHJcbiAgICAgICAgICAgIGlmIChhYWJiLmNvbnRhaW5zKGl0ZW0ucG9zaXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICB5aWVsZCBpdGVtXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHNpemUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0LnNpemVcclxuICAgIH1cclxuXHJcbiAgICAqW1N5bWJvbC5pdGVyYXRvcl0oKTogR2VuZXJhdG9yPFQ+IHtcclxuICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHRoaXMuc2V0KSB7XHJcbiAgICAgICAgICAgIHlpZWxkIHZhbHVlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIGEgbGF5ZXIgdGhhdCBpcyBiYXNlZCBvbiBhIGdyaWRcclxuICogd29ya3Mgd2VsbCBmb3IgZGVuc2UgbGF5ZXJzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgR3JpZExheWVyPFQgZXh0ZW5kcyBybC5UaGluZz4gaW1wbGVtZW50cyBMYXllcjxUPiB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNldCA9IG5ldyBTZXQ8VD4oKVxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBncmQ6IGdyaWQuR3JpZDxUIHwgbnVsbD5cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuZ3JkID0gZ3JpZC5nZW5lcmF0ZSh3aWR0aCwgaGVpZ2h0LCAoKSA9PiBudWxsKVxyXG4gICAgfVxyXG5cclxuICAgIGdldCB3aWR0aCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ncmQud2lkdGhcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaGVpZ2h0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdyZC5oZWlnaHRcclxuICAgIH1cclxuXHJcbiAgICBhZGQoaXRlbTogVCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZ3JkLnNldFBvaW50KGl0ZW0ucG9zaXRpb24sIGl0ZW0pXHJcbiAgICAgICAgdGhpcy5zZXQuYWRkKGl0ZW0pXHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlKGl0ZW06IFQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdyZC5zZXRQb2ludChpdGVtLnBvc2l0aW9uLCBudWxsKVxyXG4gICAgICAgIHRoaXMuc2V0LmRlbGV0ZShpdGVtKVxyXG4gICAgfVxyXG5cclxuICAgIGhhcyhpdGVtOiBUKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0LmhhcyhpdGVtKVxyXG4gICAgfVxyXG5cclxuICAgIGF0KHBvc2l0aW9uOiBnZW8uUG9pbnQpOiBUIHwgbnVsbCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JkLmF0UG9pbnQocG9zaXRpb24pXHJcbiAgICB9XHJcblxyXG4gICAgKndpdGhpbihhYWJiOiBnZW8uQUFCQik6IEdlbmVyYXRvcjxUPiB7XHJcbiAgICAgICAgZm9yIChjb25zdCBbaXRlbV0gb2YgdGhpcy5ncmQuc2NhbkFBQkIoYWFiYikpIHtcclxuICAgICAgICAgICAgaWYgKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIHlpZWxkIGl0ZW1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgc2l6ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXQuc2l6ZVxyXG4gICAgfVxyXG5cclxuICAgICpbU3ltYm9sLml0ZXJhdG9yXSgpOiBHZW5lcmF0b3I8VD4ge1xyXG4gICAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdGhpcy5zZXQpIHtcclxuICAgICAgICAgICAgeWllbGQgdmFsdWVcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIExpZ2h0aW5nIHtcclxuICAgIE5vbmUsXHJcbiAgICBBbWJpZW50LFxyXG59XHJcblxyXG4vKipcclxuICogY29tcG9uZW50cyBvZiBhIGdlbmVyYXRlZCBtYXAgYXJlYVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1hcCB7XHJcbiAgICB0aWxlczogTGF5ZXI8cmwuVGlsZT5cclxuICAgIGZpeHR1cmVzOiBMYXllcjxybC5GaXh0dXJlPlxyXG4gICAgbW9uc3RlcnM6IExheWVyPHJsLk1vbnN0ZXI+XHJcbiAgICBjb250YWluZXJzOiBMYXllcjxybC5Db250YWluZXI+XHJcbiAgICBsaWdodGluZzogTGlnaHRpbmcgPSBMaWdodGluZy5Ob25lXHJcblxyXG4gICAgY29uc3RydWN0b3IocmVhZG9ubHkgd2lkdGg6IG51bWJlciwgcmVhZG9ubHkgaGVpZ2h0OiBudW1iZXIsIHJlYWRvbmx5IHBsYXllcjogcmwuUGxheWVyKSB7XHJcbiAgICAgICAgdGhpcy50aWxlcyA9IG5ldyBHcmlkTGF5ZXIod2lkdGgsIGhlaWdodClcclxuICAgICAgICB0aGlzLmZpeHR1cmVzID0gbmV3IFNldExheWVyKClcclxuICAgICAgICB0aGlzLm1vbnN0ZXJzID0gbmV3IFNldExheWVyKClcclxuICAgICAgICB0aGlzLmNvbnRhaW5lcnMgPSBuZXcgU2V0TGF5ZXIoKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICAqIGl0ZXJhdGUgb3ZlciBhbGwgdGhpbmdzIGluIG1hcFxyXG4gICAgKi9cclxuICAgIHB1YmxpYyAqW1N5bWJvbC5pdGVyYXRvcl0oKTogR2VuZXJhdG9yPHJsLlRoaW5nPiB7XHJcbiAgICAgICAgZm9yIChjb25zdCB0aWxlIG9mIHRoaXMudGlsZXMpIHtcclxuICAgICAgICAgICAgeWllbGQgdGlsZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBmaXh0dXJlIG9mIHRoaXMuZml4dHVyZXMpIHtcclxuICAgICAgICAgICAgeWllbGQgZml4dHVyZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBjb250YWluZXIgb2YgdGhpcy5jb250YWluZXJzKSB7XHJcbiAgICAgICAgICAgIHlpZWxkIGNvbnRhaW5lclxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBtb25zdGVyIG9mIHRoaXMubW9uc3RlcnMpIHtcclxuICAgICAgICAgICAgeWllbGQgbW9uc3RlclxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgeWllbGQgdGhpcy5wbGF5ZXJcclxuICAgIH1cclxuXHJcbiAgICB0aWxlQXQoeHk6IGdlby5Qb2ludCk6IHJsLlRpbGUgfCBudWxsIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50aWxlcy5hdCh4eSlcclxuICAgIH1cclxuXHJcbiAgICBmaXh0dXJlQXQoeHk6IGdlby5Qb2ludCk6IHJsLkZpeHR1cmUgfCBudWxsIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maXh0dXJlcy5hdCh4eSlcclxuICAgIH1cclxuXHJcbiAgICBjb250YWluZXJBdCh4eTogZ2VvLlBvaW50KTogcmwuQ29udGFpbmVyIHwgbnVsbCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVycy5hdCh4eSlcclxuICAgIH1cclxuXHJcbiAgICBtb25zdGVyQXQoeHk6IGdlby5Qb2ludCk6IHJsLk1vbnN0ZXIgfCBudWxsIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tb25zdGVycy5hdCh4eSlcclxuICAgIH1cclxuXHJcbiAgICAqYXQoeHk6IGdlby5Qb2ludCk6IEdlbmVyYXRvcjxybC5Nb25zdGVyIHwgcmwuRml4dHVyZSB8IHJsLlRpbGU+IHtcclxuICAgICAgICBjb25zdCBmaXh0dXJlID0gdGhpcy5maXh0dXJlQXQoeHkpXHJcbiAgICAgICAgaWYgKGZpeHR1cmUpIHtcclxuICAgICAgICAgICAgeWllbGQgZml4dHVyZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdGlsZSA9IHRoaXMudGlsZUF0KHh5KVxyXG4gICAgICAgIGlmICh0aWxlKSB7XHJcbiAgICAgICAgICAgIHlpZWxkIHRpbGVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyQXQoeHkpXHJcbiAgICAgICAgaWYgKGNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICB5aWVsZCBjb250YWluZXJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG1vbnN0ZXIgPSB0aGlzLm1vbnN0ZXJBdCh4eSlcclxuICAgICAgICBpZiAobW9uc3Rlcikge1xyXG4gICAgICAgICAgICB5aWVsZCBtb25zdGVyXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5wbGF5ZXIucG9zaXRpb24uZXF1YWwoeHkpKSB7XHJcbiAgICAgICAgICAgIHlpZWxkIHRoaXMucGxheWVyXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGluQm91bmRzKHh5OiBnZW8uUG9pbnQpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4geHkueCA+PSAwICYmIHh5LnggPCB0aGlzLndpZHRoICYmIHh5LnkgPj0gMCAmJiB4eS55IDwgdGhpcy5oZWlnaHRcclxuICAgIH1cclxuXHJcbiAgICBpc1Bhc3NhYmxlKHBvc2l0aW9uOiBnZW8uUG9pbnQpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbkJvdW5kcyhwb3NpdGlvbikgJiYgaXRlci5hbGwodGhpcy5hdChwb3NpdGlvbiksIHRoID0+IHRoLnBhc3NhYmxlKVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByZXNldFZpc2liaWxpdHkobWFwOiBNYXApIHtcclxuICAgIGZvciAoY29uc3QgdGggb2YgbWFwKSB7XHJcbiAgICAgICAgaWYgKHRoLnZpc2libGUgPT09IHJsLlZpc2liaWxpdHkuVmlzaWJsZSkge1xyXG4gICAgICAgICAgICB0aC52aXNpYmxlID0gcmwuVmlzaWJpbGl0eS5Gb2dcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChjb25zdCBtb25zdGVyIG9mIG1hcC5tb25zdGVycykge1xyXG4gICAgICAgIG1vbnN0ZXIudmlzaWJsZSA9IHJsLlZpc2liaWxpdHkuTm9uZVxyXG4gICAgfVxyXG5cclxuICAgIG1hcC5wbGF5ZXIudmlzaWJsZSA9IHJsLlZpc2liaWxpdHkuVmlzaWJsZVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlVmlzaWJpbGl0eShtYXA6IE1hcCwgZXllOiBnZW8uUG9pbnQsIHJhZGl1czogbnVtYmVyKSB7XHJcbiAgICByZXNldFZpc2liaWxpdHkobWFwKVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA4OyArK2kpIHtcclxuICAgICAgICB1cGRhdGVWaXNpYmlsaXR5T2N0YW50KG1hcCwgZXllLCByYWRpdXMsIGkpXHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVZpc2liaWxpdHlPY3RhbnQobWFwOiBNYXAsIGV5ZTogZ2VvLlBvaW50LCByYWRpdXM6IG51bWJlciwgb2N0YW50OiBudW1iZXIpIHtcclxuICAgIGNvbnN0IHNoYWRvd3M6IGdlby5Qb2ludFtdID0gW11cclxuXHJcbiAgICBmb3IgKGxldCB5ID0gMTsgeSA8PSByYWRpdXM7ICsreSkge1xyXG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDw9IHk7ICsreCkge1xyXG4gICAgICAgICAgICBjb25zdCBvY3RhbnRQb2ludCA9IG5ldyBnZW8uUG9pbnQoeCwgeSlcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1hcFBvaW50ID0gdHJhbnNmb3JtT2N0YW50KG9jdGFudFBvaW50LCBvY3RhbnQpLmFkZFBvaW50KGV5ZSlcclxuICAgICAgICAgICAgaWYgKCFtYXAuaW5Cb3VuZHMobWFwUG9pbnQpKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNTaGFkb3dlZChzaGFkb3dzLCBvY3RhbnRQb2ludCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG9wYXF1ZSA9IGl0ZXIuYW55KG1hcC5hdChtYXBQb2ludCksIHRoID0+ICF0aC50cmFuc3BhcmVudClcclxuICAgICAgICAgICAgaWYgKG9wYXF1ZSkge1xyXG4gICAgICAgICAgICAgICAgc2hhZG93cy5wdXNoKG9jdGFudFBvaW50KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZ2VvLmNhbGNNYW5oYXR0ZW5EaXN0KG1hcFBvaW50LCBleWUpID4gcmFkaXVzKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRoIG9mIG1hcC5hdChtYXBQb2ludCkpIHtcclxuICAgICAgICAgICAgICAgIHRoLnZpc2libGUgPSBybC5WaXNpYmlsaXR5LlZpc2libGVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gdHJhbnNmb3JtT2N0YW50KGNvb3JkczogZ2VvLlBvaW50LCBvY3RhbnQ6IG51bWJlcik6IGdlby5Qb2ludCB7XHJcbiAgICBzd2l0Y2ggKG9jdGFudCkge1xyXG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBnZW8uUG9pbnQoLWNvb3Jkcy54LCBjb29yZHMueSk7XHJcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IGdlby5Qb2ludCgtY29vcmRzLnksIGNvb3Jkcy54KTtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgZ2VvLlBvaW50KGNvb3Jkcy55LCBjb29yZHMueCk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IGdlby5Qb2ludChjb29yZHMueCwgY29vcmRzLnkpO1xyXG4gICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBnZW8uUG9pbnQoY29vcmRzLngsIC1jb29yZHMueSk7XHJcbiAgICAgICAgY2FzZSA1OiByZXR1cm4gbmV3IGdlby5Qb2ludChjb29yZHMueSwgLWNvb3Jkcy54KTtcclxuICAgICAgICBjYXNlIDY6IHJldHVybiBuZXcgZ2VvLlBvaW50KC1jb29yZHMueSwgLWNvb3Jkcy54KTtcclxuICAgICAgICBjYXNlIDc6IHJldHVybiBuZXcgZ2VvLlBvaW50KC1jb29yZHMueCwgLWNvb3Jkcy55KTtcclxuICAgIH1cclxuXHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIG9jdGFudCAtIG11c3QgYmUgaW4gaW50ZXJ2YWwgWzAsIDgpXCIpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzU2hhZG93ZWQoc2hhZG93czogZ2VvLlBvaW50W10sIGNvb3JkczogZ2VvLlBvaW50KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gaXRlci5hbnkoc2hhZG93cywgeCA9PiBzaGFkb3dDb3ZlcnNQb2ludCh4LCBjb29yZHMpKVxyXG59XHJcblxyXG5mdW5jdGlvbiBzaGFkb3dDb3ZlcnNQb2ludChzaGFkb3c6IGdlby5Qb2ludCwgY29vcmRzOiBnZW8uUG9pbnQpOiBib29sZWFuIHtcclxuICAgIGlmIChzaGFkb3cueCA9PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvb3Jkcy55ID4gc2hhZG93LnlcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzdGFydFggPSBzaGFkb3cueCAvIChzaGFkb3cueSArIDEpICogY29vcmRzLnlcclxuICAgIGNvbnN0IGVuZFggPSAoc2hhZG93LnggKyAxKSAvIHNoYWRvdy55ICogY29vcmRzLnlcclxuXHJcbiAgICByZXR1cm4gY29vcmRzLnkgPiBzaGFkb3cueSAmJiBjb29yZHMueCA+IHN0YXJ0WCAmJiBjb29yZHMueCA8IGVuZFhcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBGaW5kIGEgcGF0aCBmcm9tIHN0YXJ0IHRvIGdvYWxcclxuICogQHBhcmFtIG1hcCBtYXBcclxuICogQHBhcmFtIHN0YXJ0IHN0YXJ0IGNvb3Jkc1xyXG4gKiBAcGFyYW0gZ29hbCBnb2FsIGNvb3Jkc1xyXG4gKiBAcmV0dXJucyBwYXRoIGZyb20gc3RhcnQgdG8gZ29hbCwgaW5jbHVkaW5nIGdvYWwsIGJ1dCBub3Qgc3RhcnRpbmcgcG9zaXRpb25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmaW5kUGF0aChtYXA6IE1hcCwgc3RhcnQ6IGdlby5Qb2ludCwgZ29hbDogZ2VvLlBvaW50KTogQXJyYXk8Z2VvLlBvaW50PiB7XHJcbiAgICBpbnRlcmZhY2UgTm9kZSB7XHJcbiAgICAgICAgZjogbnVtYmVyXHJcbiAgICAgICAgZzogbnVtYmVyXHJcbiAgICAgICAgaDogbnVtYmVyXHJcbiAgICAgICAgcGFyZW50OiBOb2RlIHwgbnVsbFxyXG4gICAgICAgIGNvb3JkczogZ2VvLlBvaW50XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgb3BlbiA9IG5ldyBBcnJheTxOb2RlPigpXHJcbiAgICBjb25zdCBjbG9zZWQgPSBuZXcgQXJyYXk8Tm9kZT4oKVxyXG5cclxuICAgIG9wZW4ucHVzaCh7IGY6IDAsIGc6IDAsIGg6IDAsIHBhcmVudDogbnVsbCwgY29vcmRzOiBzdGFydCB9KVxyXG5cclxuICAgIGNvbnN0IHBvcE9wZW4gPSAoKSA9PiB7XHJcbiAgICAgICAgLy8gd2FybmluZzogYXNzdW1lcyBub24tZW1wdHkhXHJcbiAgICAgICAgbGV0IG4gPSAwXHJcbiAgICAgICAgb3Blbi5mb3JFYWNoKCh4LCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh4LmYgPCBvcGVuW25dLmYpIHtcclxuICAgICAgICAgICAgICAgIG4gPSBpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICAvLyBzd2FwICYgcG9wXHJcbiAgICAgICAgY29uc3QgciA9IG9wZW5bbl1cclxuXHJcbiAgICAgICAgaWYgKG4gPCBvcGVuLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgb3BlbltuXSA9IG9wZW5bb3Blbi5sZW5ndGggLSAxXVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb3Blbi5wb3AoKVxyXG5cclxuICAgICAgICByZXR1cm4gclxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGFzc2VtYmxlUGF0aCA9IChub2RlOiBOb2RlIHwgbnVsbCk6IEFycmF5PGdlby5Qb2ludD4gPT4ge1xyXG4gICAgICAgIC8vIHBhdGggZm91bmQhIGJhY2t0cmFjayBhbmQgYXNzZW1ibGUgcGF0aFxyXG4gICAgICAgIGNvbnN0IHBhdGggPSBuZXcgQXJyYXk8Z2VvLlBvaW50PigpXHJcblxyXG4gICAgICAgIHdoaWxlIChub2RlICYmICFub2RlLmNvb3Jkcy5lcXVhbChzdGFydCkpIHtcclxuICAgICAgICAgICAgcGF0aC5wdXNoKG5vZGUuY29vcmRzKVxyXG4gICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBwYXRoLnJldmVyc2UoKVxyXG4gICAgfVxyXG5cclxuICAgIHdoaWxlIChvcGVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBjb25zdCBjdXIgPSBwb3BPcGVuKClcclxuICAgICAgICBjbG9zZWQucHVzaChjdXIpXHJcblxyXG4gICAgICAgIGlmIChjdXIuY29vcmRzLmVxdWFsKGdvYWwpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhc3NlbWJsZVBhdGgoY3VyKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBjb29yZHMgb2YgdmlzaXROZWlnaGJvcnMoY3VyLmNvb3JkcywgbWFwLndpZHRoLCBtYXAuaGVpZ2h0KSkge1xyXG4gICAgICAgICAgICBpZiAoIW1hcC5pc1Bhc3NhYmxlKGNvb3JkcykgJiYgIWNvb3Jkcy5lcXVhbChnb2FsKSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNsb3NlZC5maW5kKHggPT4gY29vcmRzLmVxdWFsKHguY29vcmRzKSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGcgPSBjdXIuZyArIDFcclxuICAgICAgICAgICAgY29uc3QgaCA9IGdlby5jYWxjTWFuaGF0dGVuRGlzdChnb2FsLCBjb29yZHMpXHJcbiAgICAgICAgICAgIGNvbnN0IGYgPSBnICsgaFxyXG5cclxuICAgICAgICAgICAgLy8gZG9lcyB0aGlzIG5vZGUgYWxyZWFkeSBleGlzdCBpbiBvcGVuIGxpc3Q/XHJcbiAgICAgICAgICAgIGNvbnN0IG9wZW5Ob2RlID0gb3Blbi5maW5kKHggPT4gY29vcmRzLmVxdWFsKHguY29vcmRzKSlcclxuICAgICAgICAgICAgaWYgKG9wZW5Ob2RlICE9IG51bGwgJiYgb3Blbk5vZGUuZyA8PSBnKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBwbGFjZSBpbiBvcGVuIGxpc3RcclxuICAgICAgICAgICAgb3Blbi5wdXNoKHsgZzogZywgaDogaCwgZjogZiwgcGFyZW50OiBjdXIsIGNvb3JkczogY29vcmRzIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXcgQXJyYXk8Z2VvLlBvaW50PigpO1xyXG59XHJcblxyXG5mdW5jdGlvbiogdmlzaXROZWlnaGJvcnMocHQ6IGdlby5Qb2ludCwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiBJdGVyYWJsZTxnZW8uUG9pbnQ+IHtcclxuICAgIGlmIChwdC54IDwgMCB8fCBwdC55IDwgMCB8fCBwdC54ID49IHdpZHRoIHx8IHB0LnkgPj0gaGVpZ2h0KSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicHQgaXMgb3V0IG9mIGJvdW5kc1wiKVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHdcclxuICAgIGlmIChwdC54ID4gMCkge1xyXG4gICAgICAgIGNvbnN0IHcgPSBuZXcgZ2VvLlBvaW50KHB0LnggLSAxLCBwdC55KVxyXG4gICAgICAgIHlpZWxkIHdcclxuICAgIH1cclxuXHJcbiAgICAvLyBzXHJcbiAgICBpZiAocHQueSA8IGhlaWdodCAtIDEpIHtcclxuICAgICAgICBjb25zdCBzID0gbmV3IGdlby5Qb2ludChwdC54LCBwdC55ICsgMSlcclxuICAgICAgICB5aWVsZCBzXHJcbiAgICB9XHJcblxyXG4gICAgLy8gZVxyXG4gICAgaWYgKHB0LnggPCB3aWR0aCAtIDEpIHtcclxuICAgICAgICBjb25zdCBlID0gbmV3IGdlby5Qb2ludChwdC54ICsgMSwgcHQueSlcclxuICAgICAgICB5aWVsZCBlXHJcbiAgICB9XHJcblxyXG4gICAgLy8gblxyXG4gICAgaWYgKHB0LnkgPiAwKSB7XHJcbiAgICAgICAgY29uc3QgbiA9IG5ldyBnZW8uUG9pbnQocHQueCwgcHQueSAtIDEpXHJcbiAgICAgICAgeWllbGQgblxyXG4gICAgfVxyXG59XHJcbiJdfQ==