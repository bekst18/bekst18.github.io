import * as geo from "../shared/geo2d.js";
import * as array from "../shared/array.js";
import * as rl from "./rl.js";
import * as grid from "../shared/grid.js";
/**
 * a layer that is based on a set
 * works well for sparse layers
 */
export class SetLayer {
    constructor() {
        this.set = new Set();
    }
    add(item) {
        if (!item.position) {
            throw new Error("Item cannot be placed in layer without a position");
        }
        this.set.add(item);
    }
    delete(item) {
        this.set.delete(item);
    }
    has(item) {
        return this.set.has(item);
    }
    at(position) {
        var _a;
        for (const value of this.set) {
            if ((_a = value.position) === null || _a === void 0 ? void 0 : _a.equal(position)) {
                return value;
            }
        }
        return null;
    }
    *[Symbol.iterator]() {
        for (const value of this.set) {
            yield value;
        }
    }
}
/**
 * a layer that is based on a grid
 * works well for dense layers
 */
export class GridLayer {
    constructor(width, height) {
        this.set = new Set();
        this.grd = grid.generate(width, height, () => null);
    }
    get width() {
        return this.grd.width;
    }
    get height() {
        return this.grd.height;
    }
    add(item) {
        if (!item.position) {
            throw new Error("Item cannot be placed in layer without a position");
        }
        this.grd.setPoint(item.position, item);
        this.set.add(item);
    }
    delete(item) {
        if (!item.position) {
            throw new Error("Item cannot be deleted from layer without a position");
        }
        this.grd.setPoint(item.position, null);
        this.set.delete(item);
    }
    has(item) {
        return this.set.has(item);
    }
    at(position) {
        return this.grd.atPoint(position);
    }
    *[Symbol.iterator]() {
        for (const value of this.set) {
            yield value;
        }
    }
}
/**
 * components of a generated map area
 */
export class Map {
    constructor(width, height, player) {
        this.width = width;
        this.height = height;
        this.player = player;
        this.tiles = new GridLayer(width, height);
        this.fixtures = new SetLayer();
        this.monsters = new SetLayer();
        this.containers = new SetLayer();
    }
    /**
      * iterate over all things in map
    */
    *[Symbol.iterator]() {
        for (const tile of this.tiles) {
            yield tile;
        }
        for (const fixture of this.fixtures) {
            yield fixture;
        }
        for (const container of this.containers) {
            yield container;
        }
        for (const monster of this.monsters) {
            yield monster;
        }
        yield this.player;
    }
    tileAt(xy) {
        return this.tiles.at(xy);
    }
    fixtureAt(xy) {
        return this.fixtures.at(xy);
    }
    containerAt(xy) {
        return this.containers.at(xy);
    }
    monsterAt(xy) {
        return this.monsters.at(xy);
    }
    *at(xy) {
        const fixture = this.fixtureAt(xy);
        if (fixture) {
            yield fixture;
        }
        const tile = this.tileAt(xy);
        if (tile) {
            yield tile;
        }
        const container = this.containerAt(xy);
        if (container) {
            yield container;
        }
        const monster = this.monsterAt(xy);
        if (monster) {
            yield monster;
        }
    }
    inBounds(xy) {
        return xy.x >= 0 && xy.x < this.width && xy.y >= 0 && xy.y < this.height;
    }
}
function resetVisibility(map) {
    for (const th of map) {
        if (th.visible) {
            th.visible = rl.Visibility.Fog;
        }
    }
    for (const monster of map.monsters) {
        monster.visible = rl.Visibility.None;
    }
    map.player.visible = rl.Visibility.Visible;
}
export function updateVisibility(map, eye, radius) {
    resetVisibility(map);
    for (let i = 0; i < 8; ++i) {
        updateVisibilityOctant(map, eye, radius, i);
    }
}
function updateVisibilityOctant(map, eye, radius, octant) {
    const shadows = [];
    for (let y = 1; y <= radius; ++y) {
        for (let x = 0; x <= y; ++x) {
            const octantPoint = new geo.Point(x, y);
            const mapPoint = transformOctant(octantPoint, octant).addPoint(eye);
            if (!map.inBounds(mapPoint)) {
                continue;
            }
            if (isShadowed(shadows, octantPoint)) {
                continue;
            }
            const opaque = array.any(map.at(mapPoint), th => !th.transparent);
            if (opaque) {
                shadows.push(octantPoint);
            }
            if (geo.calcManhattenDist(mapPoint, eye) > radius) {
                continue;
            }
            for (const th of map.at(mapPoint)) {
                th.visible = rl.Visibility.Visible;
            }
        }
    }
}
function transformOctant(coords, octant) {
    switch (octant) {
        case 0: return new geo.Point(-coords.x, coords.y);
        case 1: return new geo.Point(-coords.y, coords.x);
        case 2: return new geo.Point(coords.y, coords.x);
        case 3: return new geo.Point(coords.x, coords.y);
        case 4: return new geo.Point(coords.x, -coords.y);
        case 5: return new geo.Point(coords.y, -coords.x);
        case 6: return new geo.Point(-coords.y, -coords.x);
        case 7: return new geo.Point(-coords.x, -coords.y);
    }
    throw new Error("Invalid octant - must be in interval [0, 8)");
}
function isShadowed(shadows, coords) {
    return array.any(shadows, x => shadowCoversPoint(x, coords));
}
function shadowCoversPoint(shadow, coords) {
    if (shadow.x == 0) {
        return coords.y > shadow.y;
    }
    const startX = shadow.x / (shadow.y + 1) * coords.y;
    const endX = (shadow.x + 1) / shadow.y * coords.y;
    return coords.y > shadow.y && coords.x > startX && coords.x < endX;
}
//# sourceMappingURL=data:application/json;base64,