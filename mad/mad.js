import * as dom from "../shared/dom.js";
import * as channel from "../shared/channel.js";
const minPlaceholderLength = 16;
var TokenType;
(function (TokenType) {
    TokenType[TokenType["Text"] = 0] = "Text";
    TokenType[TokenType["Placeholder"] = 1] = "Placeholder";
})(TokenType || (TokenType = {}));
class CreateUi {
    constructor() {
        this.createDiv = dom.byId("createUi");
        this.form = dom.byId("createForm");
        this.titleInput = dom.byId("title");
        this.templateInput = dom.byId("template");
        this.clearButton = dom.byId("clearButton");
        this.placeholderSelect = dom.byId("placeholders");
        this.create = new channel.Channel();
        this.form.addEventListener("submit", evt => this.submit(evt));
        this.clearButton.addEventListener("click", _ => this.clear());
        this.templateInput.addEventListener("input", e => this.input(e));
    }
    show() {
        this.createDiv.hidden = false;
    }
    hide() {
        this.createDiv.hidden = true;
    }
    load(state) {
        this.titleInput.value = state.title;
        this.templateInput.value = state.template;
    }
    submit(evt) {
        evt.preventDefault();
        this.create.publish(this.titleInput.value, this.templateInput.value);
    }
    clear() {
        this.templateInput.value = "";
    }
}
class PrintUi {
    constructor() {
        this.printDiv = dom.byId("printUi");
        this.printTitle = dom.byId("printTitle");
        this.printContent = dom.byId("printContent");
        this.placeholderTemplate = dom.byId("placeholderTemplate");
        this.returnToTemplateButton = dom.byId("returnToTemplate");
        this.returnToTemplate = new channel.Channel();
        this.returnToTemplateButton.addEventListener("click", _ => this.returnToTemplate.publish());
    }
    show(title, template) {
        this.printDiv.hidden = false;
        this.printTitle.textContent = title;
        dom.removeAllChildren(this.printContent);
        let tokens = this.parseTemplate(template);
        for (const token of tokens) {
            const type = token.type;
            const value = template.substr(token.start, token.length);
            switch (type) {
                case TokenType.Text:
                    this.appendText(value);
                    break;
                case TokenType.Placeholder:
                    this.appendPlaceholder(value);
                    break;
            }
        }
    }
    hide() {
        this.printDiv.hidden = true;
    }
    parseTemplate(template) {
        let tokens = new Array();
        let i = 0;
        while (true) {
            const token = this.parseToken(template, i);
            tokens.push(token);
            i += token.length;
            if (i >= template.length) {
                break;
            }
        }
        return tokens;
    }
    parseToken(template, start) {
        // peek at next char
        const ch = template[start];
        if (ch !== '[') {
            return this.parseText(template, start);
        }
        return this.parsePlaceholder(template, start);
    }
    parsePlaceholder(template, start) {
        for (let i = start; i < template.length; ++i) {
            const ch = template[i];
            if (ch == ']') {
                return {
                    type: TokenType.Placeholder,
                    start: start,
                    length: i - start + 1,
                };
            }
        }
        return {
            type: TokenType.Placeholder,
            start: start,
            length: template.length - start,
        };
    }
    parseText(template, start) {
        for (let i = start; i < template.length; ++i) {
            const ch = template[i];
            if (ch == '[') {
                return {
                    type: TokenType.Text,
                    start: start,
                    length: i - start,
                };
            }
        }
        return {
            type: TokenType.Text,
            start: start,
            length: template.length - start,
        };
    }
    appendText(text) {
        const node = document.createTextNode(text);
        this.printContent.append(node);
    }
    appendPlaceholder(placeholder) {
        placeholder = this.formatPlaceholder(placeholder);
        const frag = this.placeholderTemplate.content.cloneNode(true);
        const textDiv = dom.bySelector(frag, ".placeholder-text");
        textDiv.textContent = placeholder;
        this.printContent.append(frag);
    }
    formatPlaceholder(placeholder) {
        if (placeholder.startsWith("[")) {
            placeholder = placeholder.substr(1);
        }
        if (placeholder.endsWith("]")) {
            placeholder = placeholder.substr(0, placeholder.length - 1);
        }
        placeholder = placeholder.trim();
        while (placeholder.length < minPlaceholderLength) {
            placeholder = ` ${placeholder} `;
        }
        return placeholder;
    }
}
async function main() {
    const createUi = new CreateUi();
    const printUi = new PrintUi();
    const settingsKey = "madSettings";
    createUi.show();
    createUi.create.subcribe(onCreate);
    printUi.returnToTemplate.subcribe(onReturnToTemplate);
    const state = loadState();
    if (state) {
        createUi.load(state);
    }
    function onCreate(title, template) {
        createUi.hide();
        saveState({ title, template });
        printUi.show(title, template);
    }
    function onReturnToTemplate() {
        printUi.hide();
        createUi.show();
    }
    function loadState() {
        const json = localStorage.getItem(settingsKey);
        if (!json) {
            console.log("No stored settings found");
            return null;
        }
        const state = JSON.parse(json);
        return state;
    }
    function saveState(state) {
        localStorage.setItem(settingsKey, JSON.stringify(state));
    }
}
main();
//# sourceMappingURL=data:application/json;base64,